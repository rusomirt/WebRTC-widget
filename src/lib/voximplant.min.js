(function () {
    var root = this;
    var VoxImplant = function (e) {
        function t(o) {
            if (n[o])return n[o].exports;
            var r = n[o] = {exports: {}, id: o, loaded: !1};
            return e[o].call(r.exports, r, r.exports, t), r.loaded = !0, r.exports
        }

        var n = {};
        return t.m = e, t.c = n, t.p = "/build", t(0)
    }([function (e, t, n) {
        "use strict";
        function o() {
            return i.Client.getInstance()
        }

        function r() {
            if (!s.Authenticator.get().authorized())throw new Error("NOT_AUTHORIZED");
            return a.Messenger.getInstance()
        }

        var i = n(9);
        n(45);
        var a = n(24), s = n(12), c = n(25);
        t.Events = c.Events;
        var d = n(16);
        t.CallEvents = d.CallEvents;
        var l = n(19);
        t.MessagingEvents = l.MessagingEvents;
        var u = n(43);
        t.OperatorACDStatuses = u.OperatorACDStatuses;
        var g = n(1);
        t.LogCategory = g.LogCategory, t.LogLevel = g.LogLevel, t.getInstance = o, t.version = i.Client.getInstance().version, t.getMessenger = r
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.NONE = 0] = "NONE", e[e.ERROR = 1] = "ERROR", e[e.WARNING = 2] = "WARNING", e[e.INFO = 3] = "INFO", e[e.TRACE = 4] = "TRACE"
        }(t.LogLevel || (t.LogLevel = {}));
        var n = t.LogLevel;
        !function (e) {
            e[e.SIGNALING = 0] = "SIGNALING", e[e.RTC = 1] = "RTC", e[e.USERMEDIA = 2] = "USERMEDIA", e[e.CALL = 3] = "CALL", e[e.CALLEXP2P = 4] = "CALLEXP2P", e[e.CALLEXSERVER = 5] = "CALLEXSERVER", e[e.CALLMANAGER = 6] = "CALLMANAGER", e[e.CLIENT = 7] = "CLIENT", e[e.AUTHENTICATOR = 8] = "AUTHENTICATOR", e[e.PCFACTORY = 9] = "PCFACTORY", e[e.UTILS = 10] = "UTILS", e[e.ORTC = 11] = "ORTC", e[e.MESSAGING = 12] = "MESSAGING"
        }(t.LogCategory || (t.LogCategory = {}));
        var o = t.LogCategory, r = function () {
            function e(e, t, n) {
                this.category = e, this.label = t, this.provider = n
            }

            return e.prototype.log = function (e, t) {
                this.provider.writeMessage(this.category, this.label, e, t)
            }, e.prototype.error = function (e) {
                this.log(n.ERROR, e)
            }, e.prototype.warning = function (e) {
                this.log(n.WARNING, e)
            }, e.prototype.info = function (e) {
                this.log(n.INFO, e)
            }, e.prototype.trace = function (e) {
                this.log(n.TRACE, e)
            }, e
        }();
        t.Logger = r;
        var i = function () {
            function e() {
                this.levels = {}
            }

            return e.get = function () {
                return "undefined" == typeof this.inst && (this.inst = new e, this.inst.prettyPrint = !1), this.inst
            }, e.prototype.setPrettyPrint = function (e) {
                this.prettyPrint = e
            }, e.prototype.setLogLevel = function (e, t) {
                this.levels[o[e]] = t
            }, e.prototype.writeMessage = function (e, t, r, i) {
                var a = n.NONE;
                "undefined" != typeof this.levels[o[e]] && (a = this.levels[o[e]]), r <= a && ("undefined" != typeof console.debug && "undefined" != typeof console.info && "undefined" != typeof console.error && "undefined" != typeof console.warn ? this.prettyPrint ? ("string" != typeof i && (i = JSON.stringify(i)), console.log("%c " + (new Date).toUTCString() + " [" + n[r] + "] %c" + t + ": %c" + i.replace("\r\n", "<br>"), "color:#ccc", "color:#2375a2", "color:#000")) : r == n.ERROR ? console.error((new Date).toString() + " " + n[r] + " " + t + ": " + i) : r == n.WARNING ? console.warn((new Date).toString() + " " + n[r] + " " + t + ": " + i) : r == n.INFO ? console.info((new Date).toString() + " " + n[r] + " " + t + ": " + i) : r == n.TRACE ? console.debug((new Date).toString() + " " + n[r] + " " + t + ": " + i) : console.log((new Date).toString() + " " + n[r] + " " + t + ": " + i) : console.log((new Date).toString() + " " + n[r] + " " + t + ": " + i))
            }, e.prototype.createLogger = function (e, t) {
                return new r(e, t, this)
            }, e.d_trace = function (t) {
                return function (o, r, i) {
                    return {
                        value: function () {
                            for (var o = [], a = 0; a < arguments.length; a++)o[a - 0] = arguments[a];
                            var s = "";
                            try {
                                s = o.map(function (e) {
                                    return JSON.stringify(e)
                                }).join()
                            } catch (e) {
                                s = "circular structure"
                            }
                            var c, d = i.value.apply(this, o);
                            try {
                                c = JSON.stringify(c)
                            } catch (e) {
                                c = "circular structure"
                            }
                            return "undefined" == typeof c ? e.get().writeMessage(t, "", n.TRACE, "Call: " + r + "(" + s + ")") : e.get().writeMessage(t, "", n.TRACE, "Call: " + r + "(" + s + ") => " + c), d
                        }
                    }
                }
            }, e
        }();
        t.LogManager = i
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.ping = "__ping"] = "ping", e[e.login = "login"] = "login", e[e.loginGenerateOneTimeKey = "loginGenerateOneTimeKey"] = "loginGenerateOneTimeKey", e[e.loginStage2 = "loginStage2"] = "loginStage2", e[e.setOperatorACDStatus = "setOperatorACDStatus"] = "setOperatorACDStatus", e[e.setDesiredVideoBandwidth = "setDesiredVideoBandwidth"] = "setDesiredVideoBandwidth", e[e.rejectCall = "rejectCall"] = "rejectCall", e[e.disconnectCall = "disconnectCall"] = "disconnectCall", e[e.sendDTMF = "sendDTMF"] = "sendDTMF", e[e.sendSIPInfo = "sendSIPInfo"] = "sendSIPInfo", e[e.hold = "hold"] = "hold", e[e.unhold = "unhold"] = "unhold", e[e.acceptCall = "acceptCall"] = "acceptCall", e[e.createCall = "createCall"] = "createCall", e[e.transferCall = "transferCall"] = "transferCall", e[e.muteLocal = "__muteLocal"] = "muteLocal", e[e.reInvite = "ReInvite"] = "reInvite", e[e.acceptReInvite = "AcceptReInvite"] = "acceptReInvite", e[e.confirmPC = "__confirmPC"] = "confirmPC", e[e.addCandidate = "__addCandidate"] = "addCandidate", e[e.loginUsingOneTimeKey = "loginUsingOneTimeKey"] = "loginUsingOneTimeKey", e[e.refreshOauthToken = "refreshOauthToken"] = "refreshOauthToken"
        }(t.RemoteFunction || (t.RemoteFunction = {}));
        t.RemoteFunction
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(1), i = n(4), a = n(7), s = n(8), c = n(2), d = n(15), l = n(14), u = n(9);
        !function (e) {
            e[e.IDLE = 0] = "IDLE", e[e.CONNECTING = 1] = "CONNECTING", e[e.WSCONNECTED = 2] = "WSCONNECTED", e[e.CONNECTED = 3] = "CONNECTED", e[e.CLOSING = 4] = "CLOSING"
        }(t.VoxSignalingState || (t.VoxSignalingState = {}));
        var g = t.VoxSignalingState, p = function () {
            function e() {
                var e = this;
                this.ver = "3", this.handlers = [], this.rpcHandlers = {}, this.pingTimer = null, this.pongTimer = null, this.manualDisconnect = !1, this.writeLog = !1, this._opLog = [], this.token = "", this.log = r.LogManager.get().createLogger(r.LogCategory.SIGNALING, "VoxSignaling"), this.currentState = g.IDLE, this.setRPCHandler(d.RemoteEvent.connectionSuccessful, function (t) {
                    e.onConnectionSuccessfulRPC(t)
                }), this.setRPCHandler(d.RemoteEvent.connectionFailed, function () {
                    e.onConnectionFailedRPC()
                }), this.setRPCHandler(d.RemoteEvent.createConnection, function (t) {
                    e.onConnectionSuccessfulRPC(t)
                })
            }

            return e.get = function () {
                return "undefined" == typeof this.inst && (this.inst = new e), this.inst
            }, e.prototype.addHandler = function (e) {
                this.handlers.push(e)
            }, e.prototype.close = function () {
                this.ws ? (this.ws.onclose = null, this.ws.close(), this.onWSClosed(null)) : this.log.warning("Try close unused WS in state " + g[this.currentState])
            }, e.prototype.cleanup = function () {
                a.PCFactory.get().closeAll(), this.pingTimer && clearTimeout(this.pingTimer), this.pongTimer && clearTimeout(this.pongTimer)
            }, e.prototype.onConnectionSuccessfulRPC = function (e) {
                if (this.currentState != g.WSCONNECTED)return void this.log.error("Can't handle __connectionSuccessful while in state " + g[this.currentState]);
                if (e && (this.token = e), this.currentState = g.CONNECTED, this.handlers.length > 0)for (var t = 0; t < this.handlers.length; ++t)try {
                    this.handlers[t].onSignalingConnected()
                } catch (e) {
                    this.log.warning("Error in onSignalingConnected callback: " + e)
                } else this.log.warning("No VoxSignaling handler specified")
            }, e.prototype.onConnectionFailedRPC = function () {
                if (this.currentState != g.WSCONNECTED)return void this.log.error("Can't handle __connectionSuccessful while in state " + g[this.currentState]);
                if (this.ws.onerror = null, this.ws.close(), this.ws = null, this.currentState = g.IDLE, this.handlers.length > 0)for (var e = 0; e < this.handlers.length; ++e)try {
                    this.handlers[e].onMediaConnectionFailed()
                } catch (e) {
                    this.log.warning("Error in onMediaConnectionFailed callback: " + e)
                } else this.log.warning("No VoxSignaling handler specified")
            }, e.prototype.connectTo = function (e, t, n, o, r) {
                var a = this;
                return void 0 === t && (t = !1), void 0 === n && (n = !0), this.manualDisconnect = !1, this.ver = r, this.currentState != g.IDLE ? void this.log.error("Can't establish connection while in state " + g[this.currentState]) : (this.currentState = g.CONNECTING, this.ws = new WebSocket((n ? "wss" : "ws") + "://" + e + "/platform?version=" + this.ver + "&client=" + i.default.getWSVendor(o) + "&referrer=platform&extra=&video=" + (t ? "true" : "false") + "&client_version=" + u.Client.getInstance().version), this.ws.onopen = function (e) {
                    return a.onWSConnected(e)
                }, this.ws.onclose = function (e) {
                    return a.onWSClosed(e)
                }, this.ws.onerror = function (e) {
                    return a.onWSError(e)
                }, void(this.ws.onmessage = function (e) {
                    return a.onWSData(e.data)
                }))
            }, e.prototype.setRPCHandler = function (e, t) {
                "undefined" != typeof this.rpcHandlers[e] && this.log.warning("Overwriting RPC handler for function " + e), this.rpcHandlers[e] = t
            }, e.prototype.removeRPCHandler = function (e) {
                "undefined" == typeof this.rpcHandlers[e] && this.log.warning("There is no RPC handler for function " + e), delete this.rpcHandlers[e]
            }, e.prototype.callRemoteFunction = function (e) {
                for (var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];
                return this.currentState != g.CONNECTED && this.currentState != g.WSCONNECTED ? void this.log.error("Can't make a RPC call in state " + g[this.currentState]) : void("undefined" != typeof this.ws && (this.writeLog && this._opLog.push("send:" + JSON.stringify({
                        name: e,
                        params: t
                    })), this.ws.send(JSON.stringify({name: e, params: t}))))
            }, e.prototype.onWSData = function (e) {
                this.writeLog && this._opLog.push("recv:" + e);
                var t;
                try {
                    t = JSON.parse(e)
                } catch (t) {
                    return void this.log.error("Can't parse JSON data: " + e)
                }
                "undefined" != typeof t.service ? this.onWSMessData(t) : this.onWSVoipData(t)
            }, e.prototype.onWSMessData = function (e) {
                l.MsgSignaling.get().handleWsData(e)
            }, e.prototype.onWSVoipData = function (e) {
                var t = e.name, n = e.params;
                if ("undefined" != typeof this.rpcHandlers[t])try {
                    this.rpcHandlers[t].apply(null, n)
                } catch (e) {
                    this.log.warning("Error in '" + t + "' handler : " + e)
                } else this.log.warning("No handler for " + t)
            }, e.prototype.disconnect = function () {
                this.manualDisconnect = !0, this.onWSClosed(null), this.cleanup()
            }, e.prototype.onWSClosed = function (e) {
                this.currentState != g.CONNECTED && this.currentState != g.CONNECTING && this.currentState != g.CLOSING && this.log.warning("onWSClosed in state " + g[this.currentState]), delete this.ws;
                var t = this.currentState;
                if (this.pingTimer && clearTimeout(this.pingTimer), this.pongTimer && clearTimeout(this.pongTimer), this.cleanup(), this.currentState = g.IDLE, this.handlers.length > 0)for (var n = 0; n < this.handlers.length; ++n)if (t != g.CONNECTING && t != g.WSCONNECTED && t != g.IDLE || this.manualDisconnect)try {
                    this.handlers[n].onSignalingClosed()
                } catch (e) {
                    this.log.warning("Error in onSignalingClosed callback: " + e)
                } else try {
                    this.handlers[n].onSignalingConnectionFailed(e.reason)
                } catch (e) {
                    this.log.warning("Error in onSignalingConnectionFailed callback: " + e)
                } else this.log.warning("No VoxSignaling handler specified")
            }, e.prototype.onWSConnected = function (t) {
                var n = this;
                this.currentState != g.CONNECTING && this.log.warning("onWSConnected in state " + g[this.currentState]), this.currentState = g.WSCONNECTED, this.pingTimer = setTimeout(function () {
                    return n.doPing()
                }, e.PING_DELAY), this.setRPCHandler(d.RemoteEvent.pong, function () {
                    return n.pongReceived()
                }), this.setRPCHandler(d.RemoteEvent.increaseGain, function () {
                    n.log.info("Deprecated increaseGain")
                }), this.setRPCHandler(d.RemoteEvent.handlePreFlightCheckResult, function () {
                    n.log.info("Deprecated handlePreFlightCheckResult")
                }), this.setRPCHandler(d.RemoteEvent.handleVoicemail, function () {
                    n.log.info("Deprecated handleVoicemail")
                })
            }, e.prototype.onWSError = function (e) {
                if (this.currentState != g.CONNECTING && this.log.warning("onWSError in state " + this.currentState), delete this.ws, this.pingTimer && clearTimeout(this.pingTimer), this.pongTimer && clearTimeout(this.pongTimer), this.cleanup(), this.currentState = g.IDLE, "undefined" != typeof this.handlers)for (var t = 0; t < this.handlers.length; ++t)try {
                    this.handlers[t].onSignalingConnectionFailed("Error connecting to VoxImplant server")
                } catch (e) {
                    this.log.warning("Error in onSignalingConnectionFailed callback: " + e)
                } else this.log.warning("No VoxSignaling handler specified")
            }, e.prototype.doPing = function () {
                var t = this;
                this.pingTimer = null, this.callRemoteFunction(c.RemoteFunction.ping, []), this.pongTimer = setTimeout(function () {
                    if (s.CallManager.get().numCalls > 0)return void t.pongReceived();
                    t.pongTimer = null, t.currentState = g.IDLE;
                    for (var e = 0; e < t.handlers.length; ++e)if (t.currentState == g.CONNECTED)try {
                        t.handlers[e].onSignalingClosed()
                    } catch (e) {
                        t.log.warning("Error in onSignalingClosed callback: " + e)
                    } else try {
                        t.handlers[e].onSignalingConnectionFailed("Connection closed")
                    } catch (e) {
                        t.log.warning("Error in onSignalingConnectionFailed callback: " + e)
                    }
                }, e.PING_DELAY)
            }, e.prototype.pongReceived = function () {
                var t = this;
                this.pongTimer && (clearTimeout(this.pongTimer), this.pongTimer = null, this.pingTimer = setTimeout(function () {
                    return t.doPing()
                }, e.PING_DELAY))
            }, e.prototype.sendRaw = function (e) {
                return this.writeLog && this._opLog.push("send:" + JSON.stringify(e)), this.ws.send(JSON.stringify(e)), !0
            }, e.prototype.getLog = function () {
                return this._opLog
            }, e.PING_DELAY = 3e4, o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "addHandler", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "close", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "cleanup", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onConnectionSuccessfulRPC", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onConnectionFailedRPC", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "connectTo", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "setRPCHandler", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "removeRPCHandler", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "callRemoteFunction", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onWSData", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onWSMessData", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onWSVoipData", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "disconnect", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onWSClosed", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onWSConnected", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "onWSError", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "doPing", null), o([r.LogManager.d_trace(r.LogCategory.SIGNALING)], e.prototype, "pongReceived", null), e
        }();
        t.VoxSignaling = p
    }, function (e, t, n) {
        "use strict";
        var o, r = n(1), i = n(32), a = n(33), s = n(42), c = n(39), d = n(31), l = n(21);
        !function (e) {
            function t(e, t, n) {
                var o = e;
                return "object" != typeof o && (o = {}), o[t] = {ideal: n}, o
            }

            function n(e, t, n) {
                switch (C) {
                    case v.Firefox:
                        return new s.WebRTCPC(e, t, n);
                    case v.Webkit:
                        return new s.WebRTCPC(e, t, n);
                    case v.Edge:
                        return new c.ORTC(e, t, n);
                    default:
                        return r.LogManager.get().writeMessage(r.LogCategory.RTC, "Core", r.LogLevel.INFO, "Unsupported browser " + navigator.userAgent), null
                }
            }

            function o(e) {
                return navigator.mediaDevices.getUserMedia(e)
            }

            function u(e, t) {
                return new l.SignalingDTMFSender(t)
            }

            function g(e) {
                var n = !1, o = !1;
                return e.audioEnabled && (n = !0, e.audioInputId && (n = t(n, "deviceId", e.audioInputId))), e.videoEnabled && (o = !0, e.videoSettings && (o = e.videoSettings), e.videoInputId && (o = t(o, "deviceId", e.videoInputId))), {
                    peerIdentity: null,
                    audio: n,
                    video: o
                }
            }

            function p(e) {
                if (void 0 === e && (e = !0), e === !1)return "voxmobile";
                switch (C || f(), C) {
                    case v.Firefox:
                        return "firefox";
                    case v.Webkit:
                        return "chrome";
                    case v.Edge:
                        return "voxmobile";
                    default:
                        return ""
                }
            }

            function f() {
                navigator.mozGetUserMedia ? C = v.Firefox : navigator.webkitGetUserMedia ? C = v.Webkit : navigator.mediaDevices && navigator.userAgent.match(/Edge\/(\d+).(\d+)$/) && (C = v.Edge)
            }

            function h() {
                switch (C || f(), C && r.LogManager.get().writeMessage(r.LogCategory.RTC, "Core", r.LogLevel.INFO, "Detected browser " + v[C]), e.getUserMedia = o, e.getDTMFSender = u, C) {
                    case v.Firefox:
                        e.attachMedia = i.FF.attachStream, e.detachMedia = i.FF.detachStream, e.getScreenMedia = i.FF.getScreenMedia, e.getRTCStats = i.FF.getRTCStats, e.getUserMedia = i.FF.getUserMedia, e.getDTMFSender = i.FF.getDTMFSender;
                        break;
                    case v.Webkit:
                        e.attachMedia = a.Webkit.attachStream, e.detachMedia = a.Webkit.detachStream, e.getScreenMedia = a.Webkit.getScreenMedia, e.getRTCStats = a.Webkit.getRTCStats, e.getUserMedia = i.FF.getUserMedia, e.getDTMFSender = a.Webkit.getDTMFSender;
                        break;
                    case v.Edge:
                        e.attachMedia = d.Edge.attachStream, e.detachMedia = d.Edge.detachStream, e.getScreenMedia = d.Edge.getScreenMedia, e.getRTCStats = d.Edge.getRTCStats;
                        break;
                    default:
                        r.LogManager.get().writeMessage(r.LogCategory.RTC, "Core", r.LogLevel.INFO, "Unsupported browser " + navigator.userAgent)
                }
                e.composeConstraints = g
            }

            var v;
            !function (e) {
                e[e.Firefox = 1] = "Firefox", e[e.Webkit = 2] = "Webkit", e[e.Edge = 3] = "Edge"
            }(v || (v = {}));
            var C;
            e.peerConnectionFactory = n, e.getWSVendor = p, e.init = h
        }(o || (o = {})), Object.defineProperty(t, "__esModule", {value: !0}), t.default = o
    }, function (e, t) {
        "use strict";
        var n = !0, o = {
            disableLog: function (e) {
                return "boolean" != typeof e ? new Error("Argument type: " + typeof e + ". Please use a boolean.") : (n = e, e ? "adapter.js logging disabled" : "adapter.js logging enabled")
            }, log: function () {
                if ("object" == typeof window) {
                    if (n)return;
                    "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments)
                }
            }, extractVersion: function (e, t, n) {
                var o = e.match(t);
                return o && o.length >= n && parseInt(o[n], 10)
            }, detectBrowser: function () {
                var e = {};
                if (e.browser = null, e.version = null, "undefined" == typeof window || !window.navigator)return e.browser = "Not a browser.", e;
                if (navigator.mozGetUserMedia) e.browser = "firefox", e.version = this.extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1); else if (navigator.webkitGetUserMedia)if (window.webkitRTCPeerConnection) e.browser = "chrome", e.version = this.extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2); else {
                    if (!navigator.userAgent.match(/Version\/(\d+).(\d+)/))return e.browser = "Unsupported webkit-based browser with GUM support but no WebRTC support.", e;
                    e.browser = "safari", e.version = this.extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1)
                } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) e.browser = "edge", e.version = this.extractVersion(navigator.userAgent, /Edge\/(\d+).(\d+)$/, 2); else {
                    if (!navigator.mediaDevices || !navigator.userAgent.match(/AppleWebKit\/(\d+)\./))return e.browser = "Not a supported browser.", e;
                    e.browser = "safari", e.version = this.extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1)
                }
                return e
            }, shimCreateObjectURL: function () {
                if ("object" == typeof window && window.HTMLMediaElement && "srcObject" in window.HTMLMediaElement.prototype) {
                    var e = URL.createObjectURL.bind(URL), t = URL.revokeObjectURL.bind(URL), n = new Map, o = 0;
                    URL.createObjectURL = function (t) {
                        if ("getTracks" in t) {
                            var r = "polyblob:" + ++o;
                            return n.set(r, t), console.log("URL.createObjectURL(stream) is deprecated! Use elem.srcObject = stream instead!"), r
                        }
                        return e(t)
                    }, URL.revokeObjectURL = function (e) {
                        t(e), n.delete(e)
                    };
                    var r = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype, "src");
                    Object.defineProperty(window.HTMLMediaElement.prototype, "src", {
                        get: function () {
                            return r.get.apply(this)
                        }, set: function (e) {
                            return this.srcObject = n.get(e) || null, r.set.apply(this, [e])
                        }
                    });
                    var i = HTMLMediaElement.prototype.setAttribute;
                    HTMLMediaElement.prototype.setAttribute = function () {
                        return 2 === arguments.length && "src" === ("" + arguments[0]).toLowerCase() && (this.srcObject = n.get(arguments[1]) || null), i.apply(this, arguments)
                    }
                }
            }
        };
        e.exports = {
            log: o.log,
            disableLog: o.disableLog,
            browserDetails: o.detectBrowser(),
            extractVersion: o.extractVersion,
            shimCreateObjectURL: o.shimCreateObjectURL,
            detectBrowser: o.detectBrowser.bind(o)
        }
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(1), i = n(37), a = n(4), s = n(7), c = n(9);
        !function (e) {
            e[e.LOCAL = -1] = "LOCAL", e[e.ANY = 0] = "ANY", e[e.REMOTE = 1] = "REMOTE"
        }(t.MediaDirection || (t.MediaDirection = {}));
        var d = t.MediaDirection, l = function () {
            function e() {
                this.audioSourcesList = [], this.videoSourcesList = [], this.audioOutputsList = [], this.videoContainerId = "voximplantlocalvideo", this.log = r.LogManager.get().createLogger(r.LogCategory.USERMEDIA, ""), this.config = new i.MediaCaptureConfig, this.clearConstraints(), this.enableAudio(!0), this.enableVideo(!0), this.handlers = new Array, this.mediaAccessGranted = !1, this._localVideos = new Array, "undefined" == typeof window.AudioContext && "undefined" == typeof window.webkitAudioContext || (window.AudioContext = window.AudioContext || window.webkitAudioContext, this.audioContext = new AudioContext)
            }

            return e.get = function () {
                return this.inst || (this.inst = new e), this.inst
            }, e.prototype.clearConstraints = function () {
            }, e.prototype.addHandler = function (e) {
                this.handlers.push(e)
            }, e.prototype.enableAudio = function (e) {
                this.config.audioEnabled = e
            }, e.prototype.enableVideo = function (e) {
                this.config.videoEnabled = e
            }, e.prototype.setLocalStream = function (e) {
                if (e.getAudioTracks().length > 0 && (this.currentAudioTrack = e.getAudioTracks()[0]), e.getVideoTracks().length > 0 && (this.currentVideoTrack = e.getVideoTracks()[0]), this._currentStream) {
                    for (; this._currentStream.getTracks().length > 0;)this._currentStream.removeTrack(this._currentStream.getTracks()[0]);
                    this.currentAudioTrack && this._currentStream.addTrack(this.currentAudioTrack), this.currentVideoTrack && this._currentStream.addTrack(this.currentVideoTrack)
                } else this._currentStream = e;
                for (var t in s.PCFactory.get().peerConnections)this.attachTo(s.PCFactory.get().peerConnections[t])
            }, e.prototype.queryMedia = function () {
                var e = a.default.composeConstraints(this.config);
                return this.muteAllLocal(), this.getQueryMedia(e)
            }, e.prototype.queryMediaSilent = function () {
                var e = a.default.composeConstraints(this.config);
                return this.muteAllLocal(), this.getQueryMediaSilent(e)
            }, e.prototype.getConstrainWithSendFlag = function (e, t) {
                var n = JSON.parse(JSON.stringify(this.config));
                return null != e && (n.audioEnabled = e), null != t && (n.videoEnabled = t), a.default.composeConstraints(n)
            }, e.prototype.getQueryMedia = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    a.default.getUserMedia(e).then(function (o) {
                        t.validConstraints = e, t.mediaAccessGranted = !0, t.log.info("Media access granted"), t.processGrantedMedia(o), n(o)
                    }).catch(function (e) {
                        t.handlers.forEach(function (e) {
                            try {
                                e.onMediaAccessRejected()
                            } catch (e) {
                                t.log.error("Error in callback " + e)
                            }
                        }), t.log.info("Media access rejected: " + e.name), console.error(e), t.validConstraints && a.default.getUserMedia(t.validConstraints).then(function (e) {
                            t.log.info("Regained media access using previous settings"), t.processGrantedMedia(e), n(e)
                        }).catch(function (e) {
                            o(e), t.log.error("Failed to regain media access with previously valid constraints")
                        }), o(e)
                    })
                })
            }, e.prototype.getQueryMediaSilent = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    a.default.getUserMedia(e).then(function (o) {
                        t.validConstraints = e, t.log.info("Media access granted"), n(o)
                    }).catch(function (e) {
                        t.log.info("Media access rejected: " + e.name), console.error(e), t.validConstraints && a.default.getUserMedia(t.validConstraints).then(function (e) {
                            t.log.info("Regained media access using previous settings"), n(e)
                        }).catch(function (e) {
                            o(e), t.log.error("Failed to regain media access with previously valid constraints")
                        }), o(e)
                    })
                })
            }, e.prototype.processGrantedMedia = function (e) {
                var t = this;
                this.stopLocalStream(), this.setLocalStream(e), this.handlers.forEach(function (n) {
                    try {
                        n.onMediaAccessGranted(e)
                    } catch (e) {
                        t.log.error("Error in callback " + e)
                    }
                })
            }, e.prototype.muteAllLocal = function () {
                this.currentAudioTrack && (this.currentAudioTrack.stop(), this.currentAudioTrack = null), this.currentVideoTrack && (this.currentVideoTrack.stop(), this.currentVideoTrack = null)
            }, e.prototype.getDevices = function () {
                0 !== e.get().audioSourcesList.length && (this.audioSourcesList = []), 0 !== e.get().videoSourcesList.length && (this.videoSourcesList = []), 0 !== e.get().audioOutputsList.length && (this.audioOutputsList = []);
                var t = new Promise(function (t, n) {
                    navigator.mediaDevices.enumerateDevices().then(function (n) {
                        for (var o = 0; o != n.length; ++o) {
                            var r = [0, 0, 0], i = n[o];
                            "audio" === i.kind || "audioinput" === i.kind ? e.get().audioSourcesList.push({
                                id: i.id || i.deviceId,
                                name: i.label || "Audio recording device " + r[0]++
                            }) : "video" === i.kind || "videoinput" === i.kind ? e.get().videoSourcesList.push({
                                id: i.id || i.deviceId,
                                name: i.label || "Video recording device " + r[1]++
                            }) : "audiooutput" === i.kind && e.get().audioOutputsList.push({
                                    id: i.id || i.deviceId,
                                    name: i.label || "Audio playback device " + r[2]++
                                })
                        }
                        t()
                    }).catch(function (e) {
                        n(e)
                    })
                });
                return t
            }, e.prototype.useVideoDevice = function (e) {
                this.config.videoInputId = e
            }, e.prototype.useAudioInputDevice = function (e) {
                this.config.audioInputId = e
            }, Object.defineProperty(e.prototype, "currentStream", {
                get: function () {
                    return this._currentStream
                }, enumerable: !0, configurable: !0
            }), e.prototype.attachTo = function (e) {
                this._legacySoundControll = !0, e.bindLocalMedia(this._currentStream)
            }, e.prototype.attachToSound = function (e) {
                this._legacySoundControll = !0, e.bindLocalMedia(new MediaStream(this._currentStream.getAudioTracks()))
            }, Object.defineProperty(e.prototype, "legacySoundControll", {
                get: function () {
                    return this._legacySoundControll
                }, enumerable: !0, configurable: !0
            }), e.prototype.sendVideo = function (e) {
                this.currentVideoTrack && (this.currentVideoTrack.enabled = e)
            }, e.prototype.isVideoEnabled = function () {
                return this.config.videoEnabled
            }, e.updateMuteState = function (t, n, o) {
                var r = s.PCFactory.get().peerConnections;
                for (var i in r)switch (n) {
                    case d.ANY:
                        this.updateMuteState(t, d.LOCAL, o), this.updateMuteState(t, d.REMOTE, o);
                        break;
                    case d.LOCAL:
                        e.getAudioTracks(r[i].localStream).map(function (e) {
                            e.enabled = o
                        });
                        break;
                    case d.REMOTE:
                        return void r[i].remoteStreams.map(function (t) {
                            e.getAudioTracks(t).map(function (e) {
                                e.enabled = o
                            })
                        });
                    default:
                        return !1
                }
            }, e.prototype.stopLocalStream = function () {
                if (this._currentStream) {
                    this.stopStream(this._currentStream), this._currentStream = null;
                    for (var e in s.PCFactory.get().peerConnections)s.PCFactory.get().peerConnections[e].bindLocalMedia(null)
                }
            }, e.prototype.stopStream = function (e) {
                e.getTracks().forEach(function (e) {
                    e.stop()
                })
            }, e.prototype.setConstraints = function (e, t) {
                var n = this;
                return new Promise(function (o, r) {
                    n.config.setVideoSettings(e), t === !0 && n.queryMedia().then(function (e) {
                        o(e)
                    }).catch(function (e) {
                        r(e)
                    })
                })
            }, e.getAudioTracks = function (e) {
                if (e) {
                    if (e.audioTracks)return e.audioTracks;
                    if (e.getAudioTracks)return e.getAudioTracks()
                }
                return null
            }, e.getVideoTracks = function (e) {
                if (e) {
                    if (e.videoTracks)return e.videoTracks;
                    if (e.getVideoTracks)return e.getVideoTracks()
                }
                return null
            }, e.prototype.showLocalVideo = function (t, n, o) {
                var r = this;
                if (void 0 === t && (t = !0), void 0 === n && (n = !1), void 0 === o && (o = !1), "undefined" != typeof this.currentStream) {
                    var i = document.getElementById(c.Client.getInstance().localVideoContainerId) || document.body,
                        s = document.getElementById(this.videoContainerId);
                    if (t) null === s ? (s = document.createElement("video"), s.id = this.videoContainerId, s.autoplay = !0, s.muted = !0, i.firstChild ? i.insertBefore(s, i.firstChild) : i.appendChild(s)) : s.style.display = "block", this.currentStream.getVideoTracks().length > 0 ? a.default.attachMedia(this.currentStream, s) : a.default.getUserMedia(e.get().getConstrainWithSendFlag(!1, !0)).then(function (e) {
                        r._localVideos.push(e), a.default.attachMedia(e, s)
                    }); else if (s.style.display = "none", o)for (var d = 0; d < this._localVideos.length; d++)this.stopStream(this._localVideos[d]);
                    n && (s.style.cssText += "transform: rotateY(180deg);-webkit-transform:rotateY(180deg);-moz-transform:rotateY(180deg);")
                }
            }, e.prototype.updateLocalVideo = function (e) {
                void 0 === e && (e = null);
                var t = document.getElementById(this.videoContainerId);
                if (null === e && null !== t && "none" != t.style.display) this.showLocalVideo(!0); else {
                    if (null === t || 0 == e.getVideoTracks().length)return !1;
                    a.default.attachMedia(e, t)
                }
            }, e.prototype.testLocalStream = function (e, t) {
                for (var n = !1, o = !1, r = 0, i = this._currentStream.getTracks(); r < i.length; r++) {
                    var a = i[r];
                    "audio" === a.kind && (n = !0), "video" === a.kind && (o = !0)
                }
                return e === n && t === o
            }, o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "clearConstraints", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "addHandler", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "enableAudio", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "enableVideo", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "setLocalStream", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "queryMedia", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "queryMediaSilent", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "processGrantedMedia", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "muteAllLocal", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "getDevices", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "useVideoDevice", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "useAudioInputDevice", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "attachTo", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "attachToSound", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "sendVideo", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "stopLocalStream", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "stopStream", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "setConstraints", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "showLocalVideo", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "updateLocalVideo", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e.prototype, "testLocalStream", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e, "updateMuteState", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e, "getAudioTracks", null), o([r.LogManager.d_trace(r.LogCategory.USERMEDIA)], e, "getVideoTracks", null), e
        }();
        t.UserMediaManager = l
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                    var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                    return i > 3 && a && Object.defineProperty(t, n, a), a
                }, r = n(20), i = n(3), a = n(6), s = n(1), c = n(8), d = n(10), l = n(4), u = n(2), g = n(15),
            p = function () {
                function e() {
                    var e = this;
                    this.iceConfig = null, this._peerConnections = {}, this.waitingPeerConnections = {}, this.log = s.LogManager.get().createLogger(s.LogCategory.RTC, "PCFactory"), this._requireMedia = !0, i.VoxSignaling.get().setRPCHandler(g.RemoteEvent.createPC, function (t, n) {
                        e.rpcHandlerCreatePC(t, n)
                    }), i.VoxSignaling.get().setRPCHandler(g.RemoteEvent.destroyPC, function (t) {
                        e.rpcHandlerDestroyPC(t)
                    }), i.VoxSignaling.get().addHandler(this)
                }

                return e.get = function () {
                    return null === this.inst && (this.inst = new e), this.inst
                }, e.sdpOffersVideo = function (e) {
                    return e.indexOf("m=video") !== -1
                }, e.prototype.rpcHandlerCreatePC = function (t, n) {
                    return a.UserMediaManager.get().currentStream || !this._requireMedia ? this.createPC(t, n, r.PeerConnectionMode.CLIENT_SERVER_V1, e.sdpOffersVideo(n)) : void(this.waitingPeerConnections[t] = n)
                }, e.prototype.rpcHandlerDestroyPC = function (e) {
                    this._peerConnections[e] && (this._peerConnections[e].close(), delete this._peerConnections[e]), delete this.waitingPeerConnections[e]
                }, e.prototype.createPC = function (e, t, n, o) {
                    var r = this, s = l.default.peerConnectionFactory(e, n, o);
                    a.UserMediaManager.get().attachTo(s), this._peerConnections[e] = s;
                    var g = c.CallManager.get().calls[e];
                    return t && s.processRemoteOffer(t).then(function (t) {
                        "undefined" == typeof g || g.checkCallMode(d.CallMode.SERVER) ? i.VoxSignaling.get().callRemoteFunction(u.RemoteFunction.confirmPC, e, t) : i.VoxSignaling.get().callRemoteFunction(u.RemoteFunction.acceptCall, [e, c.CallManager.cleanHeaders(g.headers()), t]), "__default" !== e && (c.CallManager.get().calls[e].peerConnection = s)
                    }).catch(function (e) {
                        r.log.error("Error during PC creation: " + e)
                    }), s
                }, e.prototype.setupDirectPC = function (e, t, n, o) {
                    var r = l.default.peerConnectionFactory(e, t, n);
                    return r.setHoldKey(o), n ? a.UserMediaManager.get().attachTo(r) : a.UserMediaManager.get().attachToSound(r), this._peerConnections[e] = r, r.getLocalOffer()
                }, e.prototype.incomeDirectPC = function (e, t, n, o) {
                    var i = l.default.peerConnectionFactory(e, r.PeerConnectionMode.P2P, t);
                    return i.setHoldKey(o), i._setRemoteDescription(n), this._peerConnections[e] = i, i
                }, e.prototype.getPeerConnect = function (e) {
                    return this._peerConnections[e]
                }, e.prototype.onMediaAccessRejected = function () {
                },
                    e.prototype.onMediaAccessGranted = function (t) {
                        for (var n in this.waitingPeerConnections)this.createPC(n, this.waitingPeerConnections[n], r.PeerConnectionMode.CLIENT_SERVER_V1, e.sdpOffersVideo(this.waitingPeerConnections[n]));
                        this.waitingPeerConnections = {}
                    }, e.prototype.onSignalingConnected = function () {
                }, e.prototype.onSignalingClosed = function () {
                    this.log.info("Closing all peer connections because signaling connection has closed"), this.waitingPeerConnections = {};
                    for (var e in this._peerConnections)this._peerConnections[e].close();
                    this._peerConnections = {}
                }, e.prototype.onSignalingConnectionFailed = function (e) {
                }, e.prototype.onMediaConnectionFailed = function () {
                }, Object.defineProperty(e.prototype, "requireMedia", {
                    get: function () {
                        return this._requireMedia
                    }, set: function (e) {
                        this._requireMedia = e
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "peerConnections", {
                    get: function () {
                        return this._peerConnections
                    }, enumerable: !0, configurable: !0
                }), e.prototype.closeAll = function () {
                    for (var e in this._peerConnections)this._peerConnections[e].close();
                    this._peerConnections = {}
                }, e.prototype.setBandwidthParams = function (e) {
                    this._bandwidthParams = e
                }, e.prototype.addBandwidthParams = function (e) {
                    return this._bandwidthParams && (e.sdp = e.sdp.replace(/(a=mid:video.*\r\n)/g, "$1b=AS:" + this._bandwidthParams + "\r\n")), e
                }, e.inst = null, o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "rpcHandlerCreatePC", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "rpcHandlerDestroyPC", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "createPC", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "setupDirectPC", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "incomeDirectPC", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "getPeerConnect", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "onMediaAccessRejected", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "onMediaAccessGranted", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "onSignalingConnected", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "onSignalingClosed", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "onSignalingConnectionFailed", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "onMediaConnectionFailed", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "closeAll", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "setBandwidthParams", null), o([s.LogManager.d_trace(s.LogCategory.PCFACTORY)], e.prototype, "addBandwidthParams", null), e
            }();
        t.PCFactory = p
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                    var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                    return i > 3 && a && Object.defineProperty(t, n, a), a
                }, r = n(10), i = n(16), a = n(3), s = n(29), c = n(12), d = n(11), l = n(1), u = n(7), g = n(9), p = n(20),
            f = n(36), h = n(35), v = n(2), C = n(15), y = n(34), m = n(17), L = i.CallEvents.PendingUpdate,
            S = function () {
                function e() {
                    var e = this;
                    this.protocolVersion = 3, this._calls = {}, this.voxSignaling = a.VoxSignaling.get(), this.log = l.LogManager.get().createLogger(l.LogCategory.SIGNALING, "CallManager"), this.voxSignaling.addHandler(this), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleIncomingConnection, function (t, n, o, r, i) {
                        e.handleIncomingConnection(t, n, o, r, i)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleConnectionConnected, function (t, n, o) {
                        e.handleConnectionConnected(t, n, o)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleConnectionDisconnected, function (t, n, o) {
                        e.handleConnectionDisconnected(t, n, o)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleRingOut, function (t) {
                        e.handleRingOut(t)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.stopRinging, function (t) {
                        e.stopRinging(t)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleConnectionFailed, function (t, n, o, r) {
                        e.handleConnectionFailed(t, n, o, r)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleSIPInfo, function (t, n, o, r, i) {
                        e.handleSIPInfo(t, n, o, r, i)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleSipEvent, function (t) {
                        e.handleSipEvent(t)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleTransferStarted, function (t) {
                        e.handleTransferStarted(t)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleTransferComplete, function (t) {
                        e.handleTransferComplete(t)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleTransferFailed, function (t) {
                        e.handleTransferFailed(t)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleReInvite, function (t, n, o) {
                        e.handleInReinvite(t, n, o)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleAcceptReinvite, function (t, n, o) {
                        e.handleReinvite(t, n, o)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.handleRejectReinvite, function (t, n, o) {
                        e.handleRejectReinvite(t, n, o)
                    }), this.voxSignaling.setRPCHandler(C.RemoteEvent.startEarlyMedia, function (t, n, o) {
                        e.startEarlyMedia(t, n, o)
                    })
                }

                return Object.defineProperty(e.prototype, "numCalls", {
                    get: function () {
                        return this._numCalls
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "calls", {
                    get: function () {
                        return this._calls
                    }, enumerable: !0, configurable: !0
                }), e.get = function () {
                    return "undefined" == typeof this.inst && (this.inst = new e), this.inst
                }, e.prototype.call = function (t) {
                    var n = this;
                    "boolean" == typeof t.video && (t.video = {sendVideo: t.video, receiveVideo: t.video});
                    var o = {
                        number: null,
                        video: {sendVideo: !1, receiveVideo: !1},
                        customData: null,
                        extraHeaders: {},
                        wiredLocal: !0,
                        wiredRemote: !0,
                        H264first: !1,
                        VP8first: !1,
                        forceActive: !1
                    }, i = s.Utils.mixObjectToLeft(o, t);
                    i = e.addCustomDataToHeaders(i);
                    var a = s.Utils.generateUUID();
                    if (this._calls[a])throw this.log.error("Call " + a + " already exists"), new Error("Internal error");
                    var l;
                    l = 3 == this.protocolVersion ? new y.CallExMedia(a, c.Authenticator.get().displayName, !1, i) : "undefined" != typeof i.extraHeaders[d.Constants.DIRECT_CALL_HEADER] ? new h.CallExP2P(a, c.Authenticator.get().displayName, !1, i) : new f.CallExServer(a, c.Authenticator.get().displayName, !1, i), this._calls[a] = l, m.CallstatsIo.isModuleEnabled() && (i.extraHeaders[d.Constants.CALLSTATSIOID_HEADER] = a), i.VP8first && (l.rearangeCodecs = function (e) {
                        return new Promise(function (t, n) {
                            for (var o = 0; o < e.sections.length; o++)"video" == e.sections[o].kind.toLowerCase() && e.sections[o].codec.sort(function (e, t) {
                                return e.toLowerCase().indexOf("vp8") != -1 ? -1 : t.toLowerCase().indexOf("vp8") != -1 ? 1 : 0
                            });
                            t(e)
                        })
                    }), i.H264first && (l.rearangeCodecs = function (e) {
                        return new Promise(function (t, n) {
                            for (var o = 0; o < e.sections.length; o++)"video" == e.sections[o].kind.toLowerCase() && e.sections[o].codec.sort(function (e, t) {
                                return e.toLowerCase().indexOf("h264") != -1 && e.toLowerCase().indexOf("uc") == -1 ? -1 : t.toLowerCase().indexOf("h264") != -1 && t.toLowerCase().indexOf("uc") == -1 ? 1 : 0
                            });
                            t(e)
                        })
                    });
                    var g = !1;
                    return Object.keys(this._calls).length > 1 && (l.setActiveForce(!1), g = !0), l.checkCallMode(r.CallMode.P2P) ? u.PCFactory.get().setupDirectPC(a, p.PeerConnectionMode.P2P, !0, g).then(function (e) {
                        l.peerConnection = u.PCFactory.get().peerConnections[a], n.voxSignaling.callRemoteFunction(v.RemoteFunction.createCall, -1, i.number, i.video, a, null, null, i.extraHeaders, "", e.sdp)
                    }) : this.voxSignaling.callRemoteFunction(v.RemoteFunction.createCall, -1, i.number, i.video, a, null, null, i.extraHeaders, {}), l
                }, e.addCustomDataToHeaders = function (e) {
                    return "undefined" != typeof e.customData && ("undefined" == typeof e.extraHeaders && (e.extraHeaders = {}), e.extraHeaders["VI-CallData"] = e.customData), e
                }, e.prototype.handleIncomingConnection = function (e, t, n, o, i) {
                    if (this._calls[e])throw this.log.error("Call " + e + " already exists"), new Error("Internal error");
                    var a, s = this.isSDPHasVideo(i),
                        c = {number: t, extraHeaders: o, video: s, wiredLocal: !0, wiredRemote: !0, forceActive: !1};
                    a = 3 == this.protocolVersion ? new y.CallExMedia(e, n, !0, c) : "undefined" != typeof c.extraHeaders[d.Constants.DIRECT_CALL_HEADER] ? new h.CallExP2P(e, n, !0, c) : new f.CallExServer(e, n, !0, c), this._calls[e] = a;
                    var l = !1;
                    Object.keys(this._calls).length > 1 && (a.setActiveForce(!1), l = !0), a.checkCallMode(r.CallMode.P2P) ? a.peerConnection = u.PCFactory.get().incomeDirectPC(e, !1, i, l) : a.peerConnection = u.PCFactory.get().getPeerConnect(e), g.Client.getInstance().onIncomingCall(e, t, n, o, s)
                }, e.prototype.isSDPHasVideo = function (e) {
                    var t = e.indexOf("m=video");
                    if (t === -1)return !1;
                    var n = e.indexOf("a=sendrecv", t), o = e.indexOf("a=sendonly", t), r = e.indexOf("m=", t);
                    return n !== -1 && (n < r || r === -1) || o !== -1 && (o < r || r === -1)
                }, e.prototype.findCall = function (e, t) {
                    var n = this._calls[e];
                    return "undefined" == typeof n ? (this.log.warning("Received " + t + " for unknown call " + e), null) : n
                }, e.prototype.handleRingOut = function (e) {
                    var t = this.findCall(e, "handleRingOut");
                    "undefined" != typeof t && (t.canStartSendingCandidates(), t.onRingOut())
                }, e.prototype.handleConnectionConnected = function (e, t, n) {
                    var o = this.findCall(e, "handleConnectionConnected");
                    if (o.canStartSendingCandidates(), "undefined" != typeof o) {
                        if ("undefined" != typeof n) {
                            var r = n.indexOf("m=video");
                            if (r !== -1) {
                                var i = n.indexOf("a=sendrecv", r), a = n.indexOf("a=sendonly", r),
                                    s = n.indexOf("a=recvonly", r), c = n.indexOf("a=inactive", r);
                                i === -1 && a === -1 && s === -1 && c === -1 && (n += "a=inactive\r\n")
                            }
                            o.peerConnection.processRemoteAnswer(t, n)
                        } else o.onConnected(t, n);
                        g.Client.getInstance().stopProgressTone()
                    }
                }, e.prototype.startEarlyMedia = function (e, t, n) {
                    var o = this.findCall(e, "startEarlyMedia");
                    "undefined" != typeof n && o.peerConnection.processRemoteAnswer(t, n), g.Client.getInstance().stopProgressTone()
                }, e.prototype.handleConnectionDisconnected = function (e, t, n) {
                    var o = this.findCall(e, "handleConnectionDisconnected");
                    "undefined" != typeof o && (g.Client.getInstance().stopProgressTone(), o.onDisconnected(t, n), delete this._calls[e])
                }, e.prototype.handleSIPInfo = function (e, t, n, o, r) {
                    var i = this.findCall(e, "handleSIPInfo");
                    "undefined" != typeof i && i.onInfo(i, t, n, o, r)
                }, e.prototype.stopRinging = function (e) {
                    var t = this.findCall(e, "stopRinging");
                    t.canStartSendingCandidates(), "undefined" != typeof t && (g.Client.getInstance().stopProgressTone(), t.onStopRinging())
                }, e.prototype.handleSipEvent = function (e) {
                }, e.prototype.handleTransferStarted = function (e) {
                }, e.prototype.handleTransferComplete = function (e) {
                    var t = this.findCall(e, "handleTransferComplete");
                    "undefined" != typeof t && t.onTransferComplete()
                }, e.prototype.handleTransferFailed = function (e) {
                    var t = this.findCall(e, "handleTransferFailed");
                    "undefined" != typeof t && t.onTransferFailed()
                }, e.prototype.handleReinvite = function (e, t, n) {
                    var o = this.findCall(e, "handleReinvite");
                    if ("undefined" != typeof o) {
                        var r = this.isSDPHasVideo(n);
                        o.peerConnection.handleReinvite(t, n, r)
                    }
                }, e.prototype.handleRejectReinvite = function (e, t, n) {
                    var o = this.findCall(e, "handleReinvite");
                    "undefined" != typeof o && o.dispatchEvent({code: 20, call: o})
                }, e.prototype.handleInReinvite = function (e, t, n) {
                    var o = this.findCall(e, "handleReinvite");
                    "undefined" != typeof o && (o.runIncomingReInvite(t, n), o.dispatchEvent({
                        name: L,
                        result: !0,
                        call: o
                    }))
                }, e.prototype.handleConnectionFailed = function (e, t, n, o) {
                    var r = this.findCall(e, "handleConnectionFailed");
                    "undefined" != typeof r && (delete this._calls[e], g.Client.getInstance().stopProgressTone(), r.onFailed(t, n, o))
                }, e.prototype.onSignalingConnected = function () {
                }, e.prototype.onSignalingClosed = function () {
                    for (var e in this._calls)this._calls[e].hangup()
                }, e.prototype.onSignalingConnectionFailed = function (e) {
                }, e.prototype.onMediaConnectionFailed = function () {
                }, e.prototype.recalculateNumCalls = function () {
                    this._numCalls = 0;
                    for (var e in this._calls)this._numCalls++
                }, e.prototype.transferCall = function (e, t) {
                    for (var n = [e, t], o = 0; o < n.length; o++) {
                        var i = this._calls[n[o].id()];
                        if (!i)return void this.log.error("trying to transfer unknown call " + i.id());
                        if (i.stateValue != r.CallState.CONNECTED)return void this.log.error("trying to transfer call " + i.id() + " in state " + i.state())
                    }
                    this.voxSignaling.callRemoteFunction(v.RemoteFunction.transferCall, [e, t])
                }, e.prototype.removeCall = function (e) {
                    delete this._calls[e]
                }, e.cleanHeaders = function (e) {
                    var t = {};
                    for (var n in e)"X-" != n.substring(0, 2) && n != d.Constants.CALL_DATA_HEADER || (t[n] = e[n]);
                    return t
                }, o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "call", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleIncomingConnection", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "findCall", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleRingOut", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleConnectionConnected", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleConnectionDisconnected", null), o([l.LogManager.d_trace(l.LogCategory.CALLEXSERVER)], e.prototype, "handleSIPInfo", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "stopRinging", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleSipEvent", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleTransferStarted", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleTransferComplete", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleTransferFailed", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleReinvite", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleRejectReinvite", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleInReinvite", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "handleConnectionFailed", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "onSignalingConnected", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "onSignalingClosed", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "onSignalingConnectionFailed", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e.prototype, "removeCall", null), o([l.LogManager.d_trace(l.LogCategory.CALLMANAGER)], e, "addCustomDataToHeaders", null), e
            }();
        t.CallManager = S
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                    var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                    return i > 3 && a && Object.defineProperty(t, n, a), a
                }, r = n(25), i = n(29), a = n(3), s = n(6), c = n(12), d = n(4), l = n(1), u = n(7), g = n(8), p = n(18),
            f = n(44), h = n(2), v = n(15), C = n(17), y = n(22), m = function () {
                function e() {
                    var t = this;
                    if (this._connected = !1, this.progressToneScript = {
                            US: "440@-19,480@-19;*(2/4/1+2)",
                            RU: "425@-19;*(1/3/1)"
                        }, this.playingNow = !1, this.serversList = [], this._vol = 100, this.micRequired = !1, this.videoConstraints = null, this.progressToneCountry = "US", this.progressTone = !0, this.showDebugInfo = !1, this.showWarnings = !1, this.RTCsupported = !1, this._deviceEnumAPI = !1, this.eventListeners = {}, this.applyMixins(e, [f.Callbackable]), e.instance)throw new Error("Error - use VoxImplant.getInstance()");
                    e.instance = this, this._promises = {}, d.default.init();
                    var n = u.PCFactory.get();
                    n.requireMedia = !1, this.voxSignaling = a.VoxSignaling.get(), this.voxMediaManager = s.UserMediaManager.get(), this.voxCallManager = g.CallManager.get(), this.mediacache = y.MediaCache.get(), this.setLogLevelAll(l.LogLevel.NONE), l.LogManager.get().writeMessage(l.LogCategory.CLIENT, "SDK ver.", l.LogLevel.TRACE, this.version), a.VoxSignaling.get().setRPCHandler(v.RemoteEvent.onPCStats, function (e, n) {
                        u.PCFactory.get().getPeerConnect(e) && t.dispatchEvent({name: "NetStatsReceived", stats: n})
                    })
                }

                return e.prototype.applyMixins = function (e, t) {
                    t.forEach(function (t) {
                        Object.getOwnPropertyNames(t.prototype).forEach(function (n) {
                            e.prototype[n] = t.prototype[n]
                        })
                    })
                }, e.prototype.deviceEnumAPI = function () {
                    var e = this;
                    this.voxMediaManager.getDevices().then(function () {
                        e._deviceEnumAPI = !0, e.dispatchEvent({name: r.Events.SourcesInfoUpdated})
                    }).catch(function (e) {
                        this._deviceEnumAPI = !1
                    })
                }, e.prototype.playProgressTone = function () {
                    null !== this.progressToneScript[this.progressToneCountry] && (this.playingNow || this.playToneScript(this.progressToneScript[this.progressToneCountry]), this.playingNow = !0)
                }, e.prototype.stopProgressTone = function () {
                    this.playingNow && (this.stopPlayback(), this.playingNow = !1)
                }, e.prototype.onIncomingCall = function (e, t, n, o, i) {
                    this.dispatchEvent({
                        name: r.Events.IncomingCall,
                        call: g.CallManager.get().calls[e],
                        headers: o,
                        video: i
                    })
                }, e.prototype.checkConnection = function () {
                    if (!this._connected)throw new Error("NOT_CONNECTED_TO_VOXIMPLANT")
                }, e.prototype.init = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        if (t._config = "undefined" != typeof e ? e : {}, void 0 !== t._config.videoConstraints && (t.videoConstraints = t._config.videoConstraints), void 0 !== t._config.progressToneCountry && (t.progressToneCountry = t._config.progressToneCountry), t._config.progressTone !== !0 && (t.progressTone = !1), void 0 !== t._config.serverIp && (t.serverIp = t._config.serverIp), void 0 !== t._config.showDebugInfo && (t.showDebugInfo = t._config.showDebugInfo), t._config.showWarnings !== !1 && (t.showWarnings = !0), "string" == typeof t._config.videoContainerId && (t.remoteVideoContainerId = t._config.videoContainerId), "string" == typeof t._config.remoteVideoContainerId && (t.remoteVideoContainerId = t._config.remoteVideoContainerId), "string" == typeof t._config.localVideoContainerId && (t.localVideoContainerId = t._config.localVideoContainerId), t._config.micRequired !== !1 && (t.micRequired = !0), "undefined" != typeof t._config.videoSupport ? t.videoSupport = t._config.videoSupport : t.videoSupport = !1, "undefined" != typeof t._config.H264first ? t._h264first = t._config.H264first : t._h264first = !1, "undefined" != typeof t._config.VP8first ? t._VP8first = t._config.VP8first : t._VP8first = !1, "undefined" != typeof t._config.rtcStatsCollectionInterval ? g.CallManager.get().rtcStatsCollectionInterval = t._config.rtcStatsCollectionInterval : g.CallManager.get().rtcStatsCollectionInterval = 1e4, t.showWarnings && t.setLogLevelAll(l.LogLevel.WARNING), t.showDebugInfo && t.setLogLevelAll(l.LogLevel.TRACE), !t._config.protocolVersion || "2" !== t._config.protocolVersion && "3" !== t._config.protocolVersion ? t._callProtocolVersion = "3" : t._callProtocolVersion = t._config.protocolVersion, t._config.callstatsIoParams && C.CallstatsIo.get(t._config.callstatsIoParams), t._config.prettyPrint && l.LogManager.get().setPrettyPrint(t._config.prettyPrint), s.UserMediaManager.get().enableAudio(t.micRequired), s.UserMediaManager.get().enableVideo(t.videoSupport), "127.0.0.1" != window.location.hostname && "localhost" != window.location.hostname && "https:" != window.location.protocol && "undefined" != typeof console.error && t.showWarnings && console.error("WARNING: getUserMedia() is deprecated on insecure origins, and support will be removed in the future. You should consider switching your application to a secure origin, such as HTTPS. See https://goo.gl/rStTGz for more details."), "undefined" != typeof webkitRTCPeerConnection || "undefined" != typeof mozRTCPeerConnection || "undefined" != typeof RTCPeerConnection || "undefined" != typeof RTCIceGatherer)if ("undefined" != typeof mozRTCPeerConnection)try {
                            new mozRTCPeerConnection({iceServers: []}), t.RTCsupported = !0
                        } catch (e) {
                        } else t.RTCsupported = !0;
                        if (!t.RTCsupported)throw o(new Error("NO_WEBRTC_SUPPORT")), new Error("NO_WEBRTC_SUPPORT");
                        var i;
                        null != window.location.href.match(/^file\:\/{3}.*$/g) && "undefined" != typeof console.error && t.showWarnings && console.error("WebRTC requires application to be loaded from a web server"), t.voxAuth = c.Authenticator.get(), t.voxAuth.setHandler({
                            onLoginSuccessful: function (e, n) {
                                t._promises.login.resolve({
                                    name: r.Events.AuthResult,
                                    displayName: e,
                                    result: !0
                                }), t.dispatchEvent({name: r.Events.AuthResult, displayName: e, result: !0, tokens: n})
                            }, onLoginFailed: function (e) {
                                t._promises.login.reject({
                                    name: r.Events.AuthResult,
                                    code: e,
                                    result: !1
                                }), t.dispatchEvent({name: r.Events.AuthResult, code: e, result: !1})
                            }, onSecondStageInitiated: function () {
                                t._promises.login.reject({
                                    name: r.Events.AuthResult,
                                    code: 301,
                                    result: !1
                                }), t.dispatchEvent({name: r.Events.AuthResult, code: 301, result: !1})
                            }, onOneTimeKeyGenerated: function (e) {
                                t._promises.loginkey.resolve({
                                    name: r.Events.AuthResult,
                                    key: e,
                                    code: 302,
                                    result: !1
                                }), t.dispatchEvent({name: r.Events.AuthResult, key: e, code: 302, result: !1})
                            }, onRefreshTokenFailed: function (e) {
                                t.dispatchEvent({name: r.Events.RefreshTokenResult, code: e, result: !1})
                            }, onRefreshTokenSuccess: function (e) {
                                t.dispatchEvent({name: r.Events.RefreshTokenResult, tokens: e, result: !0})
                            }
                        }), t.voxSignaling.addHandler(t), i = setInterval(function () {
                            "undefined" != typeof document && (clearInterval(i), t.deviceEnumAPI(), t.dispatchEvent({
                                name: r.Events.SDKReady,
                                version: t.version
                            }), n({name: r.Events.SDKReady, version: t.version}))
                        }, 100)
                    })
                }, e.prototype.call = function (e, t, n, o) {
                    i.Utils.checkCA();
                    var r = {};
                    r = "string" == typeof e ? {
                        number: e,
                        video: t,
                        customData: n,
                        extraHeaders: o
                    } : e, "boolean" == typeof r.video && (r.video = {
                        sendVideo: r.video,
                        receiveVideo: r.video
                    }), "undefined" == typeof r.H264first && (r.H264first = this._h264first), "undefined" == typeof r.VP8first && (r.VP8first = this._VP8first);
                    var a = this.voxCallManager.call(r);
                    return a
                }, e.prototype.config = function () {
                    return this._config
                }, e.prototype.connect = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        if (t._promises.connect = {resolve: n, reject: o}, void 0 !== t.serverIp) {
                            var r = void 0;
                            "object" == typeof t.serverIp ? (t.serversList = t.serverIp, r = t.serversList[0]) : r = t.serverIp, t.connectTo(r, null, e)
                        } else {
                            var a = function (t) {
                                var n, o = String(t).indexOf(";");
                                o == -1 ? n = t : (this.serversList = t.split(";"), n = this.serversList[0]), this.connectTo(n, null, e)
                            };
                            i.Utils.getServers(a.bind(t), !1, t)
                        }
                    })
                }, e.prototype.connectTo = function (e, t, n) {
                    var o = this;
                    if (this._connected)throw new Error("ALREADY_CONNECTED_TO_VOXIMPLANT");
                    this.host = e, this.micRequired && t !== !0 ? this.voxMediaManager.queryMedia().then(function (e) {
                        o.deviceEnumAPI(), o.micRequired && o.voxSignaling.connectTo(o.host, !0, !0, n, o._callProtocolVersion), o.dispatchEvent({
                            name: r.Events.MicAccessResult,
                            result: !0,
                            stream: e
                        })
                    }).catch(function (e) {
                        o.dispatchEvent({name: r.Events.MicAccessResult, result: !1, reason: e})
                    }) : this.voxSignaling.connectTo(e, !0, !0, n, this._callProtocolVersion)
                }, e.prototype.disconnect = function () {
                    this.checkConnection(), this.voxSignaling.disconnect(), this.voxMediaManager.stopLocalStream(), this.voxSignaling.removeRPCHandler(v.RemoteEvent.onCallRemoteFunctionError), this.voxSignaling.removeRPCHandler(v.RemoteEvent.handleError)
                }, e.prototype.setOperatorACDStatus = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        i.Utils.checkCA(), t._promises.acd_status = {
                            resolve: n,
                            reject: o
                        }, t.voxSignaling.callRemoteFunction(h.RemoteFunction.setOperatorACDStatus, e)
                    })
                }, e.prototype.login = function (e, t, n) {
                    var o = this;
                    return new Promise(function (r, a) {
                        if (o._promises.login = {
                                resolve: r,
                                reject: a
                            }, n = "undefined" != typeof n ? n : {}, n = i.Utils.extend({}, n), !o._connected)throw a(new Error("NOT_CONNECTED_TO_VOXIMPLANT")), new Error("NOT_CONNECTED_TO_VOXIMPLANT");
                        o.voxAuth.basicLogin(e, t, n)
                    })
                }, e.prototype.loginWithCode = function (e, t, n) {
                    var o = this;
                    return new Promise(function (r, a) {
                        if (o._promises.login = {
                                resolve: r,
                                reject: a
                            }, n = "undefined" != typeof n ? n : {}, n = i.Utils.extend({serverPresenceControl: !1}, n), !o._connected)throw a(new Error("NOT_CONNECTED_TO_VOXIMPLANT")), new Error("NOT_CONNECTED_TO_VOXIMPLANT");
                        o.voxAuth.loginStage2(e, t, n)
                    })
                }, e.prototype.loginWithToken = function (e, t, n) {
                    var o = this;
                    return new Promise(function (r, a) {
                        if (o._promises.login = {
                                resolve: r,
                                reject: a
                            }, n = "undefined" != typeof n ? n : {}, n = i.Utils.extend({serverPresenceControl: !1}, n), n.accessToken = t, !o._connected)throw a(new Error("NOT_CONNECTED_TO_VOXIMPLANT")), new Error("NOT_CONNECTED_TO_VOXIMPLANT");
                        o.voxAuth.tokenLogin(e, n)
                    })
                }, e.prototype.tokenRefresh = function (e, t) {
                    this.voxAuth.tokenRefresh(e, t)
                }, e.prototype.requestOneTimeLoginKey = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        if (t._promises.loginkey = {
                                resolve: n,
                                reject: o
                            }, !t._connected)throw o(new Error("NOT_CONNECTED_TO_VOXIMPLANT")), new Error("NOT_CONNECTED_TO_VOXIMPLANT");
                        t.voxAuth.generateOneTimeKey(e)
                    })
                }, e.prototype.loginWithOneTimeKey = function (e, t, n) {
                    var o = this;
                    return new Promise(function (r, a) {
                        if (o._promises.login = {
                                resolve: r,
                                reject: a
                            }, n = "undefined" != typeof n ? n : {}, n = i.Utils.extend({serverPresenceControl: !1}, n), !o._connected)throw a(new Error("NOT_CONNECTED_TO_VOXIMPLANT")), new Error("NOT_CONNECTED_TO_VOXIMPLANT");
                        o.voxAuth.loginUsingOneTimeKey(e, t, n)
                    })
                }, e.prototype.connected = function () {
                    return this._connected
                }, e.prototype.showLocalVideo = function (e, t, n) {
                    void 0 === e && (e = !0), void 0 === t && (t = !1), void 0 === n && (n = !1), this.voxMediaManager.showLocalVideo(e, t, n)
                }, e.prototype.setLocalVideoPosition = function (e, t) {
                    throw new Error("Deprecated: please use CSS to position '#voximplantlocalvideo' element")
                }, e.prototype.setLocalVideoSize = function (e, t) {
                    throw new Error("Deprecated: please use CSS to set size of '#voximplantlocalvideo' element")
                }, e.prototype.setVideoSettings = function (e, t, n) {
                    var o = this;
                    s.UserMediaManager.get().setConstraints(e, !0).then(function (e) {
                        null !== document.getElementById("voximplantlocalvideo") && d.default.attachMedia(o.voxMediaManager.currentStream, document.getElementById("voximplantlocalvideo")), "function" == typeof t && t(e)
                    }).catch(function (e) {
                        "function" == typeof n && n(e)
                    })
                }, e.prototype.setVideoBandwidth = function (e) {
                    this.checkConnection(), u.PCFactory.get().setBandwidthParams(e), this.voxSignaling.callRemoteFunction(h.RemoteFunction.setDesiredVideoBandwidth, e)
                }, e.prototype.playToneScript = function (e, t) {
                    void 0 === t && (t = !1), i.Utils.playToneScript(e, t)
                }, e.prototype.stopPlayback = function () {
                    i.Utils.stopPlayback() && this.dispatchEvent({name: r.Events.PlaybackFinished})
                }, e.prototype.volume = function (e) {
                    return void 0 === e ? this._vol : (e > 100 && (e = 100), e < 0 && (e = 0), p.Renderer.get().setPlaybackVolume(e / 100), this._vol = e, void 0)
                }, e.prototype.audioSources = function () {
                    return this.voxMediaManager.audioSourcesList
                }, e.prototype.videoSources = function () {
                    return this.voxMediaManager.videoSourcesList
                }, e.prototype.audioOutputs = function () {
                    return this.voxMediaManager.audioOutputsList
                }, e.prototype.useAudioSource = function (e, t, n) {
                    var o = this;
                    return new Promise(function (r, i) {
                        o.voxMediaManager.useAudioInputDevice(e), o.voxMediaManager.enableAudio(!0), o.voxMediaManager.queryMedia().then(function (e) {
                            "function" == typeof t && t(e), r(e), s.UserMediaManager.get().updateLocalVideo(e)
                        }).catch(function (e) {
                            "function" == typeof n && n(e), i(e)
                        })
                    })
                }, e.prototype.useVideoSource = function (e, t, n) {
                    var o = this;
                    return new Promise(function (r, i) {
                        o.voxMediaManager.useVideoDevice(e), s.UserMediaManager.get().isVideoEnabled() ? o.voxMediaManager.queryMedia().then(function (e) {
                            "function" == typeof t && t(e), s.UserMediaManager.get().updateLocalVideo(e), r(e)
                        }).catch(function (e) {
                            "function" == typeof n && n(e), i(e)
                        }) : s.UserMediaManager.get().updateLocalVideo()
                    })
                }, e.prototype.useAudioOutput = function (e) {
                    return new Promise(function (t, n) {
                        "chrome" !== d.default.getWSVendor(!0) && n(new Error("Unsupported browser. Only Google Chrome 49 and above.")), p.Renderer.get().setDefaultSinkId(e), t()
                    })
                }, e.prototype.attachRecordingDevice = function (e, t) {
                    var n = this;
                    return this.voxMediaManager.enableAudio(!0), this._config.videoSupport && this.voxMediaManager.enableVideo(!0), new Promise(function (o, i) {
                        return n.voxMediaManager.queryMedia().then(function (t) {
                            "function" == typeof e && e(t), n.dispatchEvent({
                                name: r.Events.MicAccessResult,
                                result: !0,
                                stream: t
                            })
                        }).catch(function (e) {
                            "function" == typeof t && t(e), n.dispatchEvent({
                                name: r.Events.MicAccessResult,
                                result: !1,
                                reason: e
                            })
                        })
                    })
                }, e.prototype.detachRecordingDevice = function () {
                    s.UserMediaManager.get().stopLocalStream()
                }, e.prototype.setCallActive = function (e, t) {
                    return void 0 === t && (t = !0), new Promise(function (n, o) {
                        return i.Utils.checkCA(), e ? e.setActive(t) : void o("trying to hold unknown call " + e)
                    })
                }, e.prototype.sendVideo = function (e) {
                    void 0 === e && (e = !0), this.voxMediaManager.sendVideo(e)
                }, e.prototype.isRTCsupported = function () {
                    return this.RTCsupported
                }, e.prototype.transferCall = function (e, t) {
                    i.Utils.checkCA(), this.voxCallManager.transferCall(e, t)
                }, e.prototype.startScreenSharing = function () {
                }, e.getInstance = function () {
                    return "undefined" == typeof e.instance && (e.instance = new e), e.instance
                }, Object.defineProperty(e.prototype, "version", {
                    get: function () {
                        return "4.0.6577"
                    }, enumerable: !0, configurable: !0
                }), e.prototype.setLogLevel = function (e, t) {
                    l.LogManager.get().setLogLevel(e, t)
                }, e.prototype.setLogLevelAll = function (e) {
                    this.setLogLevel(l.LogCategory.SIGNALING, e), this.setLogLevel(l.LogCategory.RTC, e), this.setLogLevel(l.LogCategory.ORTC, e), this.setLogLevel(l.LogCategory.USERMEDIA, e), this.setLogLevel(l.LogCategory.CALL, e), this.setLogLevel(l.LogCategory.CALLEXP2P, e), this.setLogLevel(l.LogCategory.CALLEXSERVER, e), this.setLogLevel(l.LogCategory.CALLMANAGER, e), this.setLogLevel(l.LogCategory.CLIENT, e), this.setLogLevel(l.LogCategory.AUTHENTICATOR, e), this.setLogLevel(l.LogCategory.PCFACTORY, e), this.setLogLevel(l.LogCategory.UTILS, e), this.setLogLevel(l.LogCategory.MESSAGING, e)
                }, e.prototype.onSignalingConnected = function () {
                    this._connected = !0, void 0 !== this._promises.connect && this._promises.connect.resolve({name: r.Events.ConnectionEstablished}), this.dispatchEvent({name: r.Events.ConnectionEstablished})
                }, e.prototype.onSignalingClosed = function () {
                    this._connected = !1, this.dispatchEvent({name: r.Events.ConnectionClosed}), this.progressTone && this.stopProgressTone()
                }, e.prototype.onSignalingConnectionFailed = function (e) {
                    this._connected = !1, this.serversList.length > 1 && ("undefined" == typeof this.serverIp || "object" == typeof this.serverIp) ? (this.serversList.splice(0, 1), this.connectTo(this.serversList[0], !0)) : (void 0 !== this._promises.connect && this._promises.connect.reject({
                        name: r.Events.ConnectionFailed,
                        message: e
                    }), this.dispatchEvent({name: r.Events.ConnectionFailed, message: e}))
                }, e.prototype.onMediaConnectionFailed = function () {
                }, e.prototype.getCall = function (e) {
                    return g.CallManager.get().calls[e]
                }, e.prototype.removeCall = function (e) {
                    g.CallManager.get().removeCall(e)
                }, e.prototype.dispatchEvent = function (e) {
                }, e.prototype.addEventListener = function (e, t) {
                }, e.prototype.removeEventListener = function (e, t) {
                }, e.prototype.on = function (e, t) {
                }, e.prototype.off = function (e, t) {
                }, e.prototype.sslset = function (e) {
                    this.voxSignaling.writeLog = e
                }, e.prototype.sslget = function () {
                    return this.voxSignaling.getLog()
                }, o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "deviceEnumAPI", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "playProgressTone", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "stopProgressTone", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "onIncomingCall", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "checkConnection", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "init", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "call", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "config", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "connect", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "connectTo", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "disconnect", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setOperatorACDStatus", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "login", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "loginWithCode", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "loginWithToken", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "tokenRefresh", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "requestOneTimeLoginKey", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "loginWithOneTimeKey", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "connected", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "showLocalVideo", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setLocalVideoPosition", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setLocalVideoSize", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setVideoSettings", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setVideoBandwidth", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "playToneScript", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "stopPlayback", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "volume", null),
                    o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "audioSources", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "videoSources", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "audioOutputs", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "useAudioSource", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "useVideoSource", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "useAudioOutput", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "attachRecordingDevice", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "detachRecordingDevice", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setCallActive", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "sendVideo", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "isRTCsupported", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "transferCall", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "startScreenSharing", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setLogLevel", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "setLogLevelAll", null), o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "onSignalingConnected", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "onSignalingClosed", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "onSignalingConnectionFailed", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "onMediaConnectionFailed", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "getCall", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "removeCall", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "dispatchEvent", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "addEventListener", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "removeEventListener", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "on", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e.prototype, "off", null),o([l.LogManager.d_trace(l.LogCategory.CLIENT)], e, "getInstance", null),e
            }();
        t.Client = m
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                    var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                    return i > 3 && a && Object.defineProperty(t, n, a), a
                }, r = n(16), i = n(3), a = n(11), s = n(1), c = n(6), d = n(7), l = n(8), u = n(4), g = n(2), p = n(38),
            f = n(9);
        !function (e) {
            e[e.ALERTING = "ALERTING"] = "ALERTING", e[e.PROGRESSING = "PROGRESSING"] = "PROGRESSING", e[e.CONNECTED = "CONNECTED"] = "CONNECTED", e[e.UPDATING = "UPDATING"] = "UPDATING", e[e.ENDED = "ENDED"] = "ENDED"
        }(t.CallState || (t.CallState = {}));
        var h = t.CallState;
        !function (e) {
            e[e.P2P = 0] = "P2P", e[e.SERVER = 1] = "SERVER"
        }(t.CallMode || (t.CallMode = {}));
        var v = t.CallMode, C = function () {
            function e(e, t, n, o) {
                var r = this;
                this.eventListeners = {}, this.pendingReinvites = [], this._id = e, this._num = o.number, this._displayName = t, this._headers = o.extraHeaders, this._state = n ? h.ALERTING : h.PROGRESSING, this._mode = v.P2P, "boolean" != typeof o.video && (o.video = o.video.sendVideo), this._setupWiredLocal = o.wiredLocal, this._wiredLocal = o.wiredLocal, this._setupWiredRemote = o.wiredLocal, this._wiredRemote = o.wiredLocal, this._active = !0, this._usedSinkId = null, this._promise = new Promise(function (e, t) {
                    r._promiseFunctions = {resolve: e, reject: t}
                }), this._renegotiationPromise = null, this.log = s.LogManager.get().createLogger(s.LogCategory.CALL, "Call " + e), this._callManager = l.CallManager.get(), this.videoDirections = {
                    sendVideo: !1,
                    receiveVideo: !0
                }
            }

            return e.prototype.id = function () {
                return this._id
            }, e.prototype.number = function () {
                return this._num
            }, e.prototype.displayName = function () {
                return this._displayName
            }, e.prototype.headers = function () {
                return this._headers
            }, e.prototype.active = function () {
                return this._active
            }, e.prototype.state = function () {
                return h[this._state]
            }, Object.defineProperty(e.prototype, "stateValue", {
                get: function () {
                    return this._state
                }, enumerable: !0, configurable: !0
            }), e.prototype.answer = function (e, t, n) {
                if ("undefined" != typeof e && ("undefined" == typeof t && (t = {}), t[a.Constants.CALL_DATA_HEADER] = e), "undefined" != typeof n && (n = f.Client.getInstance().config().videoSupport), this._state != h.ALERTING)throw new Error("WRONG_CALL_STATE")
            }, e.prototype.decline = function (e) {
                this.reject(e)
            }, e.prototype.reject = function (e) {
                if (this._state != h.ALERTING)throw new Error("WRONG_CALL_STATE");
                i.VoxSignaling.get().callRemoteFunction(g.RemoteFunction.rejectCall, this._id, !0, l.CallManager.cleanHeaders(e))
            }, e.prototype.hangup = function (e) {
                if (this._state == h.CONNECTED || this._state == h.PROGRESSING) i.VoxSignaling.get().callRemoteFunction(g.RemoteFunction.disconnectCall, this._id, l.CallManager.cleanHeaders(e)); else {
                    if (this._state != h.ALERTING)throw new Error("WRONG_CALL_STATE");
                    i.VoxSignaling.get().callRemoteFunction(g.RemoteFunction.rejectCall, this._id, !0, l.CallManager.cleanHeaders(e))
                }
            }, e.prototype.sendTone = function (e) {
                this._peerConnection.sendDTMF(e)
            }, e.prototype.mutePlayback = function () {
                c.UserMediaManager.updateMuteState(this._id, c.MediaDirection.REMOTE, !1)
            }, e.prototype.muteMicrophone = function () {
                this.peerConnection.localStream.getAudioTracks().forEach(function (e) {
                    e.enabled = !1
                })
            }, e.prototype.unmutePlayback = function () {
                c.UserMediaManager.updateMuteState(this._id, c.MediaDirection.REMOTE, !0)
            }, e.prototype.unmuteMicrophone = function () {
                this.peerConnection.localStream.getAudioTracks().forEach(function (e) {
                    e.enabled = !0
                })
            }, e.prototype.showRemoteVideo = function (e) {
                void 0 === e && (e = !0), "undefined" == typeof e && (e = !0), this.peerConnection.videoRenderer && (this.peerConnection.videoRenderer.style.display = e ? "block" : "none")
            }, e.prototype.setRemoteVideoPosition = function (e, t) {
                throw new Error("Deprecated: please use CSS to position '#voximplantcontainer' element")
            }, e.prototype.setRemoteVideoSize = function (e, t) {
                throw new Error("Deprecated: please use CSS to set size of '#voximplantcontainer' element")
            }, e.prototype.sendInfo = function (e, t, n) {
                var o, r, a = e.indexOf("/");
                a == -1 ? (o = "application", r = e) : (o = e.substring(0, a), r = e.substring(a + 1)), i.VoxSignaling.get().callRemoteFunction(g.RemoteFunction.sendSIPInfo, this._id, o, r, t, l.CallManager.cleanHeaders(n))
            }, e.prototype.sendMessage = function (e) {
                this.sendInfo(a.Constants.ZINGAYA_IM_MIME_TYPE, e, {})
            }, e.prototype.setVideoSettings = function (e, t, n) {
                c.UserMediaManager.get().setConstraints(e, !0).then(function (e) {
                    "function" == typeof t && t(e)
                }).catch(function (e) {
                    "function" == typeof n && n(e)
                })
            }, e.prototype.getVideoElementId = function () {
                if (this.peerConnection && this._wiredRemote) {
                    var e = this.peerConnection.videoRenderer;
                    return null != e ? e.id : null
                }
                return null
            }, e.prototype.addEventListener = function (e, t) {
                "undefined" == typeof this.eventListeners[e] && (this.eventListeners[e] = []), this.eventListeners[e].push(t)
            }, e.prototype.on = function (e, t) {
                this.addEventListener(e, t)
            }, e.prototype.removeEventListener = function (e, t) {
                if ("undefined" != typeof this.eventListeners[e])if ("function" == typeof t) {
                    for (var n = 0; n < this.eventListeners[e].length; n++)if (this.eventListeners[e][n] == t) {
                        this.eventListeners[e].splice(n, 1);
                        break
                    }
                } else this.eventListeners[e] = []
            }, e.prototype.off = function (e, t) {
                this.removeEventListener(e, t)
            }, e.prototype.dispatchEvent = function (e) {
                var t = this, n = e.name;
                if (n === r.CallEvents.Updated || n === r.CallEvents.UpdateFailed) this._state = h.CONNECTED, setTimeout(function () {
                    if (n === r.CallEvents.Updated && null !== t._renegotiationPromise && (e.result ? t._renegotiationPromise.resolve(e) : t._renegotiationPromise.reject({
                            code: 20,
                            call: t
                        }), t._renegotiationPromise = null), n === r.CallEvents.UpdateFailed && null !== t._renegotiationPromise && (t._renegotiationPromise.reject(e), t._renegotiationPromise = null), n !== r.CallEvents.Updated && n !== r.CallEvents.UpdateFailed || (t._renegotiationPromise = null, t.runPendingReinvite()), "undefined" != typeof t.eventListeners[n])for (var o = 0; o < t.eventListeners[n].length; o++)"function" == typeof t.eventListeners[n][o] && t.eventListeners[n][o](e)
                }, 1e3); else if ("undefined" != typeof this.eventListeners[n])for (var o = 0; o < this.eventListeners[n].length; o++)"function" == typeof this.eventListeners[n][o] && this.eventListeners[n][o](e)
            }, e.prototype.checkState = function (e, t) {
                if (e)if ("string" != typeof e) {
                    for (var n = !1, o = e, r = 0; r < o.length; r++)o[r] == this._state && (n = !0);
                    if (!n)return this.log.warning("Received " + t + " in invalid state " + this._state), !1
                } else if (this._state != e)return this.log.warning("Received " + t + " in invalid state " + this._state), !1;
                return !0
            }, e.prototype.onConnected = function (e, t) {
                var n = this;
                return !!this.checkState([h.PROGRESSING, h.ALERTING], "onConnected") && (this._state = h.CONNECTED, setTimeout(function () {
                        n.dispatchEvent({name: "Connected", call: n, headers: e})
                    }, 800), !0)
            }, e.prototype.onDisconnected = function (e, t) {
                return !!this.checkState([h.CONNECTED, h.ALERTING, h.PROGRESSING], "onDisconnected") && (this._state = h.ENDED, this.dispatchEvent({
                        name: "Disconnected",
                        call: this,
                        headers: e,
                        params: t
                    }), p.ReusableRenderer.get().freeRendersByCallId(this._id), !0)
            }, e.prototype.onFailed = function (e, t, n) {
                return this.dispatchEvent({
                    name: "Failed",
                    call: this,
                    headers: n,
                    code: e,
                    reason: t
                }), this._state = h.ENDED, p.ReusableRenderer.get().freeRendersByCallId(this._id), !0
            }, e.prototype.onStopRinging = function () {
                return !!this.checkState([h.PROGRESSING, h.CONNECTED], "onStopRinging") && (this.dispatchEvent({
                        name: "ProgressToneStop",
                        call: this
                    }), !0)
            }, e.prototype.onRingOut = function () {
                return !!this.checkState(h.PROGRESSING, "onRingOut") && (this.dispatchEvent({
                        name: "ProgressToneStart",
                        call: this
                    }), !0)
            }, e.prototype.onTransferComplete = function () {
                return !!this.checkState(h.CONNECTED, "onTransferComplete") && (this.dispatchEvent({
                        name: "TransferComplete",
                        call: this
                    }), !0)
            }, e.prototype.onTransferFailed = function () {
                return !!this.checkState(h.CONNECTED, "onTransferFailed") && (this.dispatchEvent({
                        name: "TransferFailed",
                        call: this
                    }), !0)
            }, e.prototype.onInfo = function (e, t, n, o, r) {
                if (e.stateValue == h.CONNECTED || e.stateValue == h.PROGRESSING || e.stateValue == h.ALERTING) {
                    var i = t + "/" + n;
                    if (i == a.Constants.ZINGAYA_IM_MIME_TYPE) this.dispatchEvent({
                        name: "onSendMessage",
                        call: this,
                        text: o
                    }); else if (i == a.Constants.P2P_SPD_FRAG_MIME_TYPE) {
                        var s = JSON.parse(o);
                        for (var c in s)e.peerConnection.addRemoteCandidate(s[c][1], s[c][0])
                    } else i == a.Constants.VI_SPD_OFFER_MIME_TYPE ? e.peerConnection.processRemoteOffer(o) : i == a.Constants.VI_SPD_ANSWER_MIME_TYPE ? e.peerConnection.processRemoteAnswer({}, o) : this.dispatchEvent({
                        name: "InfoReceived",
                        call: this,
                        body: o,
                        headers: r,
                        mimeType: i
                    });
                    return !0
                }
                this.log.warning("received handleSIPInfo for call: " + e.id() + " in invalid state: " + e.state())
            }, e.prototype.setActive = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    return "firefox" === u.default.getWSVendor() ? (t.sendInfo(a.Constants.VI_HOLD_EMUL, JSON.stringify({hold: !e})), void n({
                        call: t,
                        result: !0
                    })) : void(t._state === h.UPDATING ? t.addPendingReinvite({
                        action: "setActive",
                        resolve: n,
                        reject: o,
                        params: e
                    }) : (t._state = h.UPDATING, t._active = e, t._state == h.CONNECTED ? (e ? i.VoxSignaling.get().callRemoteFunction(g.RemoteFunction.unhold, t._id) : i.VoxSignaling.get().callRemoteFunction(g.RemoteFunction.hold, t._id), n({
                        result: !0,
                        call: t
                    })) : o({code: 11, call: t})))
                })
            }, Object.defineProperty(e.prototype, "promise", {
                get: function () {
                    return this._promise
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "peerConnection", {
                get: function () {
                    return this._peerConnection
                }, set: function (e) {
                    this._peerConnection = e
                }, enumerable: !0, configurable: !0
            }), e.prototype.checkCallMode = function (e) {
                return this._mode == e
            }, e.prototype.canStartSendingCandidates = function () {
                "undefined" == typeof this._peerConnection && (this._peerConnection = d.PCFactory.get().peerConnections[this._id]), this._peerConnection.canStartSendingCandidates()
            }, e.prototype.notifyICETimeout = function () {
                this.dispatchEvent({name: "ICETimeout", call: this})
            }, e.prototype.sendVideo = function (e) {
                return this.sendMedia(null, e)
            }, e.prototype.sendMedia = function (e, t) {
                var n = this;
                return new Promise(function (o, r) {
                    if (null != t && (n.videoDirections.sendVideo = t), n._state === h.UPDATING) n.addPendingReinvite({
                        action: "sendMedia",
                        resolve: o,
                        reject: r,
                        params: {audio: e, video: t}
                    }); else {
                        n._state = h.UPDATING, null !== n._renegotiationPromise && r({
                            code: 12,
                            call: n
                        }), n._renegotiationPromise = {resolve: o, reject: r};
                        var i = c.UserMediaManager.get().getConstrainWithSendFlag(e, t);
                        n.peerConnection.setVideoEnabled(t), c.UserMediaManager.get().getQueryMediaSilent(i).then(function (e) {
                            n.peerConnection.bindLocalMedia(e)
                        }).catch(function (e) {
                            r({code: 13, call: n})
                        })
                    }
                })
            }, e.prototype.sendAudio = function (e) {
                return this.sendMedia(e, null)
            }, e.prototype.getLocalStream = function () {
                var e = this;
                return this._wiredLocal ? new Promise(function (t, n) {
                    e.peerConnection ? t(e.peerConnection.localStream) : n(new Error("We have no PC for this call yet"))
                }) : c.UserMediaManager.get().queryMedia()
            }, e.prototype.setLocalStream = function (e) {
                return new Promise(function (e, t) {
                    t(new Error("Not implemented"))
                })
            }, e.prototype.shareScreen = function (e) {
                var t = this;
                u.default.getScreenMedia([e]).then(function (e) {
                    t.peerConnection._addTrack(e)
                })
            }, e.prototype.addLocalStream = function (e) {
                return new Promise(function (e, t) {
                    t(new Error("Not implemented"))
                })
            }, e.prototype.wireRemoteStream = function () {
                var e = this;
                return new Promise(function (t, n) {
                    e.peerConnection ? "undefined" != typeof e.peerConnection.remoteStreams[0] ? e.peerConnection.wireRemoteStream(!0).then(function () {
                        e._wiredRemote = !0, t()
                    }).catch(n) : n(new Error("We have no remote MediaStream for this call yet")) : n(new Error("We have no PC for this call yet"))
                })
            }, e.prototype.getRemoteAudioStreams = function () {
                var e = this;
                return new Promise(function (t, n) {
                    e.peerConnection ? "undefined" != typeof e.peerConnection.remoteStreams[0] && 0 != e.peerConnection.remoteStreams[0].getAudioTracks().length ? t(new MediaStream(e.peerConnection.remoteStreams[0].getAudioTracks())) : n(new Error("We have no remote MediaStream for this call yet")) : n(new Error("We have no PC for this call yet"))
                })
            }, e.prototype.getRemoteVideoStreams = function () {
                var e = this;
                return new Promise(function (t, n) {
                    e.peerConnection ? "undefined" != typeof e.peerConnection.remoteStreams[0] && 0 != e.peerConnection.remoteStreams[0].getVideoTracks().length ? t(new MediaStream(e.peerConnection.remoteStreams[0].getVideoTracks())) : n(new Error("We have no remote MediaStream for this call yet")) : n(new Error("We have no PC for this call yet"))
                })
            }, e.prototype.getRemoteWiredState = function () {
                return this._wiredRemote
            }, e.prototype.getLocalWiredState = function () {
                return this._wiredLocal
            }, e.prototype.useAudioOutput = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    "chrome" !== u.default.getWSVendor(!0) && o(new Error("Unsupported browser. Only Google Chrome 49 and above."));
                    return t.peerConnection.updateRenderersSink(e)
                })
            }, e.prototype.getAudioElementId = function () {
                return (this._peerConnection.remoteStreams.length = 0) ? null : (this._peerConnection.remoteStreams[0].getAudioTracks().length = 0) ? null : this._peerConnection.remoteStreams[0].getAudioTracks()[0].id
            }, e.prototype.getDirections = function () {
                if ("undefined" != typeof this.peerConnection)return this.peerConnection.getDirections()
            }, e.prototype.getStreamActivity = function () {
                return {}
            }, e.prototype.hdnFRS = function () {
                this.peerConnection._hdnFRS()
            }, e.prototype.hdnFRSPrep = function () {
                var e = this;
                "undefined" != typeof this.peerConnection ? this.peerConnection._hdnFRSPrep() : setTimeout(function () {
                    e.hdnFRSPrep()
                }, 1e3)
            }, e.prototype.runIncomingReInvite = function (e, t) {
                if (this._state === h.UPDATING) this.dispatchEvent({code: 11, call: this}); else {
                    this._state = h.UPDATING;
                    var n = l.CallManager.get().isSDPHasVideo(t);
                    this.peerConnection.handleReinvite(e, t, n)
                }
            }, e.prototype.addPendingReinvite = function (e) {
                this.pendingReinvites.length > 5 && this.log.info("Update queue overflow."), this.pendingReinvites.push(e)
            }, e.prototype.runPendingReinvite = function () {
                var e = this;
                if (0 !== this.pendingReinvites.length) {
                    var t = this.pendingReinvites.splice(0, 1)[0];
                    setTimeout(function () {
                        switch (t.action) {
                            case"runIncomingReInvite":
                                e.runIncomingReInvite(t.params.headers, t.params.sdp);
                                break;
                            case"setActive":
                                e.setActive(t.params).then(function () {
                                    return t.resolve()
                                }).catch(function () {
                                    return t.reject()
                                });
                                break;
                            case"sendMedia":
                                e.sendMedia(t.params.audio, t.params.video).then(function () {
                                    return t.resolve()
                                }).catch(function () {
                                    return t.reject()
                                })
                        }
                    }, 800)
                }
            }, e.prototype.setActiveForce = function (e) {
                this._active = e
            }, o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "id", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "number", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "displayName", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "headers", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "active", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "state", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "answer", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "decline", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "reject", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "hangup", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "sendTone", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "mutePlayback", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "muteMicrophone", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "unmutePlayback", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "unmuteMicrophone", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "showRemoteVideo", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "setRemoteVideoPosition", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "setRemoteVideoSize", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "sendInfo", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "sendMessage", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "setVideoSettings", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "getVideoElementId", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "addEventListener", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "on", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "removeEventListener", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "off", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "dispatchEvent", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "checkState", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onConnected", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onDisconnected", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onFailed", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onStopRinging", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onRingOut", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onTransferComplete", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onTransferFailed", null), o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "onInfo", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "setActive", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "checkCallMode", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "canStartSendingCandidates", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "notifyICETimeout", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "sendVideo", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "sendAudio", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "getLocalStream", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "setLocalStream", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "addLocalStream", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "wireRemoteStream", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "getRemoteAudioStreams", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "getRemoteVideoStreams", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "getRemoteWiredState", null),o([s.LogManager.d_trace(s.LogCategory.CALL)], e.prototype, "getLocalWiredState", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "useAudioOutput", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "getAudioElementId", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "getDirections", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "getStreamActivity", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "hdnFRS", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "hdnFRSPrep", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "runIncomingReInvite", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "addPendingReinvite", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "runPendingReinvite", null),o([s.LogManager.d_trace(s.LogCategory.CLIENT)], e.prototype, "setActiveForce", null),e
        }();
        t.Call = C
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e() {
            }

            return e.DIRECT_CALL_HEADER = "X-DirectCall", e.VIAMEDIA_CALL_HEADER = "X-ViaMedia", e.CALLSTATSIOID_HEADER = "X-CallstatsIOID", e.CALL_DATA_HEADER = "VI-CallData", e.ZINGAYA_IM_MIME_TYPE = "application/zingaya-im", e.P2P_SPD_FRAG_MIME_TYPE = "voximplant/sdpfrag", e.VI_HOLD_EMUL = "vi/holdemul", e.VI_SPD_OFFER_MIME_TYPE = "vi/sdpoffer", e.VI_SPD_ANSWER_MIME_TYPE = "vi/sdpanswer", e
        }();
        t.Constants = n
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(3), i = n(1), a = n(7), s = n(2), c = n(15), d = n(17);
        !function (e) {
            e[e.IDLE = 0] = "IDLE", e[e.IN_PROGRESS = 1] = "IN_PROGRESS"
        }(t.AuthenticatorState || (t.AuthenticatorState = {}));
        var l = t.AuthenticatorState, u = function () {
            function e() {
                var e = this;
                this.FAIL_CODE_SECOND_STAGE = 301, this.FAIL_CODE_ONE_TIME_KEY = 302, this._displayName = null, this._username = null, this._authorized = !1, this.signaling = r.VoxSignaling.get(), this.currentState = l.IDLE, this.log = i.LogManager.get().createLogger(i.LogCategory.SIGNALING, "Authenticator"), this.signaling.setRPCHandler(c.RemoteEvent.loginFailed, function (t, n) {
                    e.onLoginFailed(t, n)
                }), this.signaling.setRPCHandler(c.RemoteEvent.loginSuccessful, function (t, n) {
                    e.onLoginSuccesful(t, n)
                }), this.signaling.setRPCHandler(c.RemoteEvent.refreshOauthTokenFailed, function (t) {
                    e.handler.onRefreshTokenFailed(t)
                }), this.signaling.setRPCHandler(c.RemoteEvent.refreshOauthTokenSuccessful, function (t) {
                    e.handler.onRefreshTokenSuccess(t.OAuth)
                }), this.signaling.addHandler(this)
            }

            return e.get = function () {
                return "undefined" == typeof this.inst && (this.inst = new e), this.inst
            }, e.prototype.setHandler = function (e) {
                this.handler = e
            }, e.prototype.onLoginFailed = function (e, t) {
                switch (this.currentState = l.IDLE, e) {
                    case this.FAIL_CODE_ONE_TIME_KEY:
                        this.handler.onOneTimeKeyGenerated(t);
                        break;
                    case this.FAIL_CODE_SECOND_STAGE:
                        this.handler.onSecondStageInitiated();
                        break;
                    default:
                        this.handler.onLoginFailed(e)
                }
            }, e.prototype.onLoginSuccesful = function (e, t) {
                this.currentState = l.IDLE, this._authorized = !0, t && (a.PCFactory.get().iceConfig = t.iceConfig), this._displayName = e, d.CallstatsIo.get().init({
                    userName: this._username,
                    aliasName: this._displayName
                }), this.handler.onLoginSuccessful(e, t.OAuth)
            }, Object.defineProperty(e.prototype, "displayName", {
                get: function () {
                    return this._displayName
                }, enumerable: !0, configurable: !0
            }), e.prototype.basicLogin = function (e, t, n) {
                return this.currentState != l.IDLE ? void this.log.error("Login operation already in progress") : (this._username = e, this.currentState = l.IN_PROGRESS, void this.signaling.callRemoteFunction(s.RemoteFunction.login, e, t, n))
            }, e.prototype.tokenLogin = function (e, t) {
                return this.currentState != l.IDLE ? void this.log.error("Login operation already in progress") : (this._username = e, this.currentState = l.IN_PROGRESS, void this.signaling.callRemoteFunction(s.RemoteFunction.login, e, "", t))
            }, e.prototype.tokenRefresh = function (e, t) {
                this.signaling.callRemoteFunction(s.RemoteFunction.refreshOauthToken, e, t)
            }, e.prototype.loginUsingOneTimeKey = function (e, t, n) {
                return this.currentState != l.IDLE ? void this.log.error("Login operation already in progress") : (this._username = e, this.currentState = l.IN_PROGRESS, void this.signaling.callRemoteFunction(s.RemoteFunction.loginUsingOneTimeKey, e, t, n))
            }, e.prototype.loginStage2 = function (e, t, n) {
                return this.currentState != l.IDLE ? void this.log.error("Login operation already in progress") : (this._username = e, this.currentState = l.IN_PROGRESS, void this.signaling.callRemoteFunction(s.RemoteFunction.loginStage2, e, t, n))
            }, e.prototype.generateOneTimeKey = function (e) {
                return this.currentState != l.IDLE ? void this.log.error("Login operation already in progress") : (this.currentState = l.IN_PROGRESS, void this.signaling.callRemoteFunction(s.RemoteFunction.loginGenerateOneTimeKey, e))
            }, e.prototype.username = function () {
                return this._username
            }, e.prototype.authorized = function () {
                return this._authorized
            }, e.prototype.onSignalingConnected = function () {
            }, e.prototype.onSignalingConnectionFailed = function (e) {
            }, e.prototype.onSignalingClosed = function () {
                this._authorized = !1, this._displayName = null, this._username = null
            }, e.prototype.onMediaConnectionFailed = function () {
            }, o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "setHandler", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "onLoginFailed", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "onLoginSuccesful", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "basicLogin", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "tokenLogin", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "tokenRefresh", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "loginUsingOneTimeKey", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "loginStage2", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "generateOneTimeKey", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "username", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "authorized", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "onSignalingConnected", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "onSignalingConnectionFailed", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "onSignalingClosed", null), o([i.LogManager.d_trace(i.LogCategory.AUTHENTICATOR)], e.prototype, "onMediaConnectionFailed", null), e
        }();
        t.Authenticator = u
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.Chat = "chat"] = "Chat"
        }(t.MsgService || (t.MsgService = {}));
        t.MsgService;
        !function (e) {
            e[e.createConversation = "createConversation"] = "createConversation", e[e.editConversation = "editConversation"] = "editConversation", e[e.removeConversation = "removeConversation"] = "removeConversation", e[e.joinConversation = "joinConversation"] = "joinConversation", e[e.leaveConversation = "leaveConversation"] = "leaveConversation", e[e.getConversation = "getConversation"] = "getConversation", e[e.getConversations = "getConversations"] = "getConversations", e[e.sendMessage = "sendMessage"] = "sendMessage", e[e.editMessage = "editMessage"] = "editMessage", e[e.removeMessage = "removeMessage"] = "removeMessage", e[e.typingMessage = "typingMessage"] = "typingMessage", e[e.editUser = "editUser"] = "editUser", e[e.getUser = "getUser"] = "getUser", e[e.getUsers = "getUsers"] = "getUsers", e[e.retransmitEvents = "retransmitEvents"] = "retransmitEvents", e[e.isRead = "isRead"] = "isRead", e[e.isDelivered = "isDelivered"] = "isDelivered", e[e.addParticipants = "addParticipants"] = "addParticipants", e[e.editParticipants = "editParticipants"] = "editParticipants", e[e.removeParticipants = "removeParticipants"] = "removeParticipants", e[e.addModerators = "addModerators"] = "addModerators", e[e.removeModerators = "removeModerators"] = "removeModerators", e[e.subscribe = "subscribe"] = "subscribe", e[e.unSubscribe = "unSubscribe"] = "unSubscribe", e[e.setStatus = "setStatus"] = "setStatus"
        }(t.MsgAction || (t.MsgAction = {}));
        t.MsgAction;
        !function (e) {
            e[e.onCreateConversation = "onCreateConversation"] = "onCreateConversation", e[e.onEditConversation = "onEditConversation"] = "onEditConversation", e[e.onRemoveConversation = "onRemoveConversation"] = "onRemoveConversation", e[e.onJoinConversation = "onJoinConversation"] = "onJoinConversation", e[e.onLeaveConversation = "onLeaveConversation"] = "onLeaveConversation", e[e.onGetConversation = "onGetConversation"] = "onGetConversation", e[e.onSendMessage = "onSendMessage"] = "onSendMessage", e[e.onEditMessage = "onEditMessage"] = "onEditMessage", e[e.onRemoveMessage = "onRemoveMessage"] = "onRemoveMessage", e[e.onTyping = "onTyping"] = "onTyping", e[e.onRetransmitEvents = "onRetransmitEvents"] = "onRetransmitEvents", e[e.onEditUser = "onEditUser"] = "onEditUser", e[e.onGetUser = "onGetUser"] = "onGetUser", e[e.onError = "onError"] = "onError", e[e.isRead = "isRead"] = "isRead", e[e.isDelivered = "isDelivered"] = "isDelivered", e[e.onSubscribe = "onSubscribe"] = "onSubscribe", e[e.onUnSubscribe = "onUnSubscribe"] = "onUnSubscribe", e[e.onSetStatus = "onSetStatus"] = "onSetStatus"
        }(t.MsgEvent || (t.MsgEvent = {}));
        t.MsgEvent
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(1), i = n(13), a = n(3), s = function () {
            function e() {
                var t = this;
                if (e.instance)throw new Error("Error - use Client.getMessagingInstance()");
                this.eventListeners = [], this.query = [], setInterval(function () {
                    t.updateQuery()
                }, 220)
            }

            return e.prototype.handleWsData = function (e) {
                var t = ["onCreateConversation", "onEditConversation", "onRemoveConversation", "onJoinConversation", "onLeaveConversation", "onGetConversation", "onSendMessage", "onEditMessage", "onRemoveMessage", "onTyping", "onRetransmitEvents", "onEditUser", "onGetUser", "isRead", "isDelivered", "onError", "onSubscribe", "onUnSubscribe", "onSetStatus"];
                if (t.indexOf(e.event) == -1)throw new Error("Unknown messaging event " + e.event + " with payload " + JSON.stringify(e.payload));
                this.dispatchEvent(e.event, e)
            }, e.get = function () {
                return e.instance = e.instance || new e, e.instance
            }, e.prototype.sendPayload = function (e, t) {
                var n = {service: i.MsgService.Chat, event: e, payload: t};
                return this.query.push(n), !0
            }, e.prototype.updateQuery = function () {
                if (this.query.length > 5 && r.LogManager.get().writeMessage(r.LogCategory.MESSAGING, "Rate limit reached", r.LogLevel.ERROR, this.query.length + " messages in query"), this.query.length) {
                    var e = this.query.splice(0, 1);
                    a.VoxSignaling.get().sendRaw(e[0])
                }
            }, e.prototype.addEventListener = function (e, t) {
                "undefined" == typeof this.eventListeners[e] && (this.eventListeners[e] = []), this.eventListeners[e].push(t)
            }, e.prototype.removeEventListener = function (e, t) {
                if ("undefined" != typeof this.eventListeners[e] && "function" == typeof t)for (var n = 0; n < this.eventListeners[e].length; n++) {
                    if (this.eventListeners[e][n] == t) {
                        this.eventListeners[e].splice(n, 1);
                        break
                    }
                    this.eventListeners[e] = []
                }
            }, e.prototype.dispatchEvent = function (e, t) {
                if ("undefined" != typeof this.eventListeners[e])for (var n = 0; n < this.eventListeners[e].length; n++)"function" == typeof this.eventListeners[e][n] && this.eventListeners[e][n](t.payload, t.seq)
            }, e.prototype.on = function (e, t) {
                this.addEventListener(e, t)
            }, e.prototype.off = function (e, t) {
                this.removeEventListener(e, t)
            }, o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "handleWsData", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "sendPayload", null), e
        }();
        t.MsgSignaling = s
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.loginFailed = "loginFailed"] = "loginFailed", e[e.loginSuccessful = "loginSuccessful"] = "loginSuccessful", e[e.handleError = "handleError"] = "handleError", e[e.onPCStats = "__onPCStats"] = "onPCStats", e[e.handleIncomingConnection = "handleIncomingConnection"] = "handleIncomingConnection",
                e[e.handleConnectionConnected = "handleConnectionConnected"] = "handleConnectionConnected", e[e.handleConnectionDisconnected = "handleConnectionDisconnected"] = "handleConnectionDisconnected", e[e.handleRingOut = "handleRingOut"] = "handleRingOut", e[e.startEarlyMedia = "startEarlyMedia"] = "startEarlyMedia", e[e.stopRinging = "stopRinging"] = "stopRinging", e[e.handleConnectionFailed = "handleConnectionFailed"] = "handleConnectionFailed", e[e.handleSIPInfo = "handleSIPInfo"] = "handleSIPInfo", e[e.handleSipEvent = "handleSipEvent"] = "handleSipEvent", e[e.handleTransferStarted = "handleTransferStarted"] = "handleTransferStarted", e[e.handleTransferComplete = "handleTransferComplete"] = "handleTransferComplete", e[e.handleTransferFailed = "handleTransferFailed"] = "handleTransferFailed", e[e.handleReInvite = "handleReInvite"] = "handleReInvite", e[e.handleAcceptReinvite = "handleAcceptReinvite"] = "handleAcceptReinvite", e[e.handleRejectReinvite = "handleRejectReinvite"] = "handleRejectReinvite", e[e.createPC = "__createPC"] = "createPC", e[e.destroyPC = "__destroyPC"] = "destroyPC", e[e.connectionSuccessful = "__connectionSuccessful"] = "connectionSuccessful", e[e.connectionFailed = "__connectionFailed"] = "connectionFailed", e[e.createConnection = "__createConnection"] = "createConnection", e[e.pong = "__pong"] = "pong", e[e.increaseGain = "increaseGain"] = "increaseGain", e[e.handlePreFlightCheckResult = "handlePreFlightCheckResult"] = "handlePreFlightCheckResult", e[e.handleVoicemail = "handleVoicemail"] = "handleVoicemail", e[e.onCallRemoteFunctionError = "onCallRemoteFunctionError"] = "onCallRemoteFunctionError", e[e.refreshOauthTokenFailed = "refreshOauthTokenFailed"] = "refreshOauthTokenFailed", e[e.refreshOauthTokenSuccessful = "refreshOauthTokenSuccessful"] = "refreshOauthTokenSuccessful"
        }(t.RemoteEvent || (t.RemoteEvent = {}));
        t.RemoteEvent
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.Connected = "Connected"] = "Connected", e[e.Disconnected = "Disconnected"] = "Disconnected", e[e.Failed = "Failed"] = "Failed", e[e.ProgressToneStart = "ProgressToneStart"] = "ProgressToneStart", e[e.ProgressToneStop = "ProgressToneStop"] = "ProgressToneStop", e[e.MessageReceived = "onSendMessage"] = "MessageReceived", e[e.InfoReceived = "InfoReceived"] = "InfoReceived", e[e.TransferComplete = "TransferComplete"] = "TransferComplete", e[e.TransferFailed = "TransferFailed"] = "TransferFailed", e[e.ICETimeout = "ICETimeout"] = "ICETimeout", e[e.RTCStatsReceived = "RTCStatsReceived"] = "RTCStatsReceived", e[e.MediaElementCreated = "MediaElementCreated"] = "MediaElementCreated", e[e.VideoPlaybackStarted = "VideoPlaybackStarted"] = "VideoPlaybackStarted", e[e.ICECompleted = "ICECompleted"] = "ICECompleted", e[e.Updated = "Updated"] = "Updated", e[e.PendingUpdate = "PendingUpdate"] = "PendingUpdate", e[e.UpdateFailed = "UpdateFailed"] = "UpdateFailed"
        }(t.CallEvents || (t.CallEvents = {}));
        t.CallEvents
    }, function (e, t, n) {
        "use strict";
        var o = n(1);
        !function (e) {
            e[e.multiplex = "multiplex"] = "multiplex", e[e.audio = "audio"] = "audio", e[e.video = "video"] = "video", e[e.screen = "screen"] = "screen", e[e.data = "data"] = "data", e[e.unbundled = "unbundled"] = "unbundled"
        }(t.CallstatsIoFabricUsage || (t.CallstatsIoFabricUsage = {}));
        t.CallstatsIoFabricUsage;
        !function (e) {
            e[e.fabricHold = "fabricHold"] = "fabricHold", e[e.fabricResume = "fabricResume"] = "fabricResume", e[e.audioMute = "audioMute"] = "audioMute", e[e.audioUnmute = "audioUnmute"] = "audioUnmute", e[e.videoPause = "videoPause"] = "videoPause", e[e.videoResume = "videoResume"] = "videoResume", e[e.fabricTerminated = "fabricTerminated"] = "fabricTerminated", e[e.screenShareStart = "screenShareStart"] = "screenShareStart", e[e.screenShareStop = "screenShareStop"] = "screenShareStop", e[e.dominantSpeaker = "dominantSpeaker"] = "dominantSpeaker", e[e.activeDeviceList = "activeDeviceList"] = "activeDeviceList"
        }(t.CallstatsIoFabricEvent || (t.CallstatsIoFabricEvent = {}));
        t.CallstatsIoFabricEvent;
        !function (e) {
            e[e.getUserMedia = "getUserMedia"] = "getUserMedia", e[e.createOffer = "createOffer"] = "createOffer", e[e.createAnswer = "createAnswer"] = "createAnswer", e[e.setLocalDescription = "setLocalDescription"] = "setLocalDescription", e[e.setRemoteDescription = "setRemoteDescription"] = "setRemoteDescription", e[e.addIceCandidate = "addIceCandidate"] = "addIceCandidate", e[e.iceConnectionFailure = "iceConnectionFailure"] = "iceConnectionFailure", e[e.signalingError = "signalingError"] = "signalingError", e[e.applicationLog = "applicationLog"] = "applicationLog"
        }(t.CallstatsioWrtcFuncNames || (t.CallstatsioWrtcFuncNames = {}));
        var r = (t.CallstatsioWrtcFuncNames, function () {
            function e(e) {
                this._params = e, this.inited = !1, this.pendingFabric = [];
                var t = window;
                "undefined" != typeof t.callstats && (this.callstats = new t.callstats(null, t.io))
            }

            return e.isModuleEnabled = function () {
                return e.moduleEnabled
            }, e.get = function (t) {
                var n = window;
                return "undefined" != typeof n.callstats && (e.moduleEnabled = !0), "undefined" == typeof e.instance && (e.instance = new e(t)), "undefined" != typeof t && (e.instance._params = t), e.instance
            }, e.prototype.init = function (t) {
                var n = this;
                return !!e.moduleEnabled && (o.LogManager.get().writeMessage(o.LogCategory.UTILS, "[CallstatsIo]", o.LogLevel.INFO, " Callstats.io SDK initialization start"), this.callstats.initialize(this._params.AppID, this._params.AppSecret, t, function () {
                        o.LogManager.get().writeMessage(o.LogCategory.UTILS, "[CallstatsIo]", o.LogLevel.INFO, " Callstats.io SDK initialization successful"), n.inited = !0, n.pendingFabric.map(function (e) {
                            n.callstats.addNewFabric(e.pc, e.remoteUser, e.fabricUsage, e.callID)
                        })
                    }, function () {
                    }, this.packParams()), !0)
            }, e.prototype.packParams = function () {
                var e = {};
                return this._params.disableBeforeUnloadHandler && (e.disableBeforeUnloadHandler = this._params.disableBeforeUnloadHandler), this._params.applicationVersion && (e.applicationVersion = this._params.applicationVersion), e
            }, e.prototype.addNewFabric = function (t, n, r, i) {
                return !!e.moduleEnabled && void(this.inited ? (o.LogManager.get().writeMessage(o.LogCategory.UTILS, "[CallstatsIo]", o.LogLevel.INFO, " Callstats.io addNewFabric"), this.callstats.addNewFabric(t, n, r, i)) : this.pendingFabric.push({
                        pc: t,
                        remoteUser: n,
                        fabricUsage: r,
                        callID: i
                    }))
            }, e.prototype.sendFabricEvent = function (t, n, o) {
                return !!e.moduleEnabled && void this.callstats.sendFabricEvent(t, n, o)
            }, e.prototype.reportError = function (t, n, o, r, i, a) {
                return !!e.moduleEnabled && void this.callstats.reportError(t, n, o, r, i, a)
            }, e.moduleEnabled = !1, e
        }());
        t.CallstatsIo = r
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(4), i = n(1), a = function () {
            function e() {
                this.videoElements = new Array, this.audioElements = new Array, this._defaultSinkId = null, this.log = i.LogManager.get().createLogger(i.LogCategory.RTC, "Renderer")
            }

            return e.get = function () {
                return this.inst || (this.inst = new e), this.inst
            }, Object.defineProperty(e.prototype, "defaultContainer", {
                get: function () {
                    return this._defaultContainer
                }, set: function (e) {
                    this._defaultContainer = e
                }, enumerable: !0, configurable: !0
            }), e.prototype.getElement = function (e, t, n) {
                var o = n || this._defaultContainer || document.body;
                if (document.getElementById(e)) {
                    var r = document.getElementById(e);
                    o && r.parentElement.removeChild(r)
                }
                var i;
                return i = document.createElement(t ? "video" : "audio"), null !== this._defaultSinkId && i.setSinkId(this._defaultSinkId), t ? (this.videoElements.push(i), i.width = 400, i.height = 300) : this.audioElements.push(i), i.id = e, o && o.appendChild(i), i
            }, e.prototype.getElementId = function (e, t) {
            }, e.prototype.renderStream = function (e, t) {
                var n = this.getElement(e.id, e.getVideoTracks().length > 0, t);
                return r.default.attachMedia(e, n), n
            }, e.prototype.setPlaybackVolume = function (e) {
                for (var t in this.audioElements)this.audioElements[t].volume = e;
                for (var t in this.videoElements)this.videoElements[t].volume = e
            }, e.prototype.releaseElement = function (e) {
                e && (e.id = "", "undefined" != typeof e.parentElement ? e.parentElement.removeChild(e) : e.parentNode.removeChild(e), r.default.detachMedia(e))
            }, e.prototype.setDefaultSinkId = function (e) {
                this._defaultSinkId = e
            }, o([i.LogManager.d_trace(i.LogCategory.USERMEDIA)], e.prototype, "getElement", null), o([i.LogManager.d_trace(i.LogCategory.USERMEDIA)], e.prototype, "getElementId", null), o([i.LogManager.d_trace(i.LogCategory.USERMEDIA)], e.prototype, "renderStream", null), o([i.LogManager.d_trace(i.LogCategory.USERMEDIA)], e.prototype, "setPlaybackVolume", null), o([i.LogManager.d_trace(i.LogCategory.USERMEDIA)], e.prototype, "releaseElement", null), e
        }();
        t.Renderer = a
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.onCreateConversation = "onCreateConversation"] = "onCreateConversation", e[e.onEditConversation = "onEditConversation"] = "onEditConversation", e[e.onRemoveConversation = "onRemoveConversation"] = "onRemoveConversation", e[e.onGetConversation = "onGetConversation"] = "onGetConversation", e[e.onSendMessage = "onSendMessage"] = "onSendMessage", e[e.onEditMessage = "onEditMessage"] = "onEditMessage", e[e.onRemoveMessage = "onRemoveMessage"] = "onRemoveMessage", e[e.onTyping = "Typing"] = "onTyping", e[e.onEditUser = "onEditUser"] = "onEditUser", e[e.onGetUser = "onGetUser"] = "onGetUser", e[e.onError = "onError"] = "onError", e[e.onRetransmitEvents = "onRetransmitEvents"] = "onRetransmitEvents", e[e.isRead = "isRead"] = "isRead", e[e.isDelivered = "isDelivered"] = "isDelivered", e[e.onSubscribe = "onSubscribe"] = "onSubscribe", e[e.onUnSubscribe = "onUnSubscribe"] = "onUnSubscribe", e[e.onSetStatus = "onSetStatus"] = "onSetStatus"
        }(t.MessagingEvents || (t.MessagingEvents = {}));
        t.MessagingEvents
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(1), i = n(3), a = n(18), s = n(8), c = n(11), d = n(2);
        !function (e) {
            e[e.IDLE = 0] = "IDLE", e[e.REMOTEOFFER = 1] = "REMOTEOFFER", e[e.LOCALOFFER = 2] = "LOCALOFFER", e[e.ESTABLISHING = 3] = "ESTABLISHING", e[e.ESTABLISHED = 4] = "ESTABLISHED", e[e.CLOSED = 5] = "CLOSED"
        }(t.PeerConnectionState || (t.PeerConnectionState = {}));
        var l = t.PeerConnectionState;
        !function (e) {
            e[e.CLIENT_SERVER_V1 = 0] = "CLIENT_SERVER_V1", e[e.P2P = 1] = "P2P"
        }(t.PeerConnectionMode || (t.PeerConnectionMode = {}));
        var u = t.PeerConnectionMode, g = function () {
            function e(e, t, n) {
                this.id = e, this.mode = t, this.videoEnabled = n, this.SEND_CANDIDATE_DELAY = 1e3, this.onHold = !1, this.log = r.LogManager.get().createLogger(r.LogCategory.RTC, "PeerConnection " + e), this.state = l.IDLE, this.log.info("Created PC"), this.renderers = [], this.pendingCandidates = []
            }

            return e.prototype.getId = function () {
                return this.id
            }, e.prototype.setState = function (e) {
                this.log.info("Transmitting from " + l[this.state] + " to " + l[e]), this.state = e
            }, e.prototype.getState = function () {
                return this.state
            }, e.prototype.processRemoteAnswer = function (e, t) {
                return this.log.info("Called processRemoteAnswer"), this.state = l.ESTABLISHING, this._processRemoteAnswer(e, t)
            }, e.prototype.getLocalOffer = function () {
                return this.state === l.IDLE || this.state === l.ESTABLISHED || l.LOCALOFFER ? (this.log.info("Called getLocalOffer"), this.state = l.LOCALOFFER, this._getLocalOffer()) : (this.log.error("Called getLocalOffer in state " + l[this.state]), new Promise(function (e, t) {
                    t("Invalid state")
                }))
            }, e.prototype.getLocalAnswer = function () {
                return this._getLocalAnswer()
            }, e.prototype.processRemoteOffer = function (e) {
                return this.state === l.IDLE || this.state === l.ESTABLISHED ? (this.log.info("Called processRemoteOffer"), this.state = l.ESTABLISHING, this._processRemoteOffer(e)) : (this.log.error("Called processRemoteOffer in state " + l[this.state]), new Promise(function (e, t) {
                    t("Invalid state")
                }))
            }, e.prototype.close = function () {
                this.log.info("Called close"), this._close(), this.renderers.forEach(function (e) {
                    return a.Renderer.get().releaseElement(e)
                })
            }, e.prototype.addRemoteCandidate = function (e, t) {
                return this.log.info("Called addRemoteCandidate"), this._addRemoteCandidate(e, t)
            }, e.prototype.sendLocalCandidateToPeer = function (e, t) {
                switch (this._call = s.CallManager.get().calls[this.id], this.mode) {
                    case u.P2P:
                        s.CallManager.get().calls[this.id].sendInfo(c.Constants.P2P_SPD_FRAG_MIME_TYPE, JSON.stringify([[t, e]]), {});
                        break;
                    case u.CLIENT_SERVER_V1:
                        i.VoxSignaling.get().callRemoteFunction(d.RemoteFunction.addCandidate, this.id, e, t)
                }
            }, e.prototype.bindLocalMedia = function (e) {
                if ("undefined" != typeof this._localStream && this._unbindLocalMegia(), "undefined" != typeof e) {
                    var t = new MediaStream(e.getTracks().map(function (e) {
                        return "undefined" != typeof e.clone ? e.clone() : e
                    }));
                    this._localStream = t, this._bindLocalMedia()
                }
            }, Object.defineProperty(e.prototype, "localStream", {
                get: function () {
                    return this._localStream
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "remoteStreams", {
                get: function () {
                    return this._remoteStreams
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "videoRenderer", {
                get: function () {
                    var e = null;
                    return this.renderers.forEach(function (t) {
                        "video" === t.tagName.toLowerCase() && (e = t)
                    }), e
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "audioRenderer", {
                get: function () {
                    return this.renderers.forEach(function (e) {
                        if ("audio" === e.tagName.toLowerCase())return e
                    }), null
                }, enumerable: !0, configurable: !0
            }), e.prototype.handleReinvite = function (e, t, n) {
                return this._handleReinvite(e, t, n)
            }, e.prototype.addCandidateToSend = function (e, t) {
                this.pendingCandidates.push([t, e]), this.canSendCandidates && this.startCandidateSendTimer()
            }, e.prototype.startCandidateSendTimer = function () {
                var e = this;
                null !== this.candidateSendTimer && "undefined" != typeof this.candidateSendTimer || (this.candidateSendTimer = setTimeout(function () {
                    e.candidateSendTimer = null, e.pendingCandidates.length > 0 && s.CallManager.get().calls[e.id].sendInfo(c.Constants.P2P_SPD_FRAG_MIME_TYPE, JSON.stringify(e.pendingCandidates), {}), e.pendingCandidates = []
                }, this.SEND_CANDIDATE_DELAY))
            }, e.prototype.canStartSendingCandidates = function () {
                this.canSendCandidates = !0, this.startCandidateSendTimer()
            }, e.prototype.sendDTMF = function (e) {
                var t = 500, n = 50;
                this._sendDTMF(e, t, n)
            }, e.prototype.hold = function (e) {
                this._hold(e)
            }, e.prototype.setVideoEnabled = function (e) {
                this.videoEnabled = e
            }, e.prototype.updateRenderersSink = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    t.sinkId = e;
                    for (var r = [], i = 0, a = t.renderers; i < a.length; i++) {
                        var s = a[i];
                        r.push(s.setSinkId(e))
                    }
                    Promise.all(r).then(function () {
                        n()
                    }, o)
                })
            }, e.prototype.getDirections = function () {
                return this._getDirections()
            }, e.prototype.setHoldKey = function (e) {
                this.onHold = e
            }, o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "setState", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "getState", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "processRemoteAnswer", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "getLocalOffer", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "getLocalAnswer", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "processRemoteOffer", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "close", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "addRemoteCandidate", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "sendLocalCandidateToPeer", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "bindLocalMedia", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "addCandidateToSend", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "startCandidateSendTimer", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "canStartSendingCandidates", null), o([r.LogManager.d_trace(r.LogCategory.RTC)], e.prototype, "hold", null), e
        }();
        t.PeerConnection = g
    }, function (e, t, n) {
        "use strict";
        var o = n(3), r = n(2), i = function () {
            function e(e) {
                this._id = e
            }

            return e.prototype.insertDTMF = function (e, t, n) {
                var o = this;
                e.split("").forEach(function (e) {
                    return o.sendKey(e)
                })
            }, e.prototype.sendKey = function (e) {
                var t;
                t = "*" == e ? 10 : "#" == e ? 11 : parseInt(e), (t >= 0 || t <= 11) && o.VoxSignaling.get().callRemoteFunction(r.RemoteFunction.sendDTMF, this._id, t)
            }, e
        }();
        t.SignalingDTMFSender = i
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e() {
                this.audioCache = {}, this.videoCache = {}
            }

            return e.get = function () {
                return this.inst || (this.inst = new e), this.inst
            }, e.prototype.getTrack = function (e, t) {
                var n = this;
                return new Promise(function (o, r) {
                    switch ("" == e && (e = "def"), t) {
                        case"audio":
                            o(n.audioCache[e]);
                            break;
                        case"video":
                            o(n.videoCache[e]);
                            break;
                        default:
                            o()
                    }
                })
            }, e.prototype.setTrack = function (e, t, n) {
                switch ("" == e && (e = "def"), t) {
                    case"audio":
                        this.audioCache[e] = n;
                        break;
                    case"video":
                        this.videoCache[e] = n;
                        break;
                    default:
                        return
                }
            }, e
        }();
        t.MediaCache = n
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(28), i = n(14), a = n(13), s = n(1), c = function () {
            function e(e, t) {
                this._text = e, this._payload = t, this._uuid = (new r.GUID).toString()
            }

            return e.prototype.sendTo = function (e) {
                this._conversation = e.uuid, i.MsgSignaling.get().sendPayload(a.MsgAction.sendMessage, this.getPayload())
            }, e.prototype.getPayload = function () {
                var e = {uuid: this._uuid, text: this._text, conversation: this._conversation};
                return "undefined" != typeof this._payload ? e.payload = this._payload : e.payload = [], e
            }, Object.defineProperty(e.prototype, "uuid", {
                get: function () {
                    return this._uuid
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "conversation", {
                get: function () {
                    return this._conversation
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "text", {
                get: function () {
                    return this._text
                }, set: function (e) {
                    this._text = e
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "payload", {
                get: function () {
                    return this._payload
                }, set: function (e) {
                    this._payload = e
                }, enumerable: !0, configurable: !0
            }), e.prototype.update = function () {
                i.MsgSignaling.get().sendPayload(a.MsgAction.editMessage, this.getPayload())
            }, e.prototype.remove = function () {
                i.MsgSignaling.get().sendPayload(a.MsgAction.removeMessage, {
                    uuid: this._uuid,
                    conversation: this.conversation
                })
            }, Object.defineProperty(e.prototype, "seq", {
                get: function () {
                    return this._seq
                }, enumerable: !0, configurable: !0
            }), Object.defineProperty(e.prototype, "sender", {
                get: function () {
                    return this._sender
                }, enumerable: !0, configurable: !0
            }), e.createFromBus = function (t, n) {
                return new Promise(function (o, r) {
                    var i = new e(t.text, t.payload);
                    i._uuid = t.uuid, i._conversation = t.conversation, i._sender = t.sender, i._seq = n, o(i)
                })
            }, e.createFromCache = function (t) {
                var n = new e(t.text, t.payload);
                return n._uuid = t.uuid, n._conversation = t.conversation, n._sender = t.sender, n._seq = t.seq, n
            }, e.prototype.toCache = function () {
                return {
                    seq: this._seq,
                    uuid: this._uuid,
                    text: this._text,
                    payload: this._payload,
                    conversation: this._conversation,
                    sender: this._sender
                }
            }, o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "sendTo", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "getPayload", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "update", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "remove", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "toCache", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e, "createFromBus", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e, "createFromCache", null), e
        }();
        t.Message = c
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(1), i = n(26), a = n(14), s = n(13), c = n(19), d = n(27), l = n(12), u = n(23), g = function () {
            function e() {
                var t = this;
                if (e.instance)throw new Error("Error - use Client.getIM()");
                this.eventListeners = {}, this.signalling = a.MsgSignaling.get(), this.cm = d.ConversationManager.get(), this.signalling.addEventListener(s.MsgEvent.onError, function (e) {
                    t.dispatchEvent(c.MessagingEvents.onError, e)
                }), d.ConversationManager.get(), this.signalling.addEventListener(s.MsgEvent.onEditUser, function (e) {
                    var n = {
                        user: {
                            conversationsList: e.conversations_list,
                            customData: e.custom_data,
                            privateCustomData: e.private_custom_data,
                            userId: e.user_id
                        }
                    };
                    t.dispatchEvent(c.MessagingEvents.onEditUser, n)
                }), this.signalling.addEventListener(s.MsgEvent.onGetUser, function (e) {
                    var n = {
                        user: {
                            conversationsList: e.conversations_list,
                            customData: e.custom_data,
                            privateCustomData: e.private_custom_data,
                            userId: e.user_id
                        }
                    };
                    t.dispatchEvent(c.MessagingEvents.onGetUser, n)
                }), this.signalling.addEventListener(s.MsgEvent.onSubscribe, function (e) {
                    t.dispatchEvent(c.MessagingEvents.onSubscribe, {users: e.users})
                }), this.signalling.addEventListener(s.MsgEvent.onUnSubscribe, function (e) {
                    t.dispatchEvent(c.MessagingEvents.onUnSubscribe, {users: e.users})
                }), this.signalling.addEventListener(s.MsgEvent.onSetStatus, function (e) {
                    t.dispatchEvent(c.MessagingEvents.onSetStatus, {
                        userId: e.user_id,
                        online: e.online,
                        timstamp: new Date(e.timstamp)
                    })
                }), this.awaitPromiseList = []
            }

            return e.getInstance = function () {
                return e.instance = e.instance || new e, e.instance
            }, e.prototype.createConversation = function (e, t, n, o, r) {
                this.cm.createConversation(e, t, n, o, r)
            }, e.prototype.getConversation = function (e) {
                this.cm.getConversation(e)
            }, e.prototype.getConversations = function (e) {
                return e.length > 30 ? void r.LogManager.get().writeMessage(r.LogCategory.MESSAGING, "Rate limit", r.LogLevel.ERROR, "you can get maximum 30 conversation in one getConversations") : this.cm.getConversations(e)
            }, e.prototype.getRawConversations = function (e) {
                return this.cm.getConversations(e)
            }, e.prototype.removeConversation = function (e) {
                this.cm.removeConversation(e)
            }, e.prototype.joinConversation = function (e) {
                this.signalling.sendPayload(s.MsgAction.joinConversation, {uuid: e})
            }, e.prototype.leaveConversation = function (e) {
                this.signalling.sendPayload(s.MsgAction.leaveConversation, {uuid: e})
            }, e.prototype.getUser = function (e) {
                this.signalling.sendPayload(s.MsgAction.getUser, {user_id: e})
            }, e.prototype.getMe = function () {
                return d.ConversationManager.extractUserName(l.Authenticator.get().username())
            }, e.prototype.editUser = function (e, t) {
                var n = {user_id: d.ConversationManager.extractUserName(l.Authenticator.get().username())};
                e && (n.custom_data = e), t && (n.private_custom_data = t), this.signalling.sendPayload(s.MsgAction.editUser, n)
            }, e.prototype.getUsers = function (e) {
                this.signalling.sendPayload(s.MsgAction.getUsers, {users: e})
            }, e.prototype.addEventListener = function (e, t) {
                "undefined" == typeof this.eventListeners[e] && (this.eventListeners[e] = []), this.eventListeners[e].push(t)
            }, e.prototype.removeEventListener = function (e, t) {
                if ("undefined" != typeof this.eventListeners[e])if ("function" == typeof t) {
                    for (var n = 0; n < this.eventListeners[e].length; n++)if (this.eventListeners[e][n] === t) {
                        this.eventListeners[e].splice(n, 1);
                        break
                    }
                } else this.eventListeners[e] = []
            }, e.prototype.dispatchEvent = function (e, t) {
                if (t.name = c.MessagingEvents[e], "undefined" != typeof this.eventListeners[e] && this.eventListeners[e].forEach(function (e) {
                        "function" == typeof e && e(t)
                    }), "undefined" != typeof this.awaitPromiseList[e] && 0 != this.awaitPromiseList[e].length) {
                    var n = this.awaitPromiseList[e].splice(0, 1);
                    n.resolve(t), window.clearTimeout(n.expire)
                }
            }, e.prototype.on = function (e, t) {
                this.addEventListener(e, t)
            }, e.prototype.off = function (e, t) {
                this.removeEventListener(e, t)
            }, e.prototype.registerPromise = function (e, t, n) {
                "undefined" == typeof this.awaitPromiseList[e] && (this.awaitPromiseList[e] = []), this.awaitPromiseList[e].push({
                    resolve: t,
                    reject: n,
                    expire: setTimeout(function () {
                        n()
                    }, 2e4)
                })
            }, e.prototype.createConversationFromCache = function (e) {
                return "undefined" == typeof e ? null : i.Conversation.createFromCache(e)
            }, e.prototype.createMessageFromCache = function (e) {
                return "undefined" == typeof e ? null : u.Message.createFromCache(e)
            }, e.prototype.subscribe = function (e) {
                this.signalling.sendPayload(s.MsgAction.subscribe, {users: e})
            }, e.prototype.unSubscribe = function (e) {
                this.signalling.sendPayload(s.MsgAction.subscribe, {users: e})
            }, e.prototype.setPresence = function (e) {
                this.signalling.sendPayload(s.MsgAction.setStatus, {online: e, timestamp: Date.now() / 1e3 | 0})
            }, o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "createConversation", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "getConversation", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "getConversations", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "getRawConversations", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "removeConversation", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "joinConversation", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "leaveConversation", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "getUser", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "getMe", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "editUser", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "getUsers", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "addEventListener", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "removeEventListener", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "dispatchEvent", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "on", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "off", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "registerPromise", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "createConversationFromCache", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "createMessageFromCache", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "subscribe", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "unSubscribe", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e.prototype, "setPresence", null), o([r.LogManager.d_trace(r.LogCategory.MESSAGING)], e, "getInstance", null), e
        }();
        t.Messenger = g
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.SDKReady = "SDKReady"] = "SDKReady", e[e.ConnectionEstablished = "ConnectionEstablished"] = "ConnectionEstablished", e[e.ConnectionFailed = "ConnectionFailed"] = "ConnectionFailed", e[e.ConnectionClosed = "ConnectionClosed"] = "ConnectionClosed", e[e.AuthResult = "AuthResult"] = "AuthResult", e[e.RefreshTokenResult = "RefreshTokenResult"] = "RefreshTokenResult", e[e.PlaybackFinished = "PlaybackFinished"] = "PlaybackFinished", e[e.MicAccessResult = "MicAccessResult"] = "MicAccessResult", e[e.IncomingCall = "IncomingCall"] = "IncomingCall", e[e.SourcesInfoUpdated = "SourcesInfoUpdated"] = "SourcesInfoUpdated", e[e.NetStatsReceived = "NetStatsReceived"] = "NetStatsReceived"
        }(t.Events || (t.Events = {}));
        t.Events
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                    var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                    return i > 3 && a && Object.defineProperty(t, n, a), a
                }, r = n(28), i = n(27), a = n(19), s = n(1), c = n(23), d = n(14), l = n(13),
            u = a.MessagingEvents.onEditConversation, g = n(24), p = function () {
                function e(e, t, n, o) {
                    this._distinct = t, this._enablePublicJoin = n, this._participants = e, this._customData = o
                }

                return Object.defineProperty(e.prototype, "lastRead", {
                    get: function () {
                        return this._lastRead
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "uuid", {
                    get: function () {
                        return this._uuid
                    }, set: function (e) {
                        throw Error("You can't change UUID for conversation.")
                    }, enumerable: !0, configurable: !0
                }), e.prototype.getPayload = function () {
                    if ("undefined" == typeof this._uuid)throw Error("You must create UUID with createUUID() function!");
                    var e = {uuid: this._uuid, participants: this.prepareParticipants(this._participants)};
                    return "undefined" != typeof this._title ? e.title = this._title : e.title = "", "undefined" != typeof this._moderators ? e.moderators = this._moderators : e.moderators = [], "undefined" != typeof this._lastRead && (e.last_readed = this._lastRead), "undefined" != typeof this._distinct ? e.distinct = this._distinct : e.distinct = !1, "undefined" != typeof this._enablePublicJoin ? e.enable_public_join = this._enablePublicJoin : e.enable_public_join = !1, "undefined" != typeof this._customData ? e.custom_data = this._customData : e.custom_data = {}, "undefined" != typeof this._createdAt && (e.created_at = this._createdAt), e
                }, e.prototype.getSimplePayload = function () {
                    if ("undefined" == typeof this._uuid)throw Error("You must create UUID with createUUID() function!");
                    return {
                        uuid: this._uuid,
                        title: "undefined" != typeof this._title ? this._title : "",
                        distinct: "undefined" != typeof this._distinct && this._distinct,
                        enable_public_join: "undefined" != typeof this._enablePublicJoin && this._enablePublicJoin,
                        custom_data: "undefined" != typeof this._customData ? this._customData : {}
                    }
                }, e.prototype.prepareParticipants = function (e) {
                    for (var t = [], n = 0, o = e; n < o.length; n++) {
                        var r = o[n];
                        if ("undefined" != typeof r.userId) {
                            var a = {user_id: i.ConversationManager.extractUserName(r.userId)};
                            a.can_write = "undefined" == typeof r.canWrite || r.canWrite, a.can_manage_participants = "undefined" != typeof r.canManageParticipants && r.canManageParticipants, t.push(a)
                        }
                    }
                    return t
                }, e.prototype.createUUID = function () {
                    if ("undefined" != typeof this._uuid)throw Error("UUID already created!");
                    this._uuid = (new r.GUID).toString()
                }, e.createFromBus = function (t, n) {
                    var o = new e([]);
                    return o._lastSeq = n, o._uuid = t.uuid, o._title = t.title, o._moderators = t.moderators, o._createdAt = t.created_at, o._lastRead = t.last_read, o._distinct = t.distinct, o._enablePublicJoin = t.enable_public_join, t.participants && (o._participants = t.participants.map(function (e) {
                        return {userId: e.user_id, canWrite: e.can_write, canManageParticipants: e.can_manage_participants}
                    })), t.custom_data && (o._customData = t.custom_data), o._lastUpdate = Date.now() / 1e3 | 0, o
                }, e.createFromCache = function (t) {
                    var n = new e([]);
                    return n._uuid = t.uuid, n._lastSeq = t.seq, n._lastUpdate = t.lastUpdate, n._title = t.title, n._moderators = t.moderators, n._createdAt = t.createdAt, n._lastRead = t.lastRead, n._distinct = t.distinct, n._enablePublicJoin = t.enablePublicJoin, n._participants = t.participants, n._customData = t.customData, n
                }, e.prototype.toCache = function () {
                    return {
                        uuid: this._uuid,
                        seq: this._lastSeq,
                        lastUpdate: this._lastUpdate,
                        moderators: this._moderators,
                        title: this._title,
                        createdAt: this._createdAt,
                        lastRead: this._lastRead,
                        distinct: this._distinct,
                        enablePublicJoin: this._enablePublicJoin,
                        participants: this._participants,
                        customData: this._customData
                    }
                }, Object.defineProperty(e.prototype, "title", {
                    get: function () {
                        return this._title
                    }, set: function (e) {
                        this._title = e
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "distinct", {
                    get: function () {
                        return this._distinct
                    }, set: function (e) {
                        this._distinct = e
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "enablePublicJoin", {
                    get: function () {
                        return this._enablePublicJoin
                    }, set: function (e) {
                        this._enablePublicJoin = e
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "customData", {
                    get: function () {
                        return this._customData
                    }, set: function (e) {
                        this._customData = e
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "moderators", {
                    get: function () {
                        return this._moderators
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "createdAt", {
                    get: function () {
                        return this._createdAt
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "participants", {
                    get: function () {
                        return this._participants
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "lastSeq", {
                    get: function () {
                        return this._lastSeq
                    }, enumerable: !0, configurable: !0
                }), Object.defineProperty(e.prototype, "lastUpdate", {
                    get: function () {
                        return this._lastUpdate
                    }, enumerable: !0, configurable: !0
                }), e.prototype.sendMessage = function (e, t) {
                    var n = new c.Message(e, t);
                    return n.sendTo(this), n
                }, e.prototype.typing = function () {
                    var e = this;
                    return !this._debounceLock && (setTimeout(function () {
                            e._debounceLock = !1
                        }, 1e4), this._debounceLock = !0, d.MsgSignaling.get().sendPayload(l.MsgAction.typingMessage, {conversation: this._uuid}), !0)
                }, e.prototype.markAsRead = function (e) {
                    d.MsgSignaling.get().sendPayload(l.MsgAction.isRead, {
                        conversation: this._uuid,
                        seq: e
                    }), this._lastRead = e
                }, e.prototype.markAsDelivered = function (e) {
                    d.MsgSignaling.get().sendPayload(l.MsgAction.isDelivered, {conversation: this._uuid, seq: e})
                }, e.prototype.remove = function () {
                    i.ConversationManager.get().removeConversation(this._uuid)
                }, e.prototype.update = function () {
                    i.ConversationManager.get().editConversation(this)
                }, e.prototype.addParticipants = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        0 == e.length && o(), d.MsgSignaling.get().sendPayload(l.MsgAction.addParticipants, {
                            uuid: t._uuid,
                            participants: t.prepareParticipants(e)
                        }), g.Messenger.getInstance().registerPromise(u, n, o)
                    })
                }, e.prototype.editParticipants = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        0 == e.length && o(), d.MsgSignaling.get().sendPayload(l.MsgAction.editParticipants, {
                            uuid: t._uuid,
                            participants: t.prepareParticipants(e)
                        }), g.Messenger.getInstance().registerPromise(u, n, o)
                    })
                }, e.prototype.removeParticipants = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        0 == e.length && o(), d.MsgSignaling.get().sendPayload(l.MsgAction.removeParticipants, {
                            uuid: t._uuid,
                            participants: e.map(function (e) {
                                if ("undefined" != typeof e.userId)return e.userId
                            })
                        }), g.Messenger.getInstance().registerPromise(u, n, o)
                    })
                }, e.prototype.addModerators = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        0 == e.length && o(), d.MsgSignaling.get().sendPayload(l.MsgAction.addModerators, {
                            uuid: t._uuid,
                            moderators: e
                        }), g.Messenger.getInstance().registerPromise(u, n, o)
                    })
                }, e.prototype.removeModerators = function (e) {
                    var t = this;
                    return new Promise(function (n, o) {
                        0 == e.length && o(), d.MsgSignaling.get().sendPayload(l.MsgAction.removeModerators, {
                            uuid: t._uuid,
                            moderators: e
                        }), g.Messenger.getInstance().registerPromise(u, n, o)
                    })
                }, e.prototype.retransmitEvents = function (e, t) {
                    e |= 0, t |= 0, d.MsgSignaling.get().sendPayload(l.MsgAction.retransmitEvents, {
                        uuid: this._uuid,
                        eventsFrom: e,
                        eventsTo: t
                    })
                }, e.prototype.updateSeq = function (e) {
                    e > this._lastSeq && (this._lastSeq = e), this._lastUpdate = Date.now() / 1e3 | 0
                }, o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "getPayload", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "getSimplePayload", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "prepareParticipants", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "createUUID", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "toCache", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "markAsRead", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "markAsDelivered", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "remove", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "update", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "addParticipants", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "editParticipants", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "removeParticipants", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "addModerators", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "removeModerators", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "retransmitEvents", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e.prototype, "updateSeq", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e, "createFromBus", null), o([s.LogManager.d_trace(s.LogCategory.MESSAGING)], e, "createFromCache", null), e
            }();
        t.Conversation = p
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(26), i = n(14), a = n(13), s = n(19), c = n(1), d = n(24), l = n(23), u = function () {
            function e() {
                var t = this;
                if (e.instance)throw new Error("Error - use ConversationManager.get()");
                this.signalling = i.MsgSignaling.get(), this.awaitingConversations = {}, this.signalling.addEventListener(a.MsgEvent.onEditConversation, function (e, n) {
                    t.resolveEvent(e, n, s.MessagingEvents.onEditConversation)
                }), this.signalling.addEventListener(a.MsgEvent.onGetConversation, function (e, n) {
                    t.resolveEvent(e, n, s.MessagingEvents.onGetConversation)
                }), this.signalling.addEventListener(a.MsgEvent.onRemoveConversation, function (e, n) {
                    t.resolveEvent(e, n, s.MessagingEvents.onRemoveConversation)
                }), this.signalling.addEventListener(a.MsgEvent.onCreateConversation, function (e, n) {
                    t.resolveEvent(e, n, s.MessagingEvents.onCreateConversation)
                }), this.signalling.addEventListener(a.MsgEvent.onSendMessage, function (e, n) {
                    t.resolveMessageEvent(e, n, s.MessagingEvents.onSendMessage)
                }), this.signalling.addEventListener(a.MsgEvent.onEditMessage, function (e, n) {
                    t.resolveMessageEvent(e, n, s.MessagingEvents.onEditMessage)
                }), this.signalling.addEventListener(a.MsgEvent.onRemoveMessage, function (e, n) {
                    t.resolveMessageEvent(e, n, s.MessagingEvents.onRemoveMessage)
                }), this.signalling.addEventListener(a.MsgEvent.isRead, function (e, t) {
                    d.Messenger.getInstance().dispatchEvent(s.MessagingEvents.isRead, {
                        name: s.MessagingEvents[s.MessagingEvents.isRead],
                        conversation: e.conversation,
                        userId: e.user_id,
                        timestamp: new Date(1e3 * e.timestamp),
                        seq: e.seq
                    })
                }), this.signalling.addEventListener(a.MsgEvent.isDelivered, function (e, t) {
                    d.Messenger.getInstance().dispatchEvent(s.MessagingEvents.isDelivered, {
                        name: s.MessagingEvents[s.MessagingEvents.isDelivered],
                        conversation: e.conversation,
                        userId: e.user_id,
                        timestamp: new Date(1e3 * e.timestamp),
                        seq: e.seq
                    })
                }), this.signalling.addEventListener(a.MsgEvent.onTyping, function (e, t) {
                    d.Messenger.getInstance().dispatchEvent(s.MessagingEvents.onTyping, {
                        name: s.MessagingEvents[s.MessagingEvents.onTyping],
                        conversation: e.conversation,
                        userId: e.user_id
                    })
                }), this.signalling.addEventListener(a.MsgEvent.onRetransmitEvents, function (e, t) {
                    d.Messenger.getInstance().dispatchEvent(s.MessagingEvents.onRetransmitEvents, {
                        events: e.map(function (e) {
                            if (e.event)return e.event.indexOf("Message") == -1 ? {
                                name: e.event,
                                conversation: r.Conversation.createFromBus(e.payload, e.seq)
                            } : {name: e.event, message: l.Message.createFromBus(e.payload, e.seq)}
                        })
                    })
                }), this._converasationList = []
            }

            return e.prototype.resolveEvent = function (e, t, n) {
                var o = r.Conversation.createFromBus(e, t);
                this.registerConversation(o), "undefined" != typeof o && o.updateSeq(t), d.Messenger.getInstance().dispatchEvent(n, {
                    name: s.MessagingEvents[n],
                    conversation: o
                }), n === s.MessagingEvents.onGetConversation && "undefined" != typeof this.awaitingConversations[o.uuid] && (this.awaitingConversations[o.uuid](o), delete this.awaitingConversations[o.uuid])
            }, e.prototype.resolveMessageEvent = function (e, t, n) {
                var o = this;
                l.Message.createFromBus(e, t).then(function (e) {
                    "undefined" != typeof o._converasationList[e.conversation] && o._converasationList[e.conversation].updateSeq(t), d.Messenger.getInstance().dispatchEvent(n, {
                        name: s.MessagingEvents[n],
                        message: e
                    })
                })
            }, e.get = function () {
                return e.instance = e.instance || new e, e.instance
            }, e.extractUserName = function (e) {
                var t = e.split("@");
                return t[1] = t[1].split(".").splice(0, 2).join("."), t.join("@")
            }, e.prototype.createConversation = function (e, t, n, o, i) {
                var s = new r.Conversation(e, n, o, i);
                s.title = t, s.createUUID(), this.signalling.sendPayload(a.MsgAction.createConversation, s.getPayload())
            }, e.prototype.registerConversation = function (e) {
                this._converasationList.filter(function (t) {
                    return t.uuid !== e.uuid
                }), this._converasationList.push(e)
            }, e.prototype.removeConversation = function (e) {
                this.signalling.sendPayload(a.MsgAction.removeConversation, {uuid: e})
            }, e.prototype.editConversation = function (e) {
                this.signalling.sendPayload(a.MsgAction.editConversation, e.getSimplePayload())
            }, e.prototype.getConversation = function (e) {
                this.signalling.sendPayload(a.MsgAction.getConversation, {uuid: e})
            }, e.prototype.getConversationByUUID = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    for (var r = 0, i = t._converasationList; r < i.length; r++) {
                        var a = i[r];
                        if (a.uuid === e)return d.Messenger.getInstance().dispatchEvent(s.MessagingEvents.onGetConversation, {conversation: a}), void n(a)
                    }
                    t.awaitingConversations[e] = n
                })
            }, e.deserialize = function (e) {
                return r.Conversation.createFromCache(e)
            }, e.serialize = function (e) {
                return e.toCache()
            }, e.prototype.getConversations = function (e) {
                this.signalling.sendPayload(a.MsgAction.getConversations, {uuids: e})
            }, o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "resolveEvent", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "resolveMessageEvent", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "createConversation", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "registerConversation", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "removeConversation", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "editConversation", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "getConversation", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "getConversationByUUID", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e.prototype, "getConversations", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e, "get", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e, "extractUserName", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e, "deserialize", null), o([c.LogManager.d_trace(c.LogCategory.MESSAGING)], e, "serialize", null), e
        }();
        t.ConversationManager = u
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e(t) {
                this.str = t || e.getNewGUIDString()
            }

            return e.prototype.toString = function () {
                return this.str
            }, e.getNewGUIDString = function () {
                var e = (new Date).getTime();
                return window.performance && "function" == typeof window.performance.now && (e += performance.now()), "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (t) {
                    var n = (e + 16 * Math.random()) % 16 | 0;
                    return e = Math.floor(e / 16), ("x" == t ? n : 3 & n | 8).toString(16)
                })
            }, e
        }();
        t.GUID = n
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, r = n(1), i = n(9), a = n(12), s = n(6), c = function () {
            function e() {
            }

            return e.extend = function () {
                for (var e = [], t = 0; t < arguments.length; t++)e[t - 0] = arguments[t];
                var n = {}, o = function (e) {
                    for (var t in e)Object.prototype.hasOwnProperty.call(e, t) && (n[t] = e[t])
                };
                o(arguments[0]);
                for (var r = 1; r < arguments.length; r++) {
                    var i = arguments[r];
                    o(i)
                }
                return n
            }, e.stringifyExtraHeaders = function (e) {
                return e = "[object Object]" == Object.prototype.toString.call(e) ? JSON.stringify(e) : null
            }, e.cadScript = function (e) {
                var t = e.split(";");
                return t.map(function (e) {
                    if (0 !== e.length) {
                        var t = e.match(/\([0-9\/\.,\*\+]*\)$/), n = e.substring(0, t.index), o = t.pop();
                        if (t.length)throw new Error("cadence script should be of the form `%f(%f/%f[,%f/%f])`");
                        if (n = "*" === n ? 1 / 0 : parseFloat(n), isNaN(n))throw new Error("cadence length should be of the form `%f`");
                        return o = o.slice(1, o.length - 1).split(",").map(function (e) {
                            try {
                                var t = e.split("/");
                                if (t.length > 3)throw new Error;
                                return t = t.map(function (e, t) {
                                    if (2 === t) {
                                        var n = e.split("+").map(function (e) {
                                            var t = parseInt(e, 10);
                                            if (isNaN(t))throw new Error;
                                            return t - 1
                                        });
                                        return n
                                    }
                                    var o;
                                    if ("*" == e && (o = 1 / 0), o = o ? o : parseFloat(e), isNaN(o))throw new Error;
                                    return o
                                }), {on: t[0], off: t[1], frequencies: t[2]}
                            } catch (e) {
                                throw new Error("cadence segments should be of the form `%f/%f[%d[+%d]]`")
                            }
                        }), {duration: n, sections: o}
                    }
                })
            }, e.freqScript = function (e) {
                var t = e.split(",");
                return t.map(function (e) {
                    try {
                        var t = e.split("@"), n = parseInt(t.shift()), o = parseFloat(t.shift());
                        if (t.length)throw Error();
                        return {frequency: n, decibels: o}
                    } catch (e) {
                        throw new Error("freqScript pairs are expected to be of the form `%d@%f[,%d@%f]`")
                    }
                })
            }, e.toneScript = function (e) {
                var t = e.split(";"), n = this.freqScript(t.shift()), o = this.cadScript(t.join(";"));
                return {frequencies: n, cadences: o}
            }, e.playToneScript = function (e, t) {
                if (void 0 === t && (t = !1), "undefined" != typeof window.AudioContext || "undefined" != typeof window.webkitAudioContext) {
                    var n = s.UserMediaManager.get().audioContext, o = this.toneScript(e), r = [], i = 0,
                        a = function (e) {
                            for (var t = 0; t < n.sampleRate * e; t++)r.push(0)
                        }, c = function (e, t) {
                            for (var i = 0; i < n.sampleRate * t; i++) {
                                for (var a = 0,
                                         s = 0; s < e.length; s++)a += Math.pow(10, o.frequencies[e[s]].decibels / 20) * Math.sin((r.length + i) * (3.14159265359 / n.sampleRate) * o.frequencies[e[s]].frequency), i < 10 && (a *= i / 10), i > n.sampleRate * t - 10 && (a *= (n.sampleRate * t - i) / 10);
                                r.push(a)
                            }
                        }, d = function (e, t) {
                            if (t != 1 / 0)var n = t; else n = t = 20;
                            if (0 !== e.off && e.off != 1 / 0)for (; n > 0;) {
                                c(e.frequencies, e.on), n -= e.on, a(e.off), n -= e.off;
                                n = parseInt(String(10 * n)) / 10
                            } else c(e.frequencies, t)
                        }, l = function (e) {
                            i += e.duration != 1 / 0 ? e.duration : 20;
                            for (var t = 0; t < e.sections.length; t++)d(e.sections[t], e.duration)
                        };
                    this.source = n.createBufferSource();
                    for (var u = 0; u < o.cadences.length; u++)o.cadences[u].duration == 1 / 0 && (this.source.loop = !0), l(o.cadences[u]);
                    this.source.connect(n.destination);
                    for (var g = n.createBuffer(1, i * n.sampleRate, n.sampleRate), p = g.getChannelData(0),
                             f = 0; f < i * n.sampleRate; f++)p[f] = r[f];
                    r = null, this.source.buffer = g, t === !0 && (this.source.loop = !0), this.source.start(0)
                }
            }, e.stopPlayback = function () {
                return null !== this.source && (this.source.stop(0), this.source = null, !0)
            }, e.sendRequest = function (e, t, n, o) {
                var r = !1, i = function () {
                    for (var e, t = [function () {
                        return new XMLHttpRequest
                    }, function () {
                        return new ActiveXObject("Msxml2.XMLHTTP")
                    }, function () {
                        return new ActiveXObject("Msxml3.XMLHTTP")
                    }, function () {
                        return new ActiveXObject("Microsoft.XMLHTTP")
                    }], n = 0; n < t.length; n++) {
                        try {
                            e = t[n](), 0 === n && (r = !0)
                        } catch (e) {
                            continue
                        }
                        break
                    }
                    return e
                }, a = i();
                if (a) {
                    var s = o ? "POST" : "GET";
                    if (r) a.onerror = function () {
                        n(a)
                    }, a.ontimeout = function () {
                        n(a)
                    }, a.onload = function () {
                        t(a)
                    }, a.open(s, e), a.timeout = 5e3, a.send(); else {
                        if (a.open(s, e, !0), o && a.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), a.onreadystatechange = function () {
                                if (4 == a.readyState)return 200 != a.status && 304 != a.status ? void n(a) : void t(a)
                            }, 4 == a.readyState)return;
                        a.send(o)
                    }
                }
            }, e.getServers = function (e, t, n) {
                function o(o) {
                    null !== o ? e(o) : t !== !0 ? this.getServers(e, !0, n) : n.dispatchEvent({
                        name: "ConnectionFailed",
                        message: "VoxImplant Cloud is unavailable"
                    })
                }

                void 0 === t && (t = !1);
                var r = "https:" == document.location.protocol ? "https://" : "http://";
                if (t === !0)var i = r + "balancer.voximplant.com/getNearestHost"; else i = r + "balancer.voximplant.com/getNearestHost";
                this.sendRequest(i, function (e) {
                    o(e.responseText)
                }, function (e) {
                    o(null)
                })
            }, e.generateUUID = function () {
                var e = this._gri, t = this._ha;
                return t(e(32), 8) + "-" + t(e(16), 4) + "-" + t(16384 | e(12), 4) + "-" + t(32768 | e(14), 4) + "-" + t(e(48), 12)
            }, e._gri = function (e) {
                return e < 0 ? NaN : e <= 30 ? 0 | Math.random() * (1 << e) : e <= 53 ? (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << e - 30)) * (1 << 30) : NaN
            }, e._ha = function (e, t) {
                for (var n = e.toString(16), o = t - n.length, r = "0"; o > 0; o >>>= 1, r += r)1 & o && (n = r + n);
                return n
            }, e.filterXSS = function (e) {
                var t = document.createElement("div");
                return t.appendChild(document.createTextNode(e)), e = t.innerHTML
            }, e.checkCA = function () {
                if (!i.Client.getInstance().connected())throw new Error("NOT_CONNECTED_TO_VOXIMPLANT");
                if (!a.Authenticator.get().authorized())throw new Error("NOT_AUTHORIZED")
            }, e.canRTC = function (e) {
            }, e.mixObjectToLeft = function (e, t) {
                for (var n in e)"undefined" != typeof t[n] && (e[n] = t[n]);
                return e
            }, e.makeRandomString = function (e) {
                for (var t = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/", n = "",
                         o = 0; o < e; o++)n += t.charAt(Math.floor(Math.random() * t.length));
                return n
            }, e.source = null, o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "extend", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "stringifyExtraHeaders", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "cadScript", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "freqScript", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "toneScript", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "playToneScript", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "stopPlayback", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "sendRequest", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "getServers", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "generateUUID", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "_gri", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "_ha", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "filterXSS", null), o([r.LogManager.d_trace(r.LogCategory.UTILS)], e, "checkCA", null), e
        }();
        t.Utils = c
    }, function (e, t) {
        "use strict";
        var n = {};
        n.generateIdentifier = function () {
            return Math.random().toString(36).substr(2, 10)
        }, n.localCName = n.generateIdentifier(), n.splitLines = function (e) {
            return e.trim().split("\n").map(function (e) {
                return e.trim()
            })
        }, n.splitSections = function (e) {
            var t = e.split("\nm=");
            return t.map(function (e, t) {
                return (t > 0 ? "m=" + e : e).trim() + "\r\n"
            })
        }, n.matchPrefix = function (e, t) {
            return n.splitLines(e).filter(function (e) {
                return 0 === e.indexOf(t)
            })
        }, n.parseCandidate = function (e) {
            var t;
            t = 0 === e.indexOf("a=candidate:") ? e.substring(12).split(" ") : e.substring(10).split(" ");
            for (var n = {
                foundation: t[0],
                component: t[1],
                protocol: t[2].toLowerCase(),
                priority: parseInt(t[3], 10),
                ip: t[4],
                port: parseInt(t[5], 10),
                type: t[7]
            }, o = 8; o < t.length; o += 2)switch (t[o]) {
                case"raddr":
                    n.relatedAddress = t[o + 1];
                    break;
                case"rport":
                    n.relatedPort = parseInt(t[o + 1], 10);
                    break;
                case"tcptype":
                    n.tcpType = t[o + 1]
            }
            return n
        }, n.writeCandidate = function (e) {
            var t = [];
            t.push(e.foundation), t.push(e.component), t.push(e.protocol.toUpperCase()), t.push(e.priority), t.push(e.ip), t.push(e.port);
            var n = e.type;
            return t.push("typ"), t.push(n), "host" !== n && e.relatedAddress && e.relatedPort && (t.push("raddr"), t.push(e.relatedAddress), t.push("rport"), t.push(e.relatedPort)), e.tcpType && "tcp" === e.protocol.toLowerCase() && (t.push("tcptype"), t.push(e.tcpType)), "candidate:" + t.join(" ")
        }, n.parseRtpMap = function (e) {
            var t = e.substr(9).split(" "), n = {payloadType: parseInt(t.shift(), 10)};
            return t = t[0].split("/"), n.name = t[0], n.clockRate = parseInt(t[1], 10), n.numChannels = 3 === t.length ? parseInt(t[2], 10) : 1, n
        }, n.writeRtpMap = function (e) {
            var t = e.payloadType;
            return void 0 !== e.preferredPayloadType && (t = e.preferredPayloadType), "a=rtpmap:" + t + " " + e.name + "/" + e.clockRate + (1 !== e.numChannels ? "/" + e.numChannels : "") + "\r\n"
        }, n.parseExtmap = function (e) {
            var t = e.substr(9).split(" ");
            return {id: parseInt(t[0], 10), uri: t[1]}
        }, n.writeExtmap = function (e) {
            return "a=extmap:" + (e.id || e.preferredId) + " " + e.uri + "\r\n"
        }, n.parseFmtp = function (e) {
            for (var t, n = {}, o = e.substr(e.indexOf(" ") + 1).split(";"),
                     r = 0; r < o.length; r++)t = o[r].trim().split("="), n[t[0].trim()] = t[1];
            return n
        }, n.writeFmtp = function (e) {
            var t = "", n = e.payloadType;
            if (void 0 !== e.preferredPayloadType && (n = e.preferredPayloadType), e.parameters && Object.keys(e.parameters).length) {
                var o = [];
                Object.keys(e.parameters).forEach(function (t) {
                    o.push(t + "=" + e.parameters[t])
                }), t += "a=fmtp:" + n + " " + o.join(";") + "\r\n"
            }
            return t
        }, n.parseRtcpFb = function (e) {
            var t = e.substr(e.indexOf(" ") + 1).split(" ");
            return {type: t.shift(), parameter: t.join(" ")}
        }, n.writeRtcpFb = function (e) {
            var t = "", n = e.payloadType;
            return void 0 !== e.preferredPayloadType && (n = e.preferredPayloadType), e.rtcpFeedback && e.rtcpFeedback.length && e.rtcpFeedback.forEach(function (e) {
                t += "a=rtcp-fb:" + n + " " + e.type + (e.parameter && e.parameter.length ? " " + e.parameter : "") + "\r\n"
            }), t
        }, n.parseSsrcMedia = function (e) {
            var t = e.indexOf(" "), n = {ssrc: parseInt(e.substr(7, t - 7), 10)}, o = e.indexOf(":", t);
            return o > -1 ? (n.attribute = e.substr(t + 1, o - t - 1), n.value = e.substr(o + 1)) : n.attribute = e.substr(t + 1), n
        }, n.getMid = function (e) {
            var t = n.matchPrefix(e, "a=mid:")[0];
            if (t)return t.substr(6)
        }, n.getDtlsParameters = function (e, t) {
            var o = n.splitLines(e);
            o = o.concat(n.splitLines(t));
            var r = o.filter(function (e) {
                    return 0 === e.indexOf("a=fingerprint:")
                })[0].substr(14),
                i = {role: "auto", fingerprints: [{algorithm: r.split(" ")[0].toLowerCase(), value: r.split(" ")[1]}]};
            return i
        }, n.writeDtlsParameters = function (e, t) {
            var n = "a=setup:" + t + "\r\n";
            return e.fingerprints.forEach(function (e) {
                n += "a=fingerprint:" + e.algorithm + " " + e.value + "\r\n"
            }), n
        }, n.getIceParameters = function (e, t) {
            var o = n.splitLines(e);
            o = o.concat(n.splitLines(t));
            var r = {
                usernameFragment: o.filter(function (e) {
                    return 0 === e.indexOf("a=ice-ufrag:")
                })[0].substr(12), password: o.filter(function (e) {
                    return 0 === e.indexOf("a=ice-pwd:")
                })[0].substr(10)
            };
            return r
        }, n.writeIceParameters = function (e) {
            return "a=ice-ufrag:" + e.usernameFragment + "\r\na=ice-pwd:" + e.password + "\r\n"
        }, n.parseRtpParameters = function (e) {
            for (var t = {codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: []}, o = n.splitLines(e),
                     r = o[0].split(" "), i = 3; i < r.length; i++) {
                var a = r[i], s = n.matchPrefix(e, "a=rtpmap:" + a + " ")[0];
                if (s) {
                    var c = n.parseRtpMap(s), d = n.matchPrefix(e, "a=fmtp:" + a + " ");
                    switch (c.parameters = d.length ? n.parseFmtp(d[0]) : {}, c.rtcpFeedback = n.matchPrefix(e, "a=rtcp-fb:" + a + " ").map(n.parseRtcpFb), t.codecs.push(c), c.name.toUpperCase()) {
                        case"RED":
                        case"ULPFEC":
                            t.fecMechanisms.push(c.name.toUpperCase())
                    }
                }
            }
            return n.matchPrefix(e, "a=extmap:").forEach(function (e) {
                t.headerExtensions.push(n.parseExtmap(e))
            }), t
        }, n.writeRtpDescription = function (e, t) {
            var o = "";
            o += "m=" + e + " ", o += t.codecs.length > 0 ? "9" : "0", o += " UDP/TLS/RTP/SAVPF ", o += t.codecs.map(function (e) {
                    return void 0 !== e.preferredPayloadType ? e.preferredPayloadType : e.payloadType
                }).join(" ") + "\r\n", o += "c=IN IP4 0.0.0.0\r\n", o += "a=rtcp:9 IN IP4 0.0.0.0\r\n", t.codecs.forEach(function (e) {
                o += n.writeRtpMap(e), o += n.writeFmtp(e), o += n.writeRtcpFb(e)
            });
            var r = 0;
            return t.codecs.forEach(function (e) {
                e.maxptime > r && (r = e.maxptime)
            }), r > 0 && (o += "a=maxptime:" + r + "\r\n"), o += "a=rtcp-mux\r\n", t.headerExtensions.forEach(function (e) {
                o += n.writeExtmap(e)
            }), o
        }, n.parseRtpEncodingParameters = function (e) {
            var t, o = [], r = n.parseRtpParameters(e), i = r.fecMechanisms.indexOf("RED") !== -1,
                a = r.fecMechanisms.indexOf("ULPFEC") !== -1, s = n.matchPrefix(e, "a=ssrc:").map(function (e) {
                    return n.parseSsrcMedia(e)
                }).filter(function (e) {
                    return "cname" === e.attribute
                }), c = s.length > 0 && s[0].ssrc, d = n.matchPrefix(e, "a=ssrc-group:FID").map(function (e) {
                    var t = e.split(" ");
                    return t.shift(), t.map(function (e) {
                        return parseInt(e, 10)
                    })
                });
            d.length > 0 && d[0].length > 1 && d[0][0] === c && (t = d[0][1]), r.codecs.forEach(function (e) {
                if ("RTX" === e.name.toUpperCase() && e.parameters.apt) {
                    var n = {ssrc: c, codecPayloadType: parseInt(e.parameters.apt, 10), rtx: {ssrc: t}};
                    o.push(n), i && (n = JSON.parse(JSON.stringify(n)), n.fec = {
                        ssrc: t,
                        mechanism: a ? "red+ulpfec" : "red"
                    }, o.push(n))
                }
            }), 0 === o.length && c && o.push({ssrc: c});
            var l = n.matchPrefix(e, "b=");
            return l.length && (0 === l[0].indexOf("b=TIAS:") ? l = parseInt(l[0].substr(7), 10) : 0 === l[0].indexOf("b=AS:") && (l = parseInt(l[0].substr(5), 10)), o.forEach(function (e) {
                e.maxBitrate = l
            })), o
        }, n.parseRtcpParameters = function (e) {
            var t = {}, o = n.matchPrefix(e, "a=ssrc:").map(function (e) {
                return n.parseSsrcMedia(e)
            }).filter(function (e) {
                return "cname" === e.attribute
            })[0];
            o && (t.cname = o.value, t.ssrc = o.ssrc);
            var r = n.matchPrefix(e, "a=rtcp-rsize");
            t.reducedSize = r.length > 0, t.compound = 0 === r.length;
            var i = n.matchPrefix(e, "a=rtcp-mux");
            return t.mux = i.length > 0, t
        }, n.parseMsid = function (e) {
            var t, o = n.matchPrefix(e, "a=msid:");
            if (1 === o.length)return t = o[0].substr(7).split(" "), {stream: t[0], track: t[1]};
            var r = n.matchPrefix(e, "a=ssrc:").map(function (e) {
                return n.parseSsrcMedia(e)
            }).filter(function (e) {
                return "msid" === e.attribute
            });
            return r.length > 0 ? (t = r[0].value.split(" "), {stream: t[0], track: t[1]}) : void 0
        }, n.writeSessionBoilerplate = function () {
            return "v=0\r\no=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"
        }, n.writeMediaSection = function (e, t, o, r) {
            var i = n.writeRtpDescription(e.kind, t);
            if (i += n.writeIceParameters(e.iceGatherer.getLocalParameters()), i += n.writeDtlsParameters(e.dtlsTransport.getLocalParameters(), "offer" === o ? "actpass" : "active"), i += "a=mid:" + e.mid + "\r\n", i += e.rtpSender && e.rtpReceiver ? "a=sendrecv\r\n" : e.rtpSender ? "a=sendonly\r\n" : e.rtpReceiver ? "a=recvonly\r\n" : "a=inactive\r\n", e.rtpSender) {
                var a = "msid:" + r.id + " " + e.rtpSender.track.id + "\r\n";
                i += "a=" + a, i += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " " + a, e.sendEncodingParameters[0].rtx && (i += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " " + a, i += "a=ssrc-group:FID " + e.sendEncodingParameters[0].ssrc + " " + e.sendEncodingParameters[0].rtx.ssrc + "\r\n")
            }
            return i += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " cname:" + n.localCName + "\r\n", e.rtpSender && e.sendEncodingParameters[0].rtx && (i += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " cname:" + n.localCName + "\r\n"), i
        }, n.getDirection = function (e, t) {
            for (var o = n.splitLines(e), r = 0; r < o.length; r++)switch (o[r]) {
                case"a=sendrecv":
                case"a=sendonly":
                case"a=recvonly":
                case"a=inactive":
                    return o[r].substr(2)
            }
            return t ? n.getDirection(t) : "sendrecv"
        }, n.getKind = function (e) {
            var t = n.splitLines(e), o = t[0].split(" ");
            return o[0].substr(2)
        }, n.isRejected = function (e) {
            return "0" === e.split(" ", 2)[1]
        }, e.exports = n
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e() {
            }

            return e.attachStream = function (e, t) {
                t.srcObject = e, t.play()
            }, e.detachStream = function (e) {
                e.pause(), e.src = ""
            }, e.getScreenMedia = function (e) {
                return new Promise(function (e, t) {
                    t(new Error("Screen sharing not allowed for you platform"))
                })
            }, e.getRTCStats = function (e) {
                return new Promise(function (e, t) {
                    t(new Error("RTCStats sharing not allowed for you platform"))
                })
            }, e
        }();
        t.Edge = n
    }, function (e, t, n) {
        "use strict";
        var o = n(22), r = n(21), i = function () {
            function e() {
            }

            return e.attachStream = function (e, t) {
                t.mozSrcObject = e, t.load(), t.play()
            }, e.detachStream = function (e) {
                e.mozSrcObject = null, e.load(), e.src = ""
            }, e.getScreenMedia = function (e) {
                return new Promise(function (t, n) {
                    window.postMessage({
                        enableScreenCapturing: !0,
                        domains: e
                    }, "*"), window.addEventListener("message", function (e) {
                        var o = e.data;
                        o && "undefined" != typeof o.enabledScreenCapturing && (o.enabledScreenCapturing === !0 ? navigator.mediaDevices.getUserMedia({
                            audio: !1,
                            video: {
                                mozMediaSource: "window",
                                mediaSource: "window",
                                maxWidth: 1920,
                                maxHeight: 1080,
                                minAspectRatio: 1.77
                            }
                        }).then(function (e) {
                            t(e)
                        }).catch(function (e) {
                            n(e)
                        }) : n(o.reason))
                    }, !1)
                })
            }, e.getRTCStats = function (e) {
                return new Promise(function (t, n) {
                    e.getStats().then(function (e) {
                        var n = [];
                        e.forEach(function (e) {
                            "inboundrtp" != e.type && "outboundrtp" != e.type || n.push(e)
                        }), t(n)
                    }).catch(n)
                })
            }, e.getUserMedia = function (e) {
                return new Promise(function (t, n) {
                    var r = new MediaStream, i = o.MediaCache.get(), a = [];
                    new Promise(function (t, n) {
                        var o = [];
                        if ("undefined" != typeof e.audio && e.audio !== !1) {
                            var r = "undefined" == typeof e.audio.deviceId ? "" : e.audio.deviceId;
                            i.getTrack(r, "audio").then(function (n) {
                                if ("undefined" != typeof n && "ended" !== n.readyState) o.push(n), t(o); else {
                                    var a = JSON.parse(JSON.stringify(e));
                                    a.video = !1, navigator.mediaDevices.getUserMedia(a).then(function (e) {
                                        for (var n = 0, a = e.getTracks(); n < a.length; n++) {
                                            var s = a[n];
                                            i.setTrack(r, "audio", s), o.push(s)
                                        }
                                        t(o)
                                    }).catch(function (e) {
                                        t([])
                                    })
                                }
                            })
                        } else t([])
                    }).then(function (t) {
                        return new Promise(function (n, o) {
                            if ("undefined" != typeof e.video && e.video !== !1) {
                                var r = "undefined" == typeof e.video.deviceId ? "" : e.video.deviceId;
                                a.push(new Promise(function (o, a) {
                                    i.getTrack(r, "video").then(function (o) {
                                        if ("undefined" != typeof o && "ended" !== o.readyState) t.push(o), n(t); else {
                                            var a = JSON.parse(JSON.stringify(e));
                                            a.audio = !1, navigator.mediaDevices.getUserMedia(a).then(function (e) {
                                                for (var o = 0, a = e.getTracks(); o < a.length; o++) {
                                                    var s = a[o];
                                                    i.setTrack(r, "video", s), t.push(s), n(t)
                                                }
                                            }).catch(function (e) {
                                                n(t)
                                            })
                                        }
                                    })
                                }))
                            } else n(t)
                        })
                    }).then(function (e) {
                        for (var n = 0, o = e; n < o.length; n++) {
                            var i = o[n];
                            "undefined" != typeof i && r.addTrack(i)
                        }
                        t(r)
                    }).catch(function (e) {
                        n(e)
                    })
                })
            }, e.getDTMFSender = function (e, t) {
                var n = /Firefox\/([0-9\.]+)(?:\s|$)/, o = navigator.userAgent;
                if (n.test(o)) {
                    var i = n.exec(o), a = i[1].split(".");
                    if (+a[0] >= 53) {
                        var s = e.getSenders().map(function (e) {
                            if ("audio" === e.track.kind && e.dtmf)return e.dtmf
                        });
                        if (s.length > 0)return s[0]
                    }
                }
                return new r.SignalingDTMFSender(t)
            }, e
        }();
        t.FF = i
    }, function (e, t, n) {
        "use strict";
        var o = n(22), r = n(21), i = function () {
            function e() {
            }

            return e.attachStream = function (e, t) {
                t.src = URL.createObjectURL(e), t.load(), t instanceof HTMLVideoElement ? t.play().catch(function (e) {
                }) : t.play()
            }, e.detachStream = function (e) {
                if (e instanceof HTMLVideoElement) {
                    var t = e.pause();
                    "undefined" != typeof t && t.catch(function (e) {
                    })
                } else e.pause();
                e.src = ""
            }, e.getDTMFSender = function (e, t) {
                return e.createDTMFSender ? e.createDTMFSender(e.getLocalStreams()[0].getAudioTracks()[0]) : new r.SignalingDTMFSender(t)
            }, e.getScreenMedia = function () {
                return new Promise(function (e, t) {
                    window.postMessage("get-sourceId", "*"), window.addEventListener("message", function (n) {
                        if (n.origin == window.location.origin && ("PermissionDeniedError" == n.data && t(new Error("PermissionDeniedError")), "string" != typeof n.data && "undefined" != typeof n.data.sourceId)) {
                            var o = {
                                audio: !1,
                                video: {
                                    mandatory: {
                                        chromeMediaSource: "desktop",
                                        maxWidth: screen.width > 1920 ? screen.width : 1920,
                                        maxHeight: screen.height > 1080 ? screen.height : 1080,
                                        chromeMediaSourceId: n.data.sourceId
                                    }, optional: [{googTemporalLayeredScreencast: !0}]
                                }
                            };
                            navigator.mediaDevices.getUserMedia(o).then(function (t) {
                                e(t)
                            }).catch(function (e) {
                                t(e)
                            })
                        }
                    })
                })
            }, e.getRTCStats = function (e) {
                return new Promise(function (t, n) {
                    var o = [];
                    e.getStats().then(function (e) {
                        e.forEach(function (e) {
                            if ("ssrc" == e.type) {
                                var t = {};
                                t.id = e.id, t.type = e.type, t.timestamp = e.timestamp, o.push(t)
                            }
                        }), t(o)
                    }).catch(n)
                })
            }, e.getUserMedia = function (e) {
                return new Promise(function (t, n) {
                    var r = new MediaStream, i = o.MediaCache.get(), a = [];
                    new Promise(function (t, n) {
                        var o = [];
                        if ("undefined" != typeof e.audio && e.audio !== !1) {
                            var r = "undefined" == typeof e.audio.deviceId ? "" : e.audio.deviceId;
                            i.getTrack(r, "audio").then(function (n) {
                                if ("undefined" != typeof n && "ended" !== n.readyState) o.push(n), t(o); else {
                                    var a = JSON.parse(JSON.stringify(e));
                                    a.video = !1, navigator.mediaDevices.getUserMedia(a).then(function (e) {
                                        for (var n = 0, a = e.getTracks(); n < a.length; n++) {
                                            var s = a[n];
                                            i.setTrack(r, "audio", s), o.push(s)
                                        }
                                        t(o)
                                    }).catch(function (e) {
                                        t([])
                                    })
                                }
                            })
                        } else t([])
                    }).then(function (t) {
                        return new Promise(function (n, o) {
                            if ("undefined" != typeof e.video && e.video !== !1) {
                                var r = "undefined" == typeof e.video.deviceId ? "" : e.video.deviceId;
                                a.push(new Promise(function (o, a) {
                                    i.getTrack(r, "video").then(function (o) {
                                        if ("undefined" != typeof o && "ended" !== o.readyState) t.push(o), n(t); else {
                                            var a = JSON.parse(JSON.stringify(e));
                                            a.audio = !1, navigator.mediaDevices.getUserMedia(a).then(function (e) {
                                                for (var o = 0, a = e.getTracks(); o < a.length; o++) {
                                                    var s = a[o];
                                                    i.setTrack(r, "video", s), t.push(s), n(t)
                                                }
                                            }).catch(function (e) {
                                                n(t)
                                            })
                                        }
                                    })
                                }))
                            } else n(t)
                        })
                    }).then(function (e) {
                        for (var n = 0, o = e; n < o.length; n++) {
                            var i = o[n];
                            "undefined" != typeof i && r.addTrack(i)
                        }
                        t(r)
                    }).catch(function (e) {
                        n(e)
                    })
                })
            }, e
        }();
        t.Webkit = i
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__extends || function (e, t) {
                function n() {
                    this.constructor = e
                }

                for (var o in t)t.hasOwnProperty(o) && (e[o] = t[o]);
                e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
            }, r = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, i = n(10), a = n(3), s = n(1), c = n(6), d = n(2), l = n(4), u = n(11), g = function (e) {
            function t() {
                e.apply(this, arguments)
            }

            return o(t, e), t.prototype.answer = function (t, n, o) {
                var r = this;
                e.prototype.answer.call(this, t, n), "undefined" != typeof t && ("undefined" == typeof n && (n = {}), n[u.Constants.CALL_DATA_HEADER] = t);
                var i = c.UserMediaManager.get();
                i.attachTo(this._peerConnection), this._peerConnection.getLocalAnswer().then(function (e) {
                    a.VoxSignaling.get().callRemoteFunction(d.RemoteFunction.acceptCall, r.id(), n, e.sdp)
                })
            }, t.prototype.setActive = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    if (t._state !== i.CallState.CONNECTED)return void t.addPendingReinvite({
                        action: "setActive",
                        resolve: n,
                        reject: o,
                        params: e
                    });
                    if (t._state === i.CallState.UPDATING) o({code: 11, call: t}); else {
                        if (t._state = i.CallState.UPDATING, "firefox" === l.default.getWSVendor() && t.sendInfo(u.Constants.VI_HOLD_EMUL, JSON.stringify({hold: !e})), null !== t._renegotiationPromise)return void o({
                            code: 12,
                            call: t
                        });
                        if (t._active == e)return void o({code: 14, call: t});
                        t._active = e, t._renegotiationPromise = {resolve: n, reject: o}, t.peerConnection.hold(!e)
                    }
                })
            }, r([s.LogManager.d_trace(s.LogCategory.CALL)], t.prototype, "answer", null), r([s.LogManager.d_trace(s.LogCategory.CALL)], t.prototype, "setActive", null),
                t
        }(i.Call);
        t.CallExMedia = g
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__extends || function (e, t) {
                function n() {
                    this.constructor = e
                }

                for (var o in t)t.hasOwnProperty(o) && (e[o] = t[o]);
                e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
            }, r = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, i = n(10), a = n(3), s = n(1), c = n(6), d = n(2), l = n(11), u = function (e) {
            function t() {
                e.apply(this, arguments)
            }

            return o(t, e), t.prototype.answer = function (t, n, o) {
                var r = this;
                e.prototype.answer.call(this, t, n), "undefined" != typeof t && ("undefined" == typeof n && (n = {}), n[l.Constants.CALL_DATA_HEADER] = t);
                var i = c.UserMediaManager.get();
                i.attachTo(this._peerConnection), this._peerConnection.getLocalAnswer().then(function (e) {
                    a.VoxSignaling.get().callRemoteFunction(d.RemoteFunction.acceptCall, r.id(), n, e.sdp)
                })
            }, r([s.LogManager.d_trace(s.LogCategory.CALLEXP2P)], t.prototype, "answer", null), t
        }(i.Call);
        t.CallExP2P = u
    }, function (e, t, n) {
        "use strict";
        var o = this && this.__extends || function (e, t) {
                function n() {
                    this.constructor = e
                }

                for (var o in t)t.hasOwnProperty(o) && (e[o] = t[o]);
                e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
            }, r = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, i = n(10), a = n(3), s = n(8), c = n(1), d = n(2), l = function (e) {
            function t() {
                e.apply(this, arguments)
            }

            return o(t, e), t.prototype.answer = function (t, n) {
                e.prototype.answer.call(this, t, n), a.VoxSignaling.get().callRemoteFunction(d.RemoteFunction.acceptCall, this._id, s.CallManager.cleanHeaders(n))
            }, r([c.LogManager.d_trace(c.LogCategory.CALLEXSERVER)], t.prototype, "answer", null), t
        }(i.Call);
        t.CallExServer = l
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e() {
            }

            return e.prototype.clone = function () {
                var t = new e;
                return t.videoInputId = this.videoInputId, t.audioInputId = this.audioInputId, t.audioEnabled = this.audioEnabled, t.videoEnabled = this.videoEnabled, t.videoSettings = this.videoSettings, t
            }, e.prototype.setVideoSettings = function (e) {
                this.videoSettings = e, "undefined" != typeof e.deviceId && (this.videoInputId = e.deviceId)
            }, e
        }();
        t.MediaCaptureConfig = n
    }, function (e, t, n) {
        "use strict";
        var o = n(4), r = n(1), i = function () {
            function e(e) {
                this.kind = e, this.inUse = !1, this.track = null, this.callId = null
            }

            return e.prototype.attach = function (e, t) {
                o.default.attachMedia(new MediaStream([e]), this.element), this.direction = t
            }, e.prototype.free = function () {
                o.default.detachMedia(this.element), this.inUse = !1, this.track = null, this.callId = null
            }, e
        }();
        t.ReusableStructure = i;
        var a = function () {
            function e() {
                this.elementList = new Array, this.log = r.LogManager.get().createLogger(r.LogCategory.RTC, "Renderer")
            }

            return e.get = function () {
                return this.inst || (this.inst = new e), this.inst
            }, e.prototype.getFreeElements = function (e) {
                return this.elementList.filter(function (t) {
                    if (t.inUse && ("all" == e || e == t.kind))return !0
                })
            }, e.prototype.catchRender = function (e, t, n) {
                var o, r = this.getFreeElements(e.kind);
                return r.length ? o = r[0] : (o = new i(e.kind), this.elementList.push(o)), o.inUse = !0, o.track = e, o.callId = t, o.attach(e, n), o.element
            }, e.prototype.catchRenders = function (e, t, n) {
                for (var o = e.getTracks(), r = [], i = 0; i < o.length; i++)r.push(this.catchRender(o[i], t, n));
                return r
            }, e.prototype.freeRendersByCallId = function (e, t) {
                void 0 === t && (t = "all"), this.elementList.map(function (n) {
                    n.callId != e || "all" != t && t != n.direction || n.free()
                })
            }, e.prototype.freeRenderByTrack = function (e) {
                this.elementList.map(function (t) {
                    t.track.id == e.id && t.free()
                })
            }, e.prototype.getRendererByCallId = function (e, t) {
                void 0 === t && (t = "all"), this.elementList.filter(function (n) {
                    if (n.callId == e && ("all" == t || t == n.direction))return !0
                })
            }, e
        }();
        t.ReusableRenderer = a
    }, function (e, t, n) {
        "use strict";
        var o, r = this && this.__extends || function (e, t) {
                function n() {
                    this.constructor = e
                }

                for (var o in t)t.hasOwnProperty(o) && (e[o] = t[o]);
                e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
            }, i = this && this.__decorate || function (e, t, n, o) {
                var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                return i > 3 && a && Object.defineProperty(t, n, a), a
            }, a = n(20), s = n(4), c = n(6), d = n(18), l = n(7), u = n(10), g = n(1), p = n(3), f = n(2);
        !function (e) {
            e[e.offer = "offer"] = "offer", e[e.answer = "answer"] = "answer", e[e.pranswer = "pranswer"] = "pranswer", e[e.rollback = "rollback"] = "rollback"
        }(o || (o = {}));
        var h;
        !function (e) {
            e[e.controlling = "controlling"] = "controlling", e[e.controlled = "controlled"] = "controlled"
        }(h || (h = {}));
        var v = function (e) {
            function t(t, n, o) {
                var r = this;
                e.call(this, t, n, o), this.iceTimer = null, this.ICE_TIMEOUT = 2e4;
                var i = null;
                n == a.PeerConnectionMode.P2P && (i = l.PCFactory.get().iceConfig), this.impl = new RTCPeerConnection({
                    gatherPolicy: "all",
                    iceServers: []
                }, {optional: [{DtlsSrtpKeyAgreement: "true"}]}), "undefined" != typeof this.impl.onaddtrack ? this.impl.onaddtrack = function (e) {
                    return r.onAddTrack(e)
                } : this.impl.onaddstream = function (e) {
                    return r.onAddStream(e)
                }, this.impl.onicecandidate = function (e) {
                    r.onICECandidate(e.candidate)
                }, this.rtpSenders = [], this.renegotiationInProgress = !1, this.impl.onnegotiationneeded = function (e) {
                    return r.onTestRenegotiate(e)
                }, this.impl.onsignalingstatechange = function (e) {
                    return r.onSignalingStateChange(e)
                }, this.impl.oniceconnectionstatechange = function (e) {
                    return r.onConnectionChange(e)
                }, this.iceRole = h.controlling, this.renderers = [], this._remoteStreams = []
            }

            return r(t, e), t.prototype.onSignalingStateChange = function (e) {
                this.log.info("Signal state changed to " + this.impl.signalingState + " for PC:" + this.id), "stable" == this.impl.signalingState
            }, t.prototype.onConnectionChange = function (e) {
                "completed" == this.impl.iceConnectionState && this._call.dispatchEvent({
                    name: "ICECompleted",
                    call: this._call
                }), ("completed" == this.impl.iceConnectionState || "connected" == this.impl.iceConnectionState && this.iceTimer) && (clearTimeout(this.iceTimer), this.iceTimer = null)
            }, t.prototype.onTestRenegotiate = function (e) {
                var t = this;
                if ("undefined" != typeof this.impl)return "disconnected" == this.impl.connectionState || "failed" == this.impl.connectionState ? void this.log.error("Renegotiation requested on closed PeerConnection") : null === this.impl.localDescription ? void this.log.error("Renegotiation needed, but no local SD, skipping") : "connected" != this.impl.iceConnectionState && "completed" != this.impl.iceConnectionState ? (this.log.warning("Renegotiation requested while ice state is " + this.impl.iceConnectionState + ". Postponing"), void setTimeout(this.onRenegotiate, 100)) : this.renegotiationInProgress ? void this.log.error("Renegotiation in progress. Queueing") : (this.log.info("Renegotiation started"), this.iceRole == h.controlling ? void p.VoxSignaling.get().callRemoteFunction(f.RemoteFunction.reInvite, this._call.id(), {}, "") : void(0 == this.renegotiationInProgress ? this.impl.createOffer({
                    offerToReceiveAudio: !0,
                    offerToReceiveVideo: !0
                }).then(function (e) {
                    return t.impl.setLocalDescription(e)
                }).then(function () {
                    p.VoxSignaling.get().callRemoteFunction(f.RemoteFunction.reInvite, t._call.id(), {}, t.impl.localDescription.sdp), t.renegotiationInProgress = !0
                }).catch(function (e) {
                    t.log.error("Error when renegatiation start")
                }) : this.log.error("Another renegatiation in progress")))
            }, t.prototype.onRenegotiate = function (e) {
                var t = this;
                if ("undefined" != typeof this.impl) {
                    if ("disconnected" == this.impl.connectionState || "failed" == this.impl.connectionState)return void this.log.error("Renegotiation requested on closed PeerConnection");
                    if (null === this.impl.localDescription)return void this.log.error("Renegotiation needed, but no local SD, skipping");
                    if ("connected" != this.impl.iceConnectionState && "completed" != this.impl.iceConnectionState)return this.log.warning("Renegotiation requested while ice state is " + this.impl.iceConnectionState + ". Postponing"), void setTimeout(this.onRenegotiate, 100);
                    if (this.renegotiationInProgress)return void this.log.error("Renegotiation in progress. Queueing");
                    this.log.info("Renegotiation started"), this.renegotiationInProgress = !0, this._call.checkCallMode(u.CallMode.P2P) ? this.impl.createOffer().then(function (e) {
                        l.PCFactory.get().addBandwidthParams(e), t.log.info("New SDP: " + e.sdp), t.impl.setLocalDescription(e).then(function () {
                            t._call.sendInfo("vi/sdpoffer", e.sdp)
                        }).catch(function (e) {
                            t.log.error(e)
                        })
                    }).catch(function (e) {
                        t.log.error(e)
                    }) : this.impl.setRemoteDescription(this.impl.remoteDescription).then(function () {
                        return closed ? void(t.renegotiationInProgress = !1) : void t.impl.createAnswer(function (e) {
                            return closed ? void(t.renegotiationInProgress = !1) : (l.PCFactory.get().addBandwidthParams(e), void t.impl.setLocalDescription(e).then(function () {
                                t.renegotiationInProgress = !1, t.log.info("Renegotiation successful")
                            }).catch(function (e) {
                                t.renegotiationInProgress = !1, t.log.error(e)
                            }))
                        }).catch(function (e) {
                            t.renegotiationInProgress = !1, t.log.error(e)
                        })
                    }).catch(function (e) {
                        t.renegotiationInProgress = !1, t.log.error(e)
                    })
                }
            }, t.prototype.onICECandidate = function (e) {
                e && null != e && this.sendLocalCandidateToPeer("a=" + e.candidate, e.sdpMLineIndex)
            }, t.prototype.onAddTrack = function (e) {
                var t = new MediaStream([e.track]);
                "video" == e.track.kind && ("undefined" == typeof this.videoRendered && (this.videoRendered = d.Renderer.get().getElement(e.track.id, !0), this.renderers.push(this.videoRendered)), s.default.attachMedia(t, this.videoRendered)), "audio" == e.track.kind && ("undefined" == typeof this.audioRendered && (this.audioRendered = d.Renderer.get().getElement(e.track.id, !1), this.renderers.push(this.audioRendered)), s.default.attachMedia(t, this.audioRendered)), this._remoteStreams.push(t)
            }, t.prototype.onAddStream = function (e) {
                if (c.UserMediaManager.getVideoTracks(e.stream).length > 0) {
                    var t = c.UserMediaManager.getVideoTracks(e.stream);
                    "undefined" == typeof this.videoRendered && (this.videoRendered = d.Renderer.get().getElement(t[0].id, !0), this.renderers.push(this.videoRendered)), s.default.attachMedia(e.stream, this.videoRendered)
                }
                if (c.UserMediaManager.getAudioTracks(e.stream).length > 0) {
                    var t = c.UserMediaManager.getAudioTracks(e.stream);
                    "undefined" == typeof this.audioRendered && (this.audioRendered = d.Renderer.get().getElement(t[0].id, !1), this.renderers.push(this.audioRendered)), s.default.attachMedia(e.stream, this.audioRendered)
                }
                this._remoteStreams.push(e.stream)
            }, t.prototype._addTrack = function (e) {
                throw new Error("Not implemented")
            }, t.prototype.wireRemoteStream = function (e) {
                return new Promise(function (e, t) {
                    t(new Error("Not implemented"))
                })
            }, t.prototype._processRemoteAnswer = function (e, t) {
                var n = this, r = new RTCSessionDescription({sdp: t, type: o.answer});
                return this.impl.setRemoteDescription(r).then(function () {
                    n._call.onConnected(e, t), n.iceTimer = setTimeout(n._call.notifyICETimeout, n.ICE_TIMEOUT)
                }).catch(function (e) {
                    n.log.error(e.message)
                })
            }, t.prototype._getLocalOffer = function () {
                var e = this;
                return this.iceRole = h.controlling, new Promise(function (t, n) {
                    e.impl.createOffer().then(function (t) {
                        return e.impl.setLocalDescription(t)
                    }).then(function () {
                        t(e.impl.localDescription)
                    }).catch(function (e) {
                        n(e)
                    })
                })
            }, t.prototype._getLocalAnswer = function () {
                var e = this;
                return new Promise(function (t, n) {
                    e.impl.createAnswer().then(function (t) {
                        return e.impl.setLocalDescription(t)
                    }).then(function () {
                        t({type: o.answer, sdp: e.impl.localDescription.sdp})
                    }).catch(function (e) {
                        n(e)
                    })
                })
            }, t.prototype._setRemoteDescription = function (e) {
                this.impl.addStream(c.UserMediaManager.get().currentStream);
                var t = new RTCSessionDescription({sdp: e, type: o.offer});
                this.impl.setRemoteDescription(t)
            }, t.prototype._processRemoteOffer = function (e) {
                var t = this;
                return this.iceRole = h.controlled, new Promise(function (n, r) {
                    var i = new RTCSessionDescription({sdp: e, type: o.offer});
                    t.impl.setRemoteDescription(i).then(function () {
                        return t.impl.createAnswer()
                    }).then(function (e) {
                        return t.impl.setLocalDescription(e)
                    }).then(function () {
                        n(t.impl.localDescription.sdp)
                    }).catch(function (e) {
                        r(e)
                    })
                })
            }, t.prototype._close = function () {
                this.impl.close()
            }, t.prototype._addRemoteCandidate = function (e, t) {
                return this.impl.addIceCandidate(new RTCIceCandidate({candidate: e.substring(2), sdpMLineIndex: t}))
            }, t.prototype._bindLocalMedia = function () {
                this.impl.addStream(this._localStream)
            }, t.prototype._unbindLocalMegia = function () {
                "undefined" != typeof this.impl.addTrack ? this.rtpSenders.forEach(function (e) {
                    this.impl.removeTrack(e)
                }) : this.impl.removeStream(this._localStream)
            }, t.prototype._handleReinvite = function (e, t) {
                var n = this;
                return new Promise(function (r, i) {
                    if (0 == n.renegotiationInProgress)if ("" == t) n.onTestRenegotiate(new Event("none")), r(); else {
                        var a = new RTCSessionDescription({sdp: t, type: o.offer});
                        n.impl.setRemoteDescription(a).then(function () {
                            return n.impl.createAnswer()
                        }).then(function (e) {
                            return n.impl.setLocalDescription(e)
                        }).then(function () {
                            p.VoxSignaling.get().callRemoteFunction(f.RemoteFunction.reInvite, n._call.id(), e, n.impl.localDescription.sdp), r()
                        }).catch(function (e) {
                            i(e)
                        })
                    } else {
                        if (1 == n.renegotiationInProgress) {
                            var a = new RTCSessionDescription({sdp: t, type: o.answer});
                            return n.renegotiationInProgress = !1, n.impl.setRemoteDescription(a)
                        }
                        i(new Error("Universe was broken!"))
                    }
                })
            }, t.prototype._canNativeDTMF = function () {
                return !!this.impl.createDTMFSender
            }, t.prototype._sendDTMF = function (e, t, n) {
                "undefined" != typeof this.dtmfSender && this.dtmfSender.insertDTMF(e, t, n)
            }, t.prototype._hold = function (e) {
                this.onHold = e, e ? this._unbindLocalMegia() : this._bindLocalMedia()
            }, t.prototype._getDirections = function () {
                return {}
            }, t.prototype._getStreamActivity = function () {
                return {}
            }, t.prototype._hdnFRS = function () {
            }, t.prototype._hdnFRSPrep = function () {
            }, i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "onSignalingStateChange", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "onConnectionChange", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "onRenegotiate", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "onICECandidate", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "onAddTrack", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "onAddStream", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_processRemoteAnswer", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_getLocalOffer", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_getLocalAnswer", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_setRemoteDescription", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_processRemoteOffer", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_close", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_addRemoteCandidate", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_bindLocalMedia", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_unbindLocalMegia", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_handleReinvite", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_canNativeDTMF", null), i([g.LogManager.d_trace(g.LogCategory.RTC)], t.prototype, "_sendDTMF", null), t
        }(a.PeerConnection);
        t.ORTC = v
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e(e) {
                this.originalSDP = e
            }

            return e.splitSections = function (e) {
                var t = e.split("\nm=");
                return t.map(function (e, t) {
                    return (t > 0 ? "m=" + e : e).trim() + "\r\n"
                })
            }, e.prototype.getCodecList = function () {
                this.originalCodecList = {prefix: "", sections: [], sufix: ""};
                var t = RegExp.prototype.test.bind(/^([a-z])=(.*)/), n = e.splitSections(this.originalSDP);
                this.originalCodecList.prefix = n[0];
                for (var o = 1; o < n.length; o++) {
                    var r = {kind: "audio", firstLine: "", prefix: "", sufix: "", codec: []},
                        i = n[o].split("\na=rtpmap");
                    i = i.map(function (e, t) {
                        return (t > 0 ? "a=rtpmap" + e : e).trim() + "\r\n"
                    }), r.prefix = i.shift();
                    var a = i.pop();
                    a = a.split(/(\r\n|\r|\n)/).filter(t);
                    var s = !0;
                    for (i.push(""); s;)if (s = !1, 0 !== a.length) {
                        var c = a.shift();
                        0 === c.indexOf("a=rtpmap") || 0 === c.indexOf("a=rtcp-fb") || 0 === c.indexOf("a=fmtp") || 0 === c.indexOf("a=x-caps") || 0 === c.indexOf("a=maxptime") ? (i[i.length - 1] += c + "\r\n", s = !0) : a.unshift(c)
                    }
                    for (var d = 0; d < i.length; d++)r.codec.push(i[d].split(/(\r\n|\r|\n)/).filter(t));
                    var l = r.prefix.split(/(\r\n|\r|\n)/).filter(t);
                    r.firstLine = l.shift();
                    var u = r.firstLine.split(" ");
                    u.splice(-1 * r.codec.length, r.codec.length), r.kind = u[0].substring(2), r.prefix = l.join("\r\n") + "\r\n", r.firstLine = u.join(" "), a.length > 0 && (r.sufix = a.join("\r\n") + "\r\n"), this.originalCodecList.sections.push(r)
                }
                return this.originalCodecList
            }, e.prototype.getUserCodecList = function () {
                "undefined" == typeof this.originalCodecList && this.getCodecList();
                var t = {sections: []};
                return t.sections = this.originalCodecList.sections.filter(function (e) {
                    return "video" === e.kind || "audio" === e.kind
                }).map(function (t, n, o) {
                    for (var r = {
                        kind: t.kind, codec: t.codec.map(function (t) {
                            return e.codecToUserCodec(t)
                        })
                    }, i = [], a = 0, s = r.codec; a < s.length; a++) {
                        var c = s[a];
                        i.indexOf(c) === -1 && i.push(c)
                    }
                    return r.codec = i, r
                }), t
            }, e.codecToUserCodec = function (e) {
                var t = e[0].split(" ");
                return t.shift(), t.join(" ")
            }, e.prototype.setUserCodecList = function (t) {
                "undefined" == typeof this.originalCodecList && this.getCodecList();
                for (var n = 0; n < t.sections.length; n++)for (var o = 0; o < this.originalCodecList.sections.length; o++)t.sections[n].kind === this.originalCodecList.sections[o].kind && (this.originalCodecList.sections[o].codec = e.resortSection(t.sections[n].codec, this.originalCodecList.sections[o].codec))
            }, e.resortSection = function (t, n) {
                for (var o = [],
                         r = 0; r < t.length; r++)for (var i = 0; i < n.length; i++)t[r] === e.codecToUserCodec(n[i]) && o.push(n[i]);
                return o
            }, e.prototype.getSDP = function () {
                for (var e = this.originalCodecList.prefix, t = 0; t < this.originalCodecList.sections.length; t++) {
                    for (var n = "", o = [],
                             r = 0; r < this.originalCodecList.sections[t].codec.length; r++)o.push(this.originalCodecList.sections[t].codec[r][0].split(" ")[0].substring(9)), n += this.originalCodecList.sections[t].codec[r].join("\r\n") + "\r\n";
                    e += this.originalCodecList.sections[t].firstLine + " " + o.join(" ") + "\r\n", e += this.originalCodecList.sections[t].prefix, e += n, e += this.originalCodecList.sections[t].sufix
                }
                return e
            }, e.downOpusBandwidth = function (e) {
                return new Promise(function (t, n) {
                    var o = RegExp.prototype.test.bind(/^([a-z])=(.*)/), r = e.sdp.split(/(\r\n|\r|\n)/).filter(o);
                    console.info("try improving sdp");
                    for (var i = !1,
                             a = 0; a < r.length; a++)r[a].indexOf("a=fmtp:114") !== -1 && (r[a] = "a=fmtp:114 minptime=10; useinbandfec=1; sprop-maxcapturerate=8000", i = !0), r[a].indexOf("a=fmtp:111") !== -1 && (r[a] = "a=fmtp:111 minptime=10; useinbandfec=1; sprop-maxcapturerate=8000", i = !0);
                    i ? console.info("sdp was improved") : (console.info("OOPS can't improve this sdp"), n(e)), e.sdp = r.join("\r\n") + "\r\n", t(e)
                })
            }, e
        }();
        t.CodecSorter = n
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e() {
            }

            return e.detectDirections = function (t) {
                var n = [], o = t.split(/(\r\n|\r|\n)/).filter(e.validLine), r = "";
                return o.forEach(function (e) {
                    if (0 === e.indexOf("m=")) {
                        var t = e.substr(2);
                        r = t.split(" ")[0]
                    }
                    "" === r || "a=sendrecv" !== e && "a=sendonly" !== e && "a=recvonly" !== e && "a=inactive" !== e || (n.push({
                        type: r,
                        direction: e.substr(2)
                    }), r = "")
                }), n
            }, e.removeTelephoneEvents = function (t) {
                if (t.sdp.indexOf("a=rtpmap:127 telephone-event/8000") !== -1) {
                    for (var n = t.sdp.split(/(\r\n|\r|\n)/).filter(e.validLine), o = -1, r = 0; r < n.length; r++) {
                        if (n[r].indexOf("m=audio") !== -1) {
                            var i = n[r];
                            "string" == typeof i && (n[r] = i.replace(" 127", ""))
                        }
                        n[r].indexOf("a=rtpmap:127 telephone-event/8000") !== -1 && (o = r)
                    }
                    n.splice(o, 1), t.sdp = n.join("\r\n") + "\r\n"
                }
                return t
            }, e.removeDoubleOpus = function (t) {
                if (t.sdp.indexOf("a=rtpmap:109 opus") !== -1 && t.sdp.indexOf("a=rtpmap:111 opus") !== -1) {
                    for (var n = t.sdp.split(/(\r\n|\r|\n)/).filter(e.validLine), o = -1, r = 0; r < n.length; r++) {
                        if (n[r].indexOf("m=audio") !== -1) {
                            var i = n[r];
                            "string" == typeof i && (n[r] = i.replace(" 109", ""))
                        }
                        n[r].indexOf("a=rtpmap:109 opus") !== -1 && (o = r)
                    }
                    n.splice(o, 1), t.sdp = n.join("\r\n") + "\r\n"
                }
                return t
            }, e.removeTIAS = function (t) {
                if (t.sdp.indexOf("b=TIAS") !== -1) {
                    var n = t.sdp.split(/(\r\n|\r|\n)/).filter(e.validLine), o = [];
                    n.forEach(function (e, t) {
                        e.indexOf("b=TIAS") !== -1 && o.unshift(t)
                    }), o.forEach(function (e) {
                        return n.splice(e, 1)
                    }), t.sdp = n.join("\r\n") + "\r\n"
                }
                return t
            }, e.validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/), e
        }();
        t.SDPMuggle = n
    }, function (e, t, n) {
        "use strict";
        var o, r = this && this.__extends || function (e, t) {
                    function n() {
                        this.constructor = e
                    }

                    for (var o in t)t.hasOwnProperty(o) && (e[o] = t[o]);
                    e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
                }, i = this && this.__decorate || function (e, t, n, o) {
                    var r, i = arguments.length, a = i < 3 ? t : null === o ? o = Object.getOwnPropertyDescriptor(t, n) : o;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o); else for (var s = e.length - 1; s >= 0; s--)(r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
                    return i > 3 && a && Object.defineProperty(t, n, a), a
                }, a = n(20), s = n(4), c = n(6), d = n(18), l = n(7), u = n(1), g = n(3), p = n(8), f = n(2), h = n(40),
            v = n(16), C = n(17), y = n(11), m = v.CallEvents.Updated, L = n(41), S = n(9);
        !function (e) {
            e[e.offer = "offer"] = "offer", e[e.answer = "answer"] = "answer", e[e.pranswer = "pranswer"] = "pranswer", e[e.rollback = "rollback"] = "rollback"
        }(o || (o = {}));
        var E;
        !function (e) {
            e[e.controlling = "controlling"] = "controlling", e[e.controlled = "controlled"] = "controlled"
        }(E || (E = {}));
        var M = function (e) {
            function t(t, n, o) {
                var r = this;
                e.call(this, t, n, o), this.iceTimer = null, this.ICE_TIMEOUT = 2e4, this.RENEGOTIATION_TIMEOUT = 15e3;
                var i = l.PCFactory.get().iceConfig, a = i;
                if (null !== a ? a.rtcpMuxPolicy = "negotiate" : a = {
                        gatherPolicy: "all",
                        iceServers: [],
                        rtcpMuxPolicy: "negotiate"
                    }, this.impl = new RTCPeerConnection(a, {optional: [{DtlsSrtpKeyAgreement: "true"}]}), "undefined" != typeof this.impl.ontrack ? this.impl.ontrack = function (e) {
                        return r.onAddTrack(e)
                    } : "undefined" != typeof this.impl.onaddtrack ? this.impl.onaddtrack = function (e) {
                        return r.onAddTrack(e)
                    } : this.impl.onaddstream = function (e) {
                        return r.onAddStream(e)
                    }, this.impl.onicecandidate = function (e) {
                        r.onICECandidate(e.candidate)
                    }, this.rtpSenders = [], this.renegotiationInProgress = !1, this.impl.onnegotiationneeded = function (e) {
                        return r.onRenegotiation()
                    }, this.impl.onsignalingstatechange = function (e) {
                        return r.onSignalingStateChange()
                    }, this.impl.oniceconnectionstatechange = function (e) {
                        return r.onConnectionChange()
                    }, this.iceRole = E.controlling, this._remoteStreams = [], this.banReinviteAnswer = !1, this._call = p.CallManager.get().calls[this.id], "undefined" != typeof this._call ? this.onHold = !this._call.active() : this.onHold = !1, this.rtcCollectingCycle = setInterval(function () {
                        r.getPCStats()
                    }, p.CallManager.get().rtcStatsCollectionInterval), "undefined" != typeof this._call) {
                    var s = this._call.headers()[y.Constants.CALLSTATSIOID_HEADER];
                    "undefined" == typeof s && (s = this._call.id()), C.CallstatsIo.get().addNewFabric(this.impl, this._call.number(), o ? C.CallstatsIoFabricUsage.multiplex : C.CallstatsIoFabricUsage.audio, s)
                }
            }

            return r(t, e), t.prototype.onSignalingStateChange = function () {
                this.log.info("Signal state changed to " + this.impl.signalingState + " for PC:" + this.id), "stable" === this.impl.signalingState
            }, t.prototype.getPCStats = function () {
                var e = this;
                s.default.getRTCStats(this.impl).then(function (t) {
                    "undefined" != typeof e._call && e._call.dispatchEvent({name: "RTCStatsReceived", stats: t})
                })
            }, t.prototype.onConnectionChange = function () {
                "completed" === this.impl.iceConnectionState && "undefined" != typeof this._call && this._call.dispatchEvent({
                    name: "ICECompleted",
                    call: this._call
                }), "completed" !== this.impl.iceConnectionState && "connected" !== this.impl.iceConnectionState || (this.iceTimer && clearTimeout(this.iceTimer), this.iceTimer = null, "undefined" != typeof this.pendingEvent && null !== this.pendingEvent && (this._call.onConnected(this.pendingEvent[0], this.pendingEvent[1]), this.pendingEvent = null))
            }, t.prototype.onRenegotiation = function () {
                var e = this;
                if ("undefined" != typeof this.impl) {
                    if ("disconnected" === this.impl.connectionState || "failed" === this.impl.connectionState)return void this.log.info("Renegotiation requested on closed PeerConnection");
                    if (null === this.impl.localDescription)return void this.log.info("Renegotiation needed, but no local SD, skipping");
                    if ("connected" !== this.impl.iceConnectionState && "completed" !== this.impl.iceConnectionState)return this.log.info("Renegotiation requested while ice state is " + this.impl.iceConnectionState + ". Postponing"), void setTimeout(this.onRenegotiation, 100);
                    if (this.renegotiationInProgress)return void this.log.info("Renegotiation in progress. Queueing");
                    if (this.log.info("Renegotiation started"), this.renegotiationInProgress === !1) {
                        this.renegotiationInProgress = !0, this.renegotiationTimer = setTimeout(function () {
                            clearTimeout(e.renegotiationTimer), e._call.dispatchEvent({
                                name: m,
                                result: !1,
                                call: e._call
                            }), e.renegotiationInProgress = !1
                        }, this.RENEGOTIATION_TIMEOUT);
                        var t = {offerToReceiveAudio: !this.onHold, offerToReceiveVideo: !this.onHold};
                        this.updateHoldState(), this.impl.createOffer(t).then(function (e) {
                            return e = l.PCFactory.get().addBandwidthParams(e), e = L.SDPMuggle.removeTelephoneEvents(e), e = L.SDPMuggle.removeDoubleOpus(e)
                        }).then(function (t) {
                            return e.srcLocalSDP = t.sdp, e.pendingOffer = t, t
                        }).then(function () {
                            g.VoxSignaling.get().callRemoteFunction(f.RemoteFunction.reInvite, e._call.id(), {}, e.pendingOffer.sdp)
                        }).catch(function (t) {
                            e.log.error("Error when renegatiation start " + t.message)
                        })
                    } else this.log.error("Another renegatiation in progress")
                }
            }, t.prototype.updateHoldState = function () {
                for (var e = 0; e < this._remoteStreams.length; e++)for (var t = this._remoteStreams[e].getTracks(),
                                                                             n = 0; n < t.length; n++)t[n].enabled = !this.onHold;
                if ("undefined" != typeof this._localStream)for (var t = this._localStream.getTracks(),
                                                                     n = 0; n < t.length; n++)t[n].enabled = !this.onHold
            }, t.prototype.onICECandidate = function (e) {
                e && null !== e ? this.sendLocalCandidateToPeer("a=" + e.candidate, e.sdpMLineIndex) : this.log.info("End of candidates")
            }, t.prototype.onAddTrack = function (e) {
                var t = e.track.kind, n = new MediaStream([e.track]), o = this.renderStream(n, t);
                "video" === t && "undefined" == typeof this.videoRendered ? this.videoRendered = o : "undefined" == typeof this.audioRendered && (this.audioRendered = o), this.updateHoldState(), this._remoteStreams.push(n), this.renderers.push(o)
            }, t.prototype.onAddStream = function (e) {
                var t = c.UserMediaManager.getVideoTracks(e.stream).length ? "video" : "audio",
                    n = this.renderStream(e.stream, t);
                "video" === t && "undefined" == typeof this.videoRendered ? this.videoRendered = n : "undefined" == typeof this.audioRendered && (this.audioRendered = n), this.updateHoldState(), this._remoteStreams.push(e.stream), this.renderers.push(n)
            }, t.prototype.renderStream = function (e, t) {
                var n = document.body, o = e.getTracks();
                "video" == t && "undefined" != typeof S.Client.getInstance().remoteVideoContainerId && (n = document.getElementById(S.Client.getInstance().remoteVideoContainerId));
                var r;
                return r = "video" === t && "undefined" != typeof this.videoRendered ? this.videoRendered : "audio" === t && "undefined" != typeof this.audioRendered ? this.audioRendered : d.Renderer.get().getElement(o[0].id, "video" === t, n), "undefined" != typeof this.sinkId && r.setSinkId(this.sinkId), s.default.attachMedia(e, r), "undefined" != typeof this._call && this._call.dispatchEvent({
                    name: v.CallEvents.MediaElementCreated,
                    call: this._call,
                    element: r,
                    type: t
                }), r
            }, t.prototype.wireRemoteStream = function (e) {
                return new Promise(function (e, t) {
                    t(new Error("Not implemented"))
                })
            }, t.prototype._processRemoteAnswer = function (e, t) {
                var n = this;
                if (this.iceTimer = setTimeout(function () {
                        n._call.notifyICETimeout()
                    }, this.ICE_TIMEOUT), this.pendingEvent = [e, t], null === this.impl.remoteDescription || "" == this.impl.remoteDescription.sdp) {
                    var r = new RTCSessionDescription({sdp: t, type: o.answer});
                    return this.srcRemoteSDP = t, r = L.SDPMuggle.removeTIAS(r), this.impl.setRemoteDescription(r)
                }
            }, t.prototype._getLocalOffer = function () {
                var e = this;
                return this.iceRole = E.controlling, new Promise(function (t, n) {
                    var o = {offerToReceiveAudio: !e.onHold, offerToReceiveVideo: !e.onHold};
                    e.impl.createOffer(o).then(function (t) {
                        return t = l.PCFactory.get().addBandwidthParams(t), e.codecRearrange(t)
                    }).then(function (t) {
                        return e.srcLocalSDP = t.sdp, e.impl.setLocalDescription(t)
                    }).then(function () {
                        t(e.impl.localDescription)
                    }).catch(function (e) {
                        n(e)
                    })
                })
            }, t.prototype._getLocalAnswer = function () {
                var e = this;
                return this.iceRole = E.controlled, new Promise(function (t, n) {
                    var r = {mandatory: {OfferToReceiveAudio: !e.onHold, OfferToReceiveVideo: !e.onHold}};
                    e.impl.createAnswer(r).then(function (t) {
                        return t = l.PCFactory.get().addBandwidthParams(t), e.codecRearrange(t)
                    }).then(function (t) {
                        return e.srcLocalSDP = t.sdp, e.impl.setLocalDescription(t)
                    }).then(function () {
                        t({type: o.answer, sdp: e.impl.localDescription.sdp})
                    }).catch(function (e) {
                        n(e)
                    })
                })
            }, t.prototype._setRemoteDescription = function (e) {
                var t = new RTCSessionDescription({sdp: e, type: o.offer});
                return t = L.SDPMuggle.removeTIAS(t), this.srcRemoteSDP = e, this.impl.setRemoteDescription(t)
            }, t.prototype._processRemoteOffer = function (e) {
                var t = this;
                return this.iceRole = E.controlled, new Promise(function (n, r) {
                    var i = new RTCSessionDescription({sdp: e, type: o.offer});
                    t.srcRemoteSDP = e, i = L.SDPMuggle.removeTIAS(i), t.impl.setRemoteDescription(i).then(function () {
                        var e = {mandatory: {OfferToReceiveAudio: !t.onHold, OfferToReceiveVideo: !t.onHold}};
                        return t.impl.createAnswer(e)
                    }).then(function (e) {
                        return t.codecRearrange(e)
                    }).then(function (e) {
                        return t.srcLocalSDP = e.sdp, t.impl.setLocalDescription(e)
                    }).then(function () {
                        n(t.impl.localDescription.sdp)
                    }).catch(function (e) {
                        r(e)
                    })
                })
            }, t.prototype._close = function () {
                clearInterval(this.rtcCollectingCycle), "closed" !== !this.impl.signalingState && this.impl.close(), "undefined" != typeof this._call && C.CallstatsIo.get().sendFabricEvent(this.impl, C.CallstatsIoFabricEvent.fabricTerminated, this._call.id())
            }, t.prototype._addRemoteCandidate = function (e, t) {
                var n = this;
                return new Promise(function (o, r) {
                    try {
                        n.impl.addIceCandidate(new RTCIceCandidate({
                            candidate: e.substring(2),
                            sdpMLineIndex: t
                        })).then(function () {
                            o()
                        }).catch(function () {
                            o()
                        })
                    } catch (e) {
                        o()
                    }
                })
            }, t.prototype._bindLocalMedia = function () {
                var e = this;
                if ("undefined" != typeof this._localStream) {
                    var t = this._localStream.getTracks();
                    for (var n in t)"ended" !== t[n].readyState && "muted" !== t[n].readyState || (this._localStream.removeTrack(t[n]), this.log.error("Detected ended track kind " + t[n].kind + " remove it"));
                    "undefined" != typeof this.impl.addTrack ? (this._localStream && this.rtpSenders.forEach(function (t) {
                        e.impl.removeTrack(t)
                    }), this._localStream.getTracks().forEach(function (t) {
                        e.rtpSenders.push(e.impl.addTrack(t, e._localStream))
                    })) : this.impl.addStream(this._localStream), this._call && (this.dtmfSender = s.default.getDTMFSender(this.impl, this._call.id())), this.updateHoldState()
                }
            }, t.prototype._addTrack = function (e) {
                this.impl.addStream(e)
            }, t.prototype._unbindLocalMegia = function () {
                var e = this;
                "undefined" != typeof this.impl.addTrack ? this.rtpSenders.forEach(function (t) {
                    e.impl.removeTrack(t)
                }) : this.impl.removeStream(this._localStream)
            }, t.prototype._handleReinvite = function (e, t) {
                var n = this;
                return new Promise(function (r, i) {
                    if (n.banReinviteAnswer)return void i();
                    if (n.renegotiationInProgress === !1) {
                        n.renegotiationInProgress = !0;
                        var a = new RTCSessionDescription({sdp: t, type: o.offer});
                        n.srcRemoteSDP = t, a = L.SDPMuggle.removeTIAS(a), n.impl.setRemoteDescription(a).then(function () {
                            var e = {mandatory: {OfferToReceiveAudio: !n.onHold, OfferToReceiveVideo: !n.onHold}};
                            return n.impl.createAnswer(e)
                        }).then(function (e) {
                            return e = L.SDPMuggle.removeDoubleOpus(e), n.srcLocalSDP = e.sdp, n.impl.setLocalDescription(e)
                        }).then(function () {
                            g.VoxSignaling.get().callRemoteFunction(f.RemoteFunction.acceptReInvite, n._call.id(), e, n.impl.localDescription.sdp), n.renegotiationInProgress = !1, n._call.dispatchEvent({
                                name: m,
                                result: !0,
                                call: n._call
                            }), n.updateHoldState(), r()
                        }).catch(function (e) {
                            i(e), n.renegotiationInProgress = !1
                        })
                    } else if (n.renegotiationInProgress === !0) {
                        var s = new RTCSessionDescription({sdp: t, type: o.answer});
                        n.renegotiationInProgress = !1, n.srcRemoteSDP = t, s = L.SDPMuggle.removeTIAS(s), n.impl.setLocalDescription(n.pendingOffer).then(function () {
                            return n.impl.setRemoteDescription(s)
                        }).then(function () {
                            clearTimeout(n.renegotiationTimer), n._call.dispatchEvent({
                                name: m,
                                result: !0,
                                call: n._call
                            }), n.updateHoldState(), r()
                        }).catch(function (e) {
                            clearTimeout(n.renegotiationTimer), n._call.dispatchEvent({
                                name: m,
                                result: !1,
                                call: n._call
                            }), n.renegotiationInProgress = !1, n.log.error(JSON.stringify(e))
                        })
                    } else i(new Error("Universe was broken!"));
                })
            }, t.prototype.codecRearrange = function (e) {
                var t = this;
                return new Promise(function (n, o) {
                    var r = p.CallManager.get().calls[t.id];
                    if ("undefined" != typeof r) {
                        var i = new h.CodecSorter(e.sdp), a = i.getUserCodecList();
                        "undefined" != typeof r.rearangeCodecs ? r.rearangeCodecs(a).then(function (t) {
                            i.setUserCodecList(t), e.sdp = i.getSDP(), n(e)
                        }, function (e) {
                            t.log.error(JSON.stringify(e)), o(e)
                        }) : (t.log.info("No sdp transformer registered"), i.setUserCodecList(a), e.sdp = i.getSDP(), n(e))
                    } else n(e)
                })
            }, t.prototype._sendDTMF = function (e, t, n) {
                "undefined" != typeof this.dtmfSender && this.dtmfSender.insertDTMF(e, t, n)
            }, t.prototype._hold = function (e) {
                C.CallstatsIo.get().sendFabricEvent(this.impl, e ? C.CallstatsIoFabricEvent.fabricHold : C.CallstatsIoFabricEvent.fabricResume, this._call.id()), this.onHold = e, this.onRenegotiation()
            }, t.prototype._getDirections = function () {
                var e = {};
                return e.local = L.SDPMuggle.detectDirections(this.impl.localDescription.sdp), e.remote = L.SDPMuggle.detectDirections(this.impl.remoteDescription.sdp), e
            }, t.prototype._getStreamActivity = function () {
                var e = {};
                return e.local = this.getMediaActivity(this.impl.getLocalStreams()), e.remote = this.getMediaActivity(this.impl.getRemoteStreams()), e
            }, t.prototype.getMediaActivity = function (e) {
                return e.map(function (e) {
                    return e.getTracks().map(function (e) {
                        return {id: e.id, kind: e.kind, mutted: e.muted, active: e.enabled, label: e.label}
                    })
                })
            }, t.prototype._hdnFRSPrep = function () {
                this.banReinviteAnswer = !0
            }, t.prototype._hdnFRS = function () {
                this.renegotiationInProgress = !1, this.onRenegotiation()
            }, i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "onSignalingStateChange", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "getPCStats", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "onConnectionChange", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "onRenegotiation", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "onICECandidate", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "onAddTrack", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "onAddStream", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "wireRemoteStream", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_processRemoteAnswer", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_getLocalOffer", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_getLocalAnswer", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_setRemoteDescription", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_processRemoteOffer", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_close", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_addRemoteCandidate", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_bindLocalMedia", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_unbindLocalMegia", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_handleReinvite", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "codecRearrange", null), i([u.LogManager.d_trace(u.LogCategory.RTC)], t.prototype, "_sendDTMF", null), t
        }(a.PeerConnection);
        t.WebRTCPC = M
    }, function (e, t) {
        "use strict";
        !function (e) {
            e[e.Offline = "OFFLINE"] = "Offline", e[e.Online = "ONLINE"] = "Online", e[e.Ready = "READY"] = "Ready", e[e.InService = "IN_SERVICE"] = "InService", e[e.AfterService = "AFTER_SERVICE"] = "AfterService", e[e.Timeout = "TIMEOUT"] = "Timeout", e[e.DND = "DND"] = "DND"
        }(t.OperatorACDStatuses || (t.OperatorACDStatuses = {}));
        t.OperatorACDStatuses
    }, function (e, t) {
        "use strict";
        var n = function () {
            function e() {
                this.eventListeners = {}
            }

            return e.prototype.addEventListener = function (e, t) {
                "undefined" == typeof this.eventListeners[e] && (this.eventListeners[e] = []), this.eventListeners[e].push(t)
            }, e.prototype.dispatchEvent = function (e) {
                var t = e.name;
                if ("undefined" != typeof this.eventListeners[t])for (var n = 0; n < this.eventListeners[t].length; n++)"function" == typeof this.eventListeners[t][n] && this.eventListeners[t][n](e)
            }, e.prototype.removeEventListener = function (e, t) {
                if ("undefined" != typeof this.eventListeners[e])if ("function" == typeof t) {
                    for (var n = 0; n < this.eventListeners[e].length; n++)if (this.eventListeners[e][n] == t) {
                        this.eventListeners[e].splice(n, 1);
                        break
                    }
                } else this.eventListeners[e] = []
            }, e.prototype.on = function (e, t) {
                this.addEventListener(e, t)
            }, e.prototype.off = function (e, t) {
                this.removeEventListener(e, t)
            }, e
        }();
        t.Callbackable = n
    }, function (e, t, n) {
        "use strict";
        !function () {
            var t = n(5), o = t.log, r = t.browserDetails;
            e.exports.browserDetails = r, e.exports.extractVersion = t.extractVersion, e.exports.disableLog = t.disableLog;
            var i = n(46) || null, a = n(48) || null, s = n(51) || null, c = n(53) || null;
            switch (r.browser) {
                case"chrome":
                    if (!i || !i.shimPeerConnection)return void o("Chrome shim is not included in this adapter release.");
                    o("adapter.js shimming chrome."), e.exports.browserShim = i, i.shimGetUserMedia(), i.shimMediaStream(), t.shimCreateObjectURL(), i.shimSourceObject(), i.shimPeerConnection(), i.shimOnTrack(), i.shimGetSendersWithDtmf();
                    break;
                case"firefox":
                    if (!s || !s.shimPeerConnection)return void o("Firefox shim is not included in this adapter release.");
                    o("adapter.js shimming firefox."), e.exports.browserShim = s, s.shimGetUserMedia(), t.shimCreateObjectURL(), s.shimSourceObject(), s.shimPeerConnection(), s.shimOnTrack();
                    break;
                case"edge":
                    if (!a || !a.shimPeerConnection)return void o("MS edge shim is not included in this adapter release.");
                    o("adapter.js shimming edge."), e.exports.browserShim = a, a.shimGetUserMedia(), t.shimCreateObjectURL(), a.shimPeerConnection(), a.shimReplaceTrack();
                    break;
                case"safari":
                    if (!c)return void o("Safari shim is not included in this adapter release.");
                    o("adapter.js shimming safari."), e.exports.browserShim = c, c.shimOnAddStream(), c.shimGetUserMedia();
                    break;
                default:
                    o("Unsupported browser!")
            }
        }()
    }, function (e, t, n) {
        "use strict";
        var o = n(5).log, r = n(5).browserDetails, i = {
            shimMediaStream: function () {
                window.MediaStream = window.MediaStream || window.webkitMediaStream
            }, shimOnTrack: function () {
                "object" != typeof window || !window.RTCPeerConnection || "ontrack" in window.RTCPeerConnection.prototype || Object.defineProperty(window.RTCPeerConnection.prototype, "ontrack", {
                    get: function () {
                        return this._ontrack
                    }, set: function (e) {
                        var t = this;
                        this._ontrack && (this.removeEventListener("track", this._ontrack), this.removeEventListener("addstream", this._ontrackpoly)), this.addEventListener("track", this._ontrack = e), this.addEventListener("addstream", this._ontrackpoly = function (e) {
                            e.stream.addEventListener("addtrack", function (n) {
                                var o = new Event("track");
                                o.track = n.track, o.receiver = {track: n.track}, o.streams = [e.stream], t.dispatchEvent(o)
                            }), e.stream.getTracks().forEach(function (t) {
                                var n = new Event("track");
                                n.track = t, n.receiver = {track: t}, n.streams = [e.stream], this.dispatchEvent(n)
                            }.bind(this))
                        }.bind(this))
                    }
                })
            }, shimGetSendersWithDtmf: function () {
                if ("object" == typeof window && window.RTCPeerConnection && !("getSenders" in RTCPeerConnection.prototype) && "createDTMFSender" in RTCPeerConnection.prototype) {
                    RTCPeerConnection.prototype.getSenders = function () {
                        return this._senders
                    };
                    var e = RTCPeerConnection.prototype.addStream, t = RTCPeerConnection.prototype.removeStream;
                    RTCPeerConnection.prototype.addStream = function (t) {
                        var n = this;
                        n._senders = n._senders || [], e.apply(n, [t]), t.getTracks().forEach(function (e) {
                            n._senders.push({
                                track: e, get dtmf() {
                                    return void 0 === this._dtmf && ("audio" === e.kind ? this._dtmf = n.createDTMFSender(e) : this._dtmf = null), this._dtmf
                                }
                            })
                        })
                    }, RTCPeerConnection.prototype.removeStream = function (e) {
                        var n = this;
                        n._senders = n._senders || [], t.apply(n, [e]), e.getTracks().forEach(function (e) {
                            var t = n._senders.find(function (t) {
                                return t.track === e
                            });
                            t && n._senders.splice(n._senders.indexOf(t), 1)
                        })
                    }
                }
            }, shimSourceObject: function () {
                "object" == typeof window && (!window.HTMLMediaElement || "srcObject" in window.HTMLMediaElement.prototype || Object.defineProperty(window.HTMLMediaElement.prototype, "srcObject", {
                    get: function () {
                        return this._srcObject
                    }, set: function (e) {
                        var t = this;
                        return this._srcObject = e, this.src && URL.revokeObjectURL(this.src), e ? (this.src = URL.createObjectURL(e), e.addEventListener("addtrack", function () {
                            t.src && URL.revokeObjectURL(t.src), t.src = URL.createObjectURL(e)
                        }), void e.addEventListener("removetrack", function () {
                            t.src && URL.revokeObjectURL(t.src), t.src = URL.createObjectURL(e)
                        })) : void(this.src = "")
                    }
                }))
            }, shimPeerConnection: function () {
                if (window.RTCPeerConnection) {
                    var e = RTCPeerConnection;
                    window.RTCPeerConnection = function (t, n) {
                        if (t && t.iceServers) {
                            for (var o = [], r = 0; r < t.iceServers.length; r++) {
                                var i = t.iceServers[r];
                                !i.hasOwnProperty("urls") && i.hasOwnProperty("url") ? (console.warn("RTCIceServer.url is deprecated! Use urls instead."), i = JSON.parse(JSON.stringify(i)), i.urls = i.url, o.push(i)) : o.push(t.iceServers[r])
                            }
                            t.iceServers = o
                        }
                        return new e(t, n)
                    }, window.RTCPeerConnection.prototype = e.prototype, Object.defineProperty(window.RTCPeerConnection, "generateCertificate", {
                        get: function () {
                            return e.generateCertificate
                        }
                    })
                } else window.RTCPeerConnection = function (e, t) {
                    return o("PeerConnection"), e && e.iceTransportPolicy && (e.iceTransports = e.iceTransportPolicy), new webkitRTCPeerConnection(e, t)
                }, window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype, webkitRTCPeerConnection.generateCertificate && Object.defineProperty(window.RTCPeerConnection, "generateCertificate", {
                    get: function () {
                        return webkitRTCPeerConnection.generateCertificate
                    }
                });
                var t = RTCPeerConnection.prototype.getStats;
                RTCPeerConnection.prototype.getStats = function (e, n, o) {
                    var r = this, i = arguments;
                    if (arguments.length > 0 && "function" == typeof e)return t.apply(this, arguments);
                    if (0 === t.length && (0 === arguments.length || "function" != typeof arguments[0]))return t.apply(this, []);
                    var a = function (e) {
                        var t = {}, n = e.result();
                        return n.forEach(function (e) {
                            var n = {
                                id: e.id,
                                timestamp: e.timestamp,
                                type: {
                                    localcandidate: "local-candidate",
                                    remotecandidate: "remote-candidate"
                                }[e.type] || e.type
                            };
                            e.names().forEach(function (t) {
                                n[t] = e.stat(t)
                            }), t[n.id] = n
                        }), t
                    }, s = function (e) {
                        return new Map(Object.keys(e).map(function (t) {
                            return [t, e[t]]
                        }))
                    };
                    if (arguments.length >= 2) {
                        var c = function (e) {
                            i[1](s(a(e)))
                        };
                        return t.apply(this, [c, arguments[0]])
                    }
                    return new Promise(function (e, n) {
                        t.apply(r, [function (t) {
                            e(s(a(t)))
                        }, n])
                    }).then(n, o)
                }, r.version < 51 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (e) {
                    var t = RTCPeerConnection.prototype[e];
                    RTCPeerConnection.prototype[e] = function () {
                        var e = arguments, n = this, o = new Promise(function (o, r) {
                            t.apply(n, [e[0], o, r])
                        });
                        return e.length < 2 ? o : o.then(function () {
                            e[1].apply(null, [])
                        }, function (t) {
                            e.length >= 3 && e[2].apply(null, [t])
                        })
                    }
                }), r.version < 52 && ["createOffer", "createAnswer"].forEach(function (e) {
                    var t = RTCPeerConnection.prototype[e];
                    RTCPeerConnection.prototype[e] = function () {
                        var e = this;
                        if (arguments.length < 1 || 1 === arguments.length && "object" == typeof arguments[0]) {
                            var n = 1 === arguments.length ? arguments[0] : void 0;
                            return new Promise(function (o, r) {
                                t.apply(e, [o, r, n])
                            })
                        }
                        return t.apply(this, arguments)
                    }
                }), ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (e) {
                    var t = RTCPeerConnection.prototype[e];
                    RTCPeerConnection.prototype[e] = function () {
                        return arguments[0] = new ("addIceCandidate" === e ? RTCIceCandidate : RTCSessionDescription)(arguments[0]), t.apply(this, arguments)
                    }
                });
                var n = RTCPeerConnection.prototype.addIceCandidate;
                RTCPeerConnection.prototype.addIceCandidate = function () {
                    return arguments[0] ? n.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve())
                }
            }
        };
        e.exports = {
            shimMediaStream: i.shimMediaStream,
            shimOnTrack: i.shimOnTrack,
            shimGetSendersWithDtmf: i.shimGetSendersWithDtmf,
            shimSourceObject: i.shimSourceObject,
            shimPeerConnection: i.shimPeerConnection,
            shimGetUserMedia: n(47)
        }
    }, function (e, t, n) {
        "use strict";
        var o = n(5).log, r = n(5).browserDetails;
        e.exports = function () {
            var e = function (e) {
                if ("object" != typeof e || e.mandatory || e.optional)return e;
                var t = {};
                return Object.keys(e).forEach(function (n) {
                    if ("require" !== n && "advanced" !== n && "mediaSource" !== n) {
                        var o = "object" == typeof e[n] ? e[n] : {ideal: e[n]};
                        void 0 !== o.exact && "number" == typeof o.exact && (o.min = o.max = o.exact);
                        var r = function (e, t) {
                            return e ? e + t.charAt(0).toUpperCase() + t.slice(1) : "deviceId" === t ? "sourceId" : t
                        };
                        if (void 0 !== o.ideal) {
                            t.optional = t.optional || [];
                            var i = {};
                            "number" == typeof o.ideal ? (i[r("min", n)] = o.ideal, t.optional.push(i), i = {}, i[r("max", n)] = o.ideal, t.optional.push(i)) : (i[r("", n)] = o.ideal, t.optional.push(i))
                        }
                        void 0 !== o.exact && "number" != typeof o.exact ? (t.mandatory = t.mandatory || {}, t.mandatory[r("", n)] = o.exact) : ["min", "max"].forEach(function (e) {
                            void 0 !== o[e] && (t.mandatory = t.mandatory || {}, t.mandatory[r(e, n)] = o[e])
                        })
                    }
                }), e.advanced && (t.optional = (t.optional || []).concat(e.advanced)), t
            }, t = function (t, n) {
                if (t = JSON.parse(JSON.stringify(t)), t && t.audio && (t.audio = e(t.audio)), t && "object" == typeof t.video) {
                    var i = t.video.facingMode;
                    i = i && ("object" == typeof i ? i : {ideal: i});
                    var a = r.version < 61;
                    if (i && ("user" === i.exact || "environment" === i.exact || "user" === i.ideal || "environment" === i.ideal) && (!navigator.mediaDevices.getSupportedConstraints || !navigator.mediaDevices.getSupportedConstraints().facingMode || a)) {
                        delete t.video.facingMode;
                        var s;
                        if ("environment" === i.exact || "environment" === i.ideal ? s = ["back", "rear"] : "user" !== i.exact && "user" !== i.ideal || (s = ["front"]), s)return navigator.mediaDevices.enumerateDevices().then(function (r) {
                            r = r.filter(function (e) {
                                return "videoinput" === e.kind
                            });
                            var a = r.find(function (e) {
                                return s.some(function (t) {
                                    return e.label.toLowerCase().indexOf(t) !== -1
                                })
                            });
                            return !a && r.length && s.indexOf("back") !== -1 && (a = r[r.length - 1]), a && (t.video.deviceId = i.exact ? {exact: a.deviceId} : {ideal: a.deviceId}), t.video = e(t.video), o("chrome: " + JSON.stringify(t)), n(t)
                        })
                    }
                    t.video = e(t.video)
                }
                return o("chrome: " + JSON.stringify(t)), n(t)
            }, n = function (e) {
                return {
                    name: {
                        PermissionDeniedError: "NotAllowedError",
                        ConstraintNotSatisfiedError: "OverconstrainedError"
                    }[e.name] || e.name, message: e.message, constraint: e.constraintName, toString: function () {
                        return this.name + (this.message && ": ") + this.message
                    }
                }
            }, i = function (e, o, r) {
                t(e, function (e) {
                    navigator.webkitGetUserMedia(e, o, function (e) {
                        r(n(e))
                    })
                })
            };
            navigator.getUserMedia = i;
            var a = function (e) {
                return new Promise(function (t, n) {
                    navigator.getUserMedia(e, t, n)
                })
            };
            if (navigator.mediaDevices || (navigator.mediaDevices = {
                    getUserMedia: a, enumerateDevices: function () {
                        return new Promise(function (e) {
                            var t = {audio: "audioinput", video: "videoinput"};
                            return MediaStreamTrack.getSources(function (n) {
                                e(n.map(function (e) {
                                    return {label: e.label, kind: t[e.kind], deviceId: e.id, groupId: ""}
                                }))
                            })
                        })
                    }, getSupportedConstraints: function () {
                        return {
                            deviceId: !0,
                            echoCancellation: !0,
                            facingMode: !0,
                            frameRate: !0,
                            height: !0,
                            width: !0
                        }
                    }
                }), navigator.mediaDevices.getUserMedia) {
                var s = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
                navigator.mediaDevices.getUserMedia = function (e) {
                    return t(e, function (e) {
                        return s(e).then(function (t) {
                            if (e.audio && !t.getAudioTracks().length || e.video && !t.getVideoTracks().length)throw t.getTracks().forEach(function (e) {
                                e.stop()
                            }), new DOMException("", "NotFoundError");
                            return t
                        }, function (e) {
                            return Promise.reject(n(e))
                        })
                    })
                }
            } else navigator.mediaDevices.getUserMedia = function (e) {
                return a(e)
            };
            "undefined" == typeof navigator.mediaDevices.addEventListener && (navigator.mediaDevices.addEventListener = function () {
                o("Dummy mediaDevices.addEventListener called.")
            }), "undefined" == typeof navigator.mediaDevices.removeEventListener && (navigator.mediaDevices.removeEventListener = function () {
                o("Dummy mediaDevices.removeEventListener called.")
            })
        }
    }, function (e, t, n) {
        "use strict";
        var o = n(5).browserDetails, r = n(50);
        e.exports = {
            shimGetUserMedia: n(49), shimPeerConnection: function () {
                if (window.RTCIceGatherer && (window.RTCIceCandidate || (window.RTCIceCandidate = function (e) {
                        return e
                    }), window.RTCSessionDescription || (window.RTCSessionDescription = function (e) {
                        return e
                    }), o.version < 15025)) {
                    var e = Object.getOwnPropertyDescriptor(MediaStreamTrack.prototype, "enabled");
                    Object.defineProperty(MediaStreamTrack.prototype, "enabled", {
                        set: function (t) {
                            e.set.call(this, t);
                            var n = new Event("enabled");
                            n.enabled = t, this.dispatchEvent(n)
                        }
                    })
                }
                window.RTCPeerConnection = r(o.version)
            }, shimReplaceTrack: function () {
                !window.RTCRtpSender || "replaceTrack" in RTCRtpSender.prototype || (RTCRtpSender.prototype.replaceTrack = RTCRtpSender.prototype.setTrack)
            }
        }
    }, function (e, t) {
        "use strict";
        e.exports = function () {
            var e = function (e) {
                return {
                    name: {PermissionDeniedError: "NotAllowedError"}[e.name] || e.name,
                    message: e.message,
                    constraint: e.constraint,
                    toString: function () {
                        return this.name
                    }
                }
            }, t = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
            navigator.mediaDevices.getUserMedia = function (n) {
                return t(n).catch(function (t) {
                    return Promise.reject(e(t))
                })
            }
        }
    }, function (e, t, n) {
        "use strict";
        function o(e) {
            var t = e.filter(function (e) {
                return "audio" === e.kind
            }), n = e.filter(function (e) {
                return "video" === e.kind
            });
            for (e = []; t.length || n.length;)t.length && e.push(t.shift()), n.length && e.push(n.shift());
            return e
        }

        function r(e, t) {
            var n = !1;
            return e = JSON.parse(JSON.stringify(e)), e.filter(function (e) {
                if (e && (e.urls || e.url)) {
                    var o = e.urls || e.url;
                    e.url && !e.urls && console.warn("RTCIceServer.url is deprecated! Use urls instead.");
                    var r = "string" == typeof o;
                    return r && (o = [o]), o = o.filter(function (e) {
                        var o = 0 === e.indexOf("turn:") && e.indexOf("transport=udp") !== -1 && e.indexOf("turn:[") === -1 && !n;
                        return o ? (n = !0, !0) : 0 === e.indexOf("stun:") && t >= 14393
                    }), delete e.url, e.urls = r ? o[0] : o, !!o.length
                }
                return !1
            })
        }

        var i = n(30);
        e.exports = function (e) {
            var t = function (t) {
                var n = this, o = document.createDocumentFragment();
                if (["addEventListener", "removeEventListener", "dispatchEvent"].forEach(function (e) {
                        n[e] = o[e].bind(o)
                    }), this.onicecandidate = null, this.onaddstream = null, this.ontrack = null, this.onremovestream = null, this.onsignalingstatechange = null, this.oniceconnectionstatechange = null, this.onicegatheringstatechange = null, this.onnegotiationneeded = null, this.ondatachannel = null, this.canTrickleIceCandidates = null, this.localStreams = [], this.remoteStreams = [], this.getLocalStreams = function () {
                        return n.localStreams
                    }, this.getRemoteStreams = function () {
                        return n.remoteStreams
                    }, this.localDescription = new RTCSessionDescription({
                        type: "",
                        sdp: ""
                    }), this.remoteDescription = new RTCSessionDescription({
                        type: "",
                        sdp: ""
                    }), this.signalingState = "stable", this.iceConnectionState = "new", this.iceGatheringState = "new", this.iceOptions = {
                        gatherPolicy: "all",
                        iceServers: []
                    }, t && t.iceTransportPolicy)switch (t.iceTransportPolicy) {
                    case"all":
                    case"relay":
                        this.iceOptions.gatherPolicy = t.iceTransportPolicy
                }
                this.usingBundle = t && "max-bundle" === t.bundlePolicy, t && t.iceServers && (this.iceOptions.iceServers = r(t.iceServers, e)), this._config = t || {}, this.transceivers = [], this._localIceCandidatesBuffer = []
            };
            return t.prototype._emitGatheringStateChange = function () {
                var e = new Event("icegatheringstatechange");
                this.dispatchEvent(e), null !== this.onicegatheringstatechange && this.onicegatheringstatechange(e)
            }, t.prototype._emitBufferedCandidates = function () {
                var e = this, t = i.splitSections(e.localDescription.sdp);
                this._localIceCandidatesBuffer.forEach(function (n) {
                    var o = !n.candidate || 0 === Object.keys(n.candidate).length;
                    if (o)for (var r = 1; r < t.length; r++)t[r].indexOf("\r\na=end-of-candidates\r\n") === -1 && (t[r] += "a=end-of-candidates\r\n"); else t[n.candidate.sdpMLineIndex + 1] += "a=" + n.candidate.candidate + "\r\n";
                    if (e.localDescription.sdp = t.join(""), e.dispatchEvent(n), null !== e.onicecandidate && e.onicecandidate(n), !n.candidate && "complete" !== e.iceGatheringState) {
                        var i = e.transceivers.every(function (e) {
                            return e.iceGatherer && "completed" === e.iceGatherer.state
                        });
                        i && "complete" !== e.iceGatheringStateChange && (e.iceGatheringState = "complete", e._emitGatheringStateChange())
                    }
                }), this._localIceCandidatesBuffer = []
            }, t.prototype.getConfiguration = function () {
                return this._config
            }, t.prototype.addStream = function (t) {
                if (e >= 15025) this.localStreams.push(t); else {
                    var n = t.clone();
                    t.getTracks().forEach(function (e, t) {
                        var o = n.getTracks()[t];
                        e.addEventListener("enabled", function (e) {
                            o.enabled = e.enabled
                        })
                    }), this.localStreams.push(n)
                }
                this._maybeFireNegotiationNeeded()
            }, t.prototype.removeStream = function (e) {
                var t = this.localStreams.indexOf(e);
                t > -1 && (this.localStreams.splice(t, 1), this._maybeFireNegotiationNeeded())
            }, t.prototype.getSenders = function () {
                return this.transceivers.filter(function (e) {
                    return !!e.rtpSender
                }).map(function (e) {
                    return e.rtpSender
                })
            }, t.prototype.getReceivers = function () {
                return this.transceivers.filter(function (e) {
                    return !!e.rtpReceiver
                }).map(function (e) {
                    return e.rtpReceiver
                })
            }, t.prototype._getCommonCapabilities = function (e, t) {
                var n = {codecs: [], headerExtensions: [], fecMechanisms: []}, o = function (e, t) {
                    e = parseInt(e, 10);
                    for (var n = 0; n < t.length; n++)if (t[n].payloadType === e || t[n].preferredPayloadType === e)return t[n]
                }, r = function (e, t, n, r) {
                    var i = o(e.parameters.apt, n), a = o(t.parameters.apt, r);
                    return i && a && i.name.toLowerCase() === a.name.toLowerCase()
                };
                return e.codecs.forEach(function (o) {
                    for (var i = 0; i < t.codecs.length; i++) {
                        var a = t.codecs[i];
                        if (o.name.toLowerCase() === a.name.toLowerCase() && o.clockRate === a.clockRate) {
                            if ("rtx" === o.name.toLowerCase() && o.parameters && a.parameters.apt && !r(o, a, e.codecs, t.codecs))continue;
                            a = JSON.parse(JSON.stringify(a)), a.numChannels = Math.min(o.numChannels, a.numChannels), n.codecs.push(a), a.rtcpFeedback = a.rtcpFeedback.filter(function (e) {
                                for (var t = 0; t < o.rtcpFeedback.length; t++)if (o.rtcpFeedback[t].type === e.type && o.rtcpFeedback[t].parameter === e.parameter)return !0;
                                return !1
                            });
                            break
                        }
                    }
                }), e.headerExtensions.forEach(function (e) {
                    for (var o = 0; o < t.headerExtensions.length; o++) {
                        var r = t.headerExtensions[o];
                        if (e.uri === r.uri) {
                            n.headerExtensions.push(r);
                            break
                        }
                    }
                }), n
            }, t.prototype._createIceAndDtlsTransports = function (e, t) {
                var n = this, o = new RTCIceGatherer(n.iceOptions), r = new RTCIceTransport(o);
                o.onlocalcandidate = function (a) {
                    var s = new Event("icecandidate");
                    s.candidate = {sdpMid: e, sdpMLineIndex: t};
                    var c = a.candidate, d = !c || 0 === Object.keys(c).length;
                    d ? void 0 === o.state && (o.state = "completed") : (c.component = "RTCP" === r.component ? 2 : 1, s.candidate.candidate = i.writeCandidate(c));
                    var l = i.splitSections(n.localDescription.sdp);
                    d ? l[s.candidate.sdpMLineIndex + 1] += "a=end-of-candidates\r\n" : l[s.candidate.sdpMLineIndex + 1] += "a=" + s.candidate.candidate + "\r\n", n.localDescription.sdp = l.join("");
                    var u = n._pendingOffer ? n._pendingOffer : n.transceivers, g = u.every(function (e) {
                        return e.iceGatherer && "completed" === e.iceGatherer.state
                    });
                    switch (n.iceGatheringState) {
                        case"new":
                            d || n._localIceCandidatesBuffer.push(s), d && g && n._localIceCandidatesBuffer.push(new Event("icecandidate"));
                            break;
                        case"gathering":
                            n._emitBufferedCandidates(), d || (n.dispatchEvent(s), null !== n.onicecandidate && n.onicecandidate(s)), g && (n.dispatchEvent(new Event("icecandidate")), null !== n.onicecandidate && n.onicecandidate(new Event("icecandidate")), n.iceGatheringState = "complete", n._emitGatheringStateChange());
                            break;
                        case"complete":
                    }
                }, r.onicestatechange = function () {
                    n._updateConnectionState()
                };
                var a = new RTCDtlsTransport(r);
                return a.ondtlsstatechange = function () {
                    n._updateConnectionState()
                }, a.onerror = function () {
                    a.state = "failed", n._updateConnectionState()
                }, {iceGatherer: o, iceTransport: r, dtlsTransport: a}
            }, t.prototype._disposeIceAndDtlsTransports = function (e) {
                var t = this.transceivers[e].iceGatherer;
                t && (delete t.onlocalcandidate, delete this.transceivers[e].iceGatherer);
                var n = this.transceivers[e].iceTransport;
                n && (delete n.onicestatechange, delete this.transceivers[e].iceTransport);
                var o = this.transceivers[e].dtlsTransport;
                o && (delete o.ondtlssttatechange, delete o.onerror, delete this.transceivers[e].dtlsTransport)
            }, t.prototype._transceive = function (t, n, o) {
                var r = this._getCommonCapabilities(t.localCapabilities, t.remoteCapabilities);
                n && t.rtpSender && (r.encodings = t.sendEncodingParameters, r.rtcp = {
                    cname: i.localCName,
                    compound: t.rtcpParameters.compound
                }, t.recvEncodingParameters.length && (r.rtcp.ssrc = t.recvEncodingParameters[0].ssrc), t.rtpSender.send(r)), o && t.rtpReceiver && ("video" === t.kind && t.recvEncodingParameters && e < 15019 && t.recvEncodingParameters.forEach(function (e) {
                    delete e.rtx
                }), r.encodings = t.recvEncodingParameters, r.rtcp = {
                    cname: t.rtcpParameters.cname,
                    compound: t.rtcpParameters.compound
                }, t.sendEncodingParameters.length && (r.rtcp.ssrc = t.sendEncodingParameters[0].ssrc), t.rtpReceiver.receive(r))
            }, t.prototype.setLocalDescription = function (e) {
                var t, n, o = this;
                if ("offer" === e.type) this._pendingOffer && (t = i.splitSections(e.sdp), n = t.shift(), t.forEach(function (e, t) {
                    var n = i.parseRtpParameters(e);
                    o._pendingOffer[t].localCapabilities = n
                }), this.transceivers = this._pendingOffer, delete this._pendingOffer); else if ("answer" === e.type) {
                    t = i.splitSections(o.remoteDescription.sdp), n = t.shift();
                    var r = i.matchPrefix(n, "a=ice-lite").length > 0;
                    t.forEach(function (e, t) {
                        var a = o.transceivers[t], s = a.iceGatherer, c = a.iceTransport, d = a.dtlsTransport,
                            l = a.localCapabilities, u = a.remoteCapabilities,
                            g = "0" === e.split("\n", 1)[0].split(" ", 2)[1];
                        if (!g && !a.isDatachannel) {
                            var p = i.getIceParameters(e, n), f = i.getDtlsParameters(e, n);
                            r && (f.role = "server"), o.usingBundle && 0 !== t || (c.start(s, p, r ? "controlling" : "controlled"), d.start(f));
                            var h = o._getCommonCapabilities(l, u);
                            o._transceive(a, h.codecs.length > 0, !1)
                        }
                    })
                }
                switch (this.localDescription = {type: e.type, sdp: e.sdp}, e.type) {
                    case"offer":
                        this._updateSignalingState("have-local-offer");
                        break;
                    case"answer":
                        this._updateSignalingState("stable");
                        break;
                    default:
                        throw new TypeError('unsupported type "' + e.type + '"')
                }
                var a = arguments.length > 1 && "function" == typeof arguments[1];
                if (a) {
                    var s = arguments[1];
                    window.setTimeout(function () {
                        s(), "new" === o.iceGatheringState && (o.iceGatheringState = "gathering", o._emitGatheringStateChange()), o._emitBufferedCandidates()
                    }, 0)
                }
                var c = Promise.resolve();
                return c.then(function () {
                    a || ("new" === o.iceGatheringState && (o.iceGatheringState = "gathering", o._emitGatheringStateChange()), window.setTimeout(o._emitBufferedCandidates.bind(o), 500))
                }), c
            }, t.prototype.setRemoteDescription = function (t) {
                var n = this, o = {}, r = [], a = i.splitSections(t.sdp), s = a.shift(),
                    c = i.matchPrefix(s, "a=ice-lite").length > 0, d = i.matchPrefix(s, "a=group:BUNDLE ").length > 0,
                    l = i.matchPrefix(s, "a=ice-options:")[0];
                switch (l ? this.canTrickleIceCandidates = l.substr(14).split(" ").indexOf("trickle") >= 0 : this.canTrickleIceCandidates = !1, a.forEach(function (a, l) {
                    var u = i.splitLines(a), g = u[0].substr(2).split(" "), p = g[0], f = "0" === g[1],
                        h = i.getDirection(a, s), v = i.parseMsid(a), C = i.matchPrefix(a, "a=mid:");
                    if (C = C.length ? C[0].substr(6) : i.generateIdentifier(), "application" === p && "DTLS/SCTP" === g[2])return void(n.transceivers[l] = {
                        mid: C,
                        isDatachannel: !0
                    });
                    var y, m, L, S, E, M, _, R, T, P, w, I, b = i.parseRtpParameters(a);
                    f || (w = i.getIceParameters(a, s), I = i.getDtlsParameters(a, s), I.role = "client"), R = i.parseRtpEncodingParameters(a);
                    var A = i.parseRtcpParameters(a), O = i.matchPrefix(a, "a=end-of-candidates", s).length > 0,
                        D = i.matchPrefix(a, "a=candidate:").map(function (e) {
                            return i.parseCandidate(e)
                        }).filter(function (e) {
                            return "1" === e.component
                        });
                    if ("offer" !== t.type || f) "answer" !== t.type || f || (d && l > 0 && (n._disposeIceAndDtlsTransports(l), n.transceivers[l].iceGatherer = n.transceivers[0].iceGatherer, n.transceivers[l].iceTransport = n.transceivers[0].iceTransport, n.transceivers[l].dtlsTransport = n.transceivers[0].dtlsTransport, n.transceivers[l].rtpSender && n.transceivers[l].rtpSender.setTransport(n.transceivers[0].dtlsTransport), n.transceivers[l].rtpReceiver && n.transceivers[l].rtpReceiver.setTransport(n.transceivers[0].dtlsTransport)), y = n.transceivers[l], m = y.iceGatherer, L = y.iceTransport, S = y.dtlsTransport, E = y.rtpSender, M = y.rtpReceiver, _ = y.sendEncodingParameters, T = y.localCapabilities, n.transceivers[l].recvEncodingParameters = R, n.transceivers[l].remoteCapabilities = b, n.transceivers[l].rtcpParameters = A, (c || O) && D.length && L.setRemoteCandidates(D), d && 0 !== l || (L.start(m, w, "controlling"), S.start(I)), n._transceive(y, "sendrecv" === h || "recvonly" === h, "sendrecv" === h || "sendonly" === h), !M || "sendrecv" !== h && "sendonly" !== h ? delete y.rtpReceiver : (P = M.track, r.push([P, M]), v ? (o[v.stream] || (o[v.stream] = new MediaStream), o[v.stream].addTrack(P)) : (o.default || (o.default = new MediaStream), o.default.addTrack(P)))); else {
                        var N = d && l > 0 ? {
                            iceGatherer: n.transceivers[0].iceGatherer,
                            iceTransport: n.transceivers[0].iceTransport,
                            dtlsTransport: n.transceivers[0].dtlsTransport
                        } : n._createIceAndDtlsTransports(C, l);
                        if (!O || d && 0 !== l || N.iceTransport.setRemoteCandidates(D), T = RTCRtpReceiver.getCapabilities(p), e < 15019 && (T.codecs = T.codecs.filter(function (e) {
                                return "rtx" !== e.name
                            })), _ = [{ssrc: 1001 * (2 * l + 2)}], "sendrecv" !== h && "sendonly" !== h || (M = new RTCRtpReceiver(N.dtlsTransport, p), P = M.track, v ? (o[v.stream] || (o[v.stream] = new MediaStream, Object.defineProperty(o[v.stream], "id", {
                                get: function () {
                                    return v.stream
                                }
                            })), Object.defineProperty(P, "id", {
                                get: function () {
                                    return v.track
                                }
                            }), o[v.stream].addTrack(P), r.push([P, M, o[v.stream]])) : (o.default || (o.default = new MediaStream), o.default.addTrack(P), r.push([P, M, o.default]))), n.localStreams.length > 0 && n.localStreams[0].getTracks().length >= l) {
                            var k;
                            "audio" === p ? k = n.localStreams[0].getAudioTracks()[0] : "video" === p && (k = n.localStreams[0].getVideoTracks()[0]), k && (e >= 15019 && "video" === p && (_[0].rtx = {ssrc: 1001 * (2 * l + 2) + 1}), E = new RTCRtpSender(k, N.dtlsTransport))
                        }
                        n.transceivers[l] = {
                            iceGatherer: N.iceGatherer,
                            iceTransport: N.iceTransport,
                            dtlsTransport: N.dtlsTransport,
                            localCapabilities: T,
                            remoteCapabilities: b,
                            rtpSender: E,
                            rtpReceiver: M,
                            kind: p,
                            mid: C,
                            rtcpParameters: A,
                            sendEncodingParameters: _,
                            recvEncodingParameters: R
                        }, n._transceive(n.transceivers[l], !1, "sendrecv" === h || "sendonly" === h)
                    }
                }), this.usingBundle = d, this.remoteDescription = {type: t.type, sdp: t.sdp}, t.type) {
                    case"offer":
                        this._updateSignalingState("have-remote-offer");
                        break;
                    case"answer":
                        this._updateSignalingState("stable");
                        break;
                    default:
                        throw new TypeError('unsupported type "' + t.type + '"')
                }
                return Object.keys(o).forEach(function (e) {
                    var t = o[e];
                    if (t.getTracks().length) {
                        n.remoteStreams.push(t);
                        var i = new Event("addstream");
                        i.stream = t, n.dispatchEvent(i), null !== n.onaddstream && window.setTimeout(function () {
                            n.onaddstream(i)
                        }, 0), r.forEach(function (e) {
                            var o = e[0], r = e[1];
                            if (t.id === e[2].id) {
                                var i = new Event("track");
                                i.track = o, i.receiver = r, i.streams = [t], n.dispatchEvent(i), null !== n.ontrack && window.setTimeout(function () {
                                    n.ontrack(i)
                                }, 0)
                            }
                        })
                    }
                }), arguments.length > 1 && "function" == typeof arguments[1] && window.setTimeout(arguments[1], 0), Promise.resolve()
            }, t.prototype.close = function () {
                this.transceivers.forEach(function (e) {
                    e.iceTransport && e.iceTransport.stop(), e.dtlsTransport && e.dtlsTransport.stop(), e.rtpSender && e.rtpSender.stop(), e.rtpReceiver && e.rtpReceiver.stop()
                }), this._updateSignalingState("closed")
            }, t.prototype._updateSignalingState = function (e) {
                this.signalingState = e;
                var t = new Event("signalingstatechange");
                this.dispatchEvent(t), null !== this.onsignalingstatechange && this.onsignalingstatechange(t)
            }, t.prototype._maybeFireNegotiationNeeded = function () {
                var e = new Event("negotiationneeded");
                this.dispatchEvent(e), null !== this.onnegotiationneeded && this.onnegotiationneeded(e)
            }, t.prototype._updateConnectionState = function () {
                var e, t = this,
                    n = {new: 0, closed: 0, connecting: 0, checking: 0, connected: 0, completed: 0, failed: 0};
                if (this.transceivers.forEach(function (e) {
                        n[e.iceTransport.state]++, n[e.dtlsTransport.state]++
                    }), n.connected += n.completed, e = "new", n.failed > 0 ? e = "failed" : n.connecting > 0 || n.checking > 0 ? e = "connecting" : n.disconnected > 0 ? e = "disconnected" : n.new > 0 ? e = "new" : (n.connected > 0 || n.completed > 0) && (e = "connected"), e !== t.iceConnectionState) {
                    t.iceConnectionState = e;
                    var o = new Event("iceconnectionstatechange");
                    this.dispatchEvent(o), null !== this.oniceconnectionstatechange && this.oniceconnectionstatechange(o)
                }
            }, t.prototype.createOffer = function () {
                var t = this;
                if (this._pendingOffer)throw new Error("createOffer called while there is a pending offer.");
                var n;
                1 === arguments.length && "function" != typeof arguments[0] ? n = arguments[0] : 3 === arguments.length && (n = arguments[2]);
                var r = [], a = 0, s = 0;
                if (this.localStreams.length && (a = this.localStreams.reduce(function (e, t) {
                        return e + t.getAudioTracks().length
                    }, 0), s = this.localStreams.reduce(function (e, t) {
                        return e + t.getVideoTracks().length
                    }, 0)), n) {
                    if (n.mandatory || n.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");
                    void 0 !== n.offerToReceiveAudio && (a = n.offerToReceiveAudio), void 0 !== n.offerToReceiveVideo && (s = n.offerToReceiveVideo)
                }
                for (this.localStreams.forEach(function (e) {
                    e.getTracks().forEach(function (t) {
                        r.push({
                            kind: t.kind,
                            track: t,
                            stream: e,
                            wantReceive: "audio" === t.kind ? a > 0 : s > 0
                        }), "audio" === t.kind ? a-- : "video" === t.kind && s--
                    })
                }); a > 0 || s > 0;)a > 0 && (r.push({
                    kind: "audio",
                    wantReceive: !0
                }), a--), s > 0 && (r.push({kind: "video", wantReceive: !0}), s--);
                r = o(r);
                var c = i.writeSessionBoilerplate(), d = [];
                r.forEach(function (n, o) {
                    var r = n.track, a = n.kind, s = i.generateIdentifier(), c = t.usingBundle && o > 0 ? {
                        iceGatherer: d[0].iceGatherer, iceTransport: d[0].iceTransport,
                        dtlsTransport: d[0].dtlsTransport
                    } : t._createIceAndDtlsTransports(s, o), l = RTCRtpSender.getCapabilities(a);
                    e < 15019 && (l.codecs = l.codecs.filter(function (e) {
                        return "rtx" !== e.name
                    })), l.codecs.forEach(function (e) {
                        "H264" === e.name && void 0 === e.parameters["level-asymmetry-allowed"] && (e.parameters["level-asymmetry-allowed"] = "1")
                    });
                    var u, g, p = [{ssrc: 1001 * (2 * o + 1)}];
                    r && (e >= 15019 && "video" === a && (p[0].rtx = {ssrc: 1001 * (2 * o + 1) + 1}), u = new RTCRtpSender(r, c.dtlsTransport)), n.wantReceive && (g = new RTCRtpReceiver(c.dtlsTransport, a)), d[o] = {
                        iceGatherer: c.iceGatherer,
                        iceTransport: c.iceTransport,
                        dtlsTransport: c.dtlsTransport,
                        localCapabilities: l,
                        remoteCapabilities: null,
                        rtpSender: u,
                        rtpReceiver: g,
                        kind: a,
                        mid: s,
                        sendEncodingParameters: p,
                        recvEncodingParameters: null
                    }
                }), "max-compat" !== this._config.bundlePolicy && (c += "a=group:BUNDLE " + d.map(function (e) {
                        return e.mid
                    }).join(" ") + "\r\n"), c += "a=ice-options:trickle\r\n", r.forEach(function (e, t) {
                    var n = d[t];
                    c += i.writeMediaSection(n, n.localCapabilities, "offer", e.stream), c += "a=rtcp-rsize\r\n"
                }), this._pendingOffer = d;
                var l = new RTCSessionDescription({type: "offer", sdp: c});
                return arguments.length && "function" == typeof arguments[0] && window.setTimeout(arguments[0], 0, l), Promise.resolve(l)
            }, t.prototype.createAnswer = function () {
                var e = this, t = i.writeSessionBoilerplate();
                this.usingBundle && (t += "a=group:BUNDLE " + this.transceivers.map(function (e) {
                        return e.mid
                    }).join(" ") + "\r\n"), this.transceivers.forEach(function (n) {
                    if (n.isDatachannel)return void(t += "m=application 0 DTLS/SCTP 5000\r\nc=IN IP4 0.0.0.0\r\na=mid:" + n.mid + "\r\n");
                    var o = e._getCommonCapabilities(n.localCapabilities, n.remoteCapabilities),
                        r = o.codecs.filter(function (e) {
                            return "rtx" === e.name.toLowerCase()
                        }).length;
                    !r && n.sendEncodingParameters[0].rtx && delete n.sendEncodingParameters[0].rtx, t += i.writeMediaSection(n, o, "answer", e.localStreams[0]), n.rtcpParameters && n.rtcpParameters.reducedSize && (t += "a=rtcp-rsize\r\n")
                });
                var n = new RTCSessionDescription({type: "answer", sdp: t});
                return arguments.length && "function" == typeof arguments[0] && window.setTimeout(arguments[0], 0, n), Promise.resolve(n)
            }, t.prototype.addIceCandidate = function (e) {
                if (e) {
                    var t = e.sdpMLineIndex;
                    if (e.sdpMid)for (var n = 0; n < this.transceivers.length; n++)if (this.transceivers[n].mid === e.sdpMid) {
                        t = n;
                        break
                    }
                    var o = this.transceivers[t];
                    if (o) {
                        var r = Object.keys(e.candidate).length > 0 ? i.parseCandidate(e.candidate) : {};
                        if ("tcp" === r.protocol && (0 === r.port || 9 === r.port))return Promise.resolve();
                        if ("1" !== r.component)return Promise.resolve();
                        o.iceTransport.addRemoteCandidate(r);
                        var a = i.splitSections(this.remoteDescription.sdp);
                        a[t + 1] += (r.type ? e.candidate.trim() : "a=end-of-candidates") + "\r\n", this.remoteDescription.sdp = a.join("")
                    }
                } else for (var s = 0; s < this.transceivers.length; s++)if (this.transceivers[s].iceTransport.addRemoteCandidate({}), this.usingBundle)return Promise.resolve();
                return arguments.length > 1 && "function" == typeof arguments[1] && window.setTimeout(arguments[1], 0), Promise.resolve()
            }, t.prototype.getStats = function () {
                var e = [];
                this.transceivers.forEach(function (t) {
                    ["rtpSender", "rtpReceiver", "iceGatherer", "iceTransport", "dtlsTransport"].forEach(function (n) {
                        t[n] && e.push(t[n].getStats())
                    })
                });
                var t = arguments.length > 1 && "function" == typeof arguments[1] && arguments[1], n = function (e) {
                    return {
                            inboundrtp: "inbound-rtp",
                            outboundrtp: "outbound-rtp",
                            candidatepair: "candidate-pair",
                            localcandidate: "local-candidate",
                            remotecandidate: "remote-candidate"
                        }[e.type] || e.type
                };
                return new Promise(function (o) {
                    var r = new Map;
                    Promise.all(e).then(function (e) {
                        e.forEach(function (e) {
                            Object.keys(e).forEach(function (t) {
                                e[t].type = n(e[t]), r.set(t, e[t])
                            })
                        }), t && window.setTimeout(t, 0, r), o(r)
                    })
                })
            }, t
        }
    }, function (e, t, n) {
        "use strict";
        var o = n(5).browserDetails, r = {
            shimOnTrack: function () {
                "object" != typeof window || !window.RTCPeerConnection || "ontrack" in window.RTCPeerConnection.prototype || Object.defineProperty(window.RTCPeerConnection.prototype, "ontrack", {
                    get: function () {
                        return this._ontrack
                    }, set: function (e) {
                        this._ontrack && (this.removeEventListener("track", this._ontrack), this.removeEventListener("addstream", this._ontrackpoly)), this.addEventListener("track", this._ontrack = e), this.addEventListener("addstream", this._ontrackpoly = function (e) {
                            e.stream.getTracks().forEach(function (t) {
                                var n = new Event("track");
                                n.track = t, n.receiver = {track: t}, n.streams = [e.stream], this.dispatchEvent(n)
                            }.bind(this))
                        }.bind(this))
                    }
                })
            }, shimSourceObject: function () {
                "object" == typeof window && (!window.HTMLMediaElement || "srcObject" in window.HTMLMediaElement.prototype || Object.defineProperty(window.HTMLMediaElement.prototype, "srcObject", {
                    get: function () {
                        return this.mozSrcObject
                    }, set: function (e) {
                        this.mozSrcObject = e
                    }
                }))
            }, shimPeerConnection: function () {
                if ("object" == typeof window && (window.RTCPeerConnection || window.mozRTCPeerConnection)) {
                    window.RTCPeerConnection || (window.RTCPeerConnection = function (e, t) {
                        if (o.version < 38 && e && e.iceServers) {
                            for (var n = [], r = 0; r < e.iceServers.length; r++) {
                                var i = e.iceServers[r];
                                if (i.hasOwnProperty("urls"))for (var a = 0; a < i.urls.length; a++) {
                                    var s = {url: i.urls[a]};
                                    0 === i.urls[a].indexOf("turn") && (s.username = i.username, s.credential = i.credential), n.push(s)
                                } else n.push(e.iceServers[r])
                            }
                            e.iceServers = n
                        }
                        return new mozRTCPeerConnection(e, t)
                    }, window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype, mozRTCPeerConnection.generateCertificate && Object.defineProperty(window.RTCPeerConnection, "generateCertificate", {
                        get: function () {
                            return mozRTCPeerConnection.generateCertificate
                        }
                    }), window.RTCSessionDescription = mozRTCSessionDescription, window.RTCIceCandidate = mozRTCIceCandidate), ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (e) {
                        var t = RTCPeerConnection.prototype[e];
                        RTCPeerConnection.prototype[e] = function () {
                            return arguments[0] = new ("addIceCandidate" === e ? RTCIceCandidate : RTCSessionDescription)(arguments[0]), t.apply(this, arguments)
                        }
                    });
                    var e = RTCPeerConnection.prototype.addIceCandidate;
                    RTCPeerConnection.prototype.addIceCandidate = function () {
                        return arguments[0] ? e.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve())
                    };
                    var t = function (e) {
                        var t = new Map;
                        return Object.keys(e).forEach(function (n) {
                            t.set(n, e[n]), t[n] = e[n]
                        }), t
                    }, n = {
                        inboundrtp: "inbound-rtp",
                        outboundrtp: "outbound-rtp",
                        candidatepair: "candidate-pair",
                        localcandidate: "local-candidate",
                        remotecandidate: "remote-candidate"
                    }, r = RTCPeerConnection.prototype.getStats;
                    RTCPeerConnection.prototype.getStats = function (e, i, a) {
                        return r.apply(this, [e || null]).then(function (e) {
                            if (o.version < 48 && (e = t(e)), o.version < 53 && !i)try {
                                e.forEach(function (e) {
                                    e.type = n[e.type] || e.type
                                })
                            } catch (t) {
                                if ("TypeError" !== t.name)throw t;
                                e.forEach(function (t, o) {
                                    e.set(o, Object.assign({}, t, {type: n[t.type] || t.type}))
                                })
                            }
                            return e
                        }).then(i, a)
                    }
                }
            }
        };
        e.exports = {
            shimOnTrack: r.shimOnTrack,
            shimSourceObject: r.shimSourceObject,
            shimPeerConnection: r.shimPeerConnection,
            shimGetUserMedia: n(52)
        }
    }, function (e, t, n) {
        "use strict";
        var o = n(5).log, r = n(5).browserDetails;
        e.exports = function () {
            var e = function (e) {
                return {
                    name: {
                        NotSupportedError: "TypeError",
                        SecurityError: "NotAllowedError",
                        PermissionDeniedError: "NotAllowedError"
                    }[e.name] || e.name,
                    message: {"The operation is insecure.": "The request is not allowed by the user agent or the platform in the current context."}[e.message] || e.message,
                    constraint: e.constraint,
                    toString: function () {
                        return this.name + (this.message && ": ") + this.message
                    }
                }
            }, t = function (t, n, i) {
                var a = function (e) {
                    if ("object" != typeof e || e.require)return e;
                    var t = [];
                    return Object.keys(e).forEach(function (n) {
                        if ("require" !== n && "advanced" !== n && "mediaSource" !== n) {
                            var o = e[n] = "object" == typeof e[n] ? e[n] : {ideal: e[n]};
                            if (void 0 === o.min && void 0 === o.max && void 0 === o.exact || t.push(n), void 0 !== o.exact && ("number" == typeof o.exact ? o.min = o.max = o.exact : e[n] = o.exact, delete o.exact), void 0 !== o.ideal) {
                                e.advanced = e.advanced || [];
                                var r = {};
                                "number" == typeof o.ideal ? r[n] = {
                                    min: o.ideal,
                                    max: o.ideal
                                } : r[n] = o.ideal, e.advanced.push(r), delete o.ideal, Object.keys(o).length || delete e[n]
                            }
                        }
                    }), t.length && (e.require = t), e
                };
                return t = JSON.parse(JSON.stringify(t)), r.version < 38 && (o("spec: " + JSON.stringify(t)), t.audio && (t.audio = a(t.audio)), t.video && (t.video = a(t.video)), o("ff37: " + JSON.stringify(t))), navigator.mozGetUserMedia(t, n, function (t) {
                    i(e(t))
                })
            }, n = function (e) {
                return new Promise(function (n, o) {
                    t(e, n, o)
                })
            };
            if (navigator.mediaDevices || (navigator.mediaDevices = {
                    getUserMedia: n, addEventListener: function () {
                    }, removeEventListener: function () {
                    }
                }), navigator.mediaDevices.enumerateDevices = navigator.mediaDevices.enumerateDevices || function () {
                        return new Promise(function (e) {
                            var t = [{
                                kind: "audioinput",
                                deviceId: "default",
                                label: "",
                                groupId: ""
                            }, {kind: "videoinput", deviceId: "default", label: "", groupId: ""}];
                            e(t)
                        })
                    }, r.version < 41) {
                var i = navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
                navigator.mediaDevices.enumerateDevices = function () {
                    return i().then(void 0, function (e) {
                        if ("NotFoundError" === e.name)return [];
                        throw e
                    })
                }
            }
            if (r.version < 49) {
                var a = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
                navigator.mediaDevices.getUserMedia = function (t) {
                    return a(t).then(function (e) {
                        if (t.audio && !e.getAudioTracks().length || t.video && !e.getVideoTracks().length)throw e.getTracks().forEach(function (e) {
                            e.stop()
                        }), new DOMException("The object can not be found here.", "NotFoundError");
                        return e
                    }, function (t) {
                        return Promise.reject(e(t))
                    })
                }
            }
            navigator.getUserMedia = function (e, n, o) {
                return r.version < 44 ? t(e, n, o) : (console.warn("navigator.getUserMedia has been replaced by navigator.mediaDevices.getUserMedia"), void navigator.mediaDevices.getUserMedia(e).then(n, o))
            }
        }
    }, function (e, t) {
        "use strict";
        var n = {
            shimOnAddStream: function () {
                "object" != typeof window || !window.RTCPeerConnection || "onaddstream" in window.RTCPeerConnection.prototype || Object.defineProperty(window.RTCPeerConnection.prototype, "onaddstream", {
                    get: function () {
                        return this._onaddstream
                    }, set: function (e) {
                        this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e), this.addEventListener("track", this._onaddstreampoly = function (e) {
                            var t = e.streams[0];
                            if (this._streams || (this._streams = []), !(this._streams.indexOf(t) >= 0)) {
                                this._streams.push(t);
                                var n = new Event("addstream");
                                n.stream = e.streams[0], this.dispatchEvent(n)
                            }
                        }.bind(this))
                    }
                })
            }, shimGetUserMedia: function () {
                navigator.getUserMedia || (navigator.webkitGetUserMedia ? navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator) : navigator.mediaDevices && navigator.mediaDevices.getUserMedia && (navigator.getUserMedia = function (e, t, n) {
                        navigator.mediaDevices.getUserMedia(e).then(t, n)
                    }.bind(navigator)))
            }
        };
        e.exports = {shimOnAddStream: n.shimOnAddStream, shimGetUserMedia: n.shimGetUserMedia}
    }]);
    if (typeof exports !== 'undefined') {
        exports['default'] = exports.VoxImplant = VoxImplant;
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = exports['default'];
        }
    } else {
        root.VoxImplant = VoxImplant;
    }
}).call(this);